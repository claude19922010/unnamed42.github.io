<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[中国政治坐标系测试（北大未名版）]]></title>
      <url>/2017-03-16-%E4%B8%AD%E5%9B%BD%E6%94%BF%E6%B2%BB%E5%9D%90%E6%A0%87%E7%B3%BB%E6%B5%8B%E8%AF%95.html</url>
      <content type="html"><![CDATA[<p>本测试转载自政治坐标测试北大未名版之<a href="http://www.zuobiao.me/zuobiao2015/index.php/survey/index" target="_blank" rel="external">中国政治坐标系测试</a>。可惜的是，原网站似乎已经被干掉了，因此该测试的题目及数据处理逻辑源自<a href="http://www.mwjx.com/mwjx/iq_tests/tests_politics.html" target="_blank" rel="external">另一个网站</a>。</p><p>本来这个测试还是很有意义的，而且原作者那边利用测试统计来的数据还写了论文……但是原网站被封的现在数据无法访问，而且原文章中也没有对测试结果的解释，做完之后只能得到几个意味不明的<code>float</code>，可以说是十分可惜。</p><a id="more"></a><script type="text/javascript">$(function(){$("#submit").click(function(){var t=0,a=0,n=0;$('#questions input[name^="c"]:checked').each(function(){t+=parseInt($(this).attr("data-x")),a+=parseInt($(this).attr("data-y")),n+=parseInt($(this).attr("data-z"))}),t=Math.round(t)/20,a=Math.round(a)/20,n=Math.round(n)/10,$("#answer").html("政治立场坐标（左翼<->右翼）"+t+"，经济立场坐标（左翼<->右翼）"+a+"，文化立场坐标（保守<->自由）"+n)})})</script><style>.red{color:red}#wrapper{text-align:center}</style><p>以下测试模仿著名的英文“<a href="https://www.politicalcompass.org/test" target="_blank" rel="external">政治指南针</a>”测试建立。题目经北大未名BBS读书版网友集体讨论创作，版权属于北大未名BBS读书版及相关网友。本blog对该测试的准确性及所造成的一切后果不负责。测试结果不能作为任何学术研究的依据。题目的陈述本身不代表出题人看法。本测试为匿名，本网站不收集任何测试者个人信息。</p><p>本测试的目的是反映答题者政治、经济与社会观念“左与右”的坐标。本测试系统建立于中国政治价值体系基础之上，试图充分反映中国的特殊国情与政治文化。很多问题反映的并非严格意义上的西方政治语汇中的“左右”，而是中国现实语境中的“左右”。测试题目的陈述尽量满足中立性，即，每条陈述都不存在严格意义上的对错，同意或反对都代表彼此平等的看法。<span class="red">请注意，这套题目的目的是区分理念而不是操作手法，也就是说，问题在于你在理想中是否支持，而不是在现实困难面前是否可行。请不要因为具体条件的缺乏而去设想种种复杂背景情况，从而动摇自己意识形态上的坚持。如果犹豫不定，请选择自己的第一直觉。</span></p><p>题目共五十道，必须全部回答。选项中没有中立项，这是为了迫使你选出你心里的倾向而不是回避你不愿意考虑的问题。</p><form id="questions"><ol><li>如果人民没有受过民主教育，他们是不应该拥有普选权的。<br><input name="c1" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c1" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c1" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c1" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>令人沮丧的是，经济学家越来越成为富人的代言人。<br><input name="c2" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c2" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c2" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c2" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>人权高于主权。<br><input name="c3" type="radio" data-x="-2" data-y="0" data-z="0" checked>强烈反对<br><input name="c3" type="radio" data-x="-1" data-y="0" data-z="0">反对<br><input name="c3" type="radio" data-x="1" data-y="0" data-z="0">同意<br><input name="c3" type="radio" data-x="2" data-y="0" data-z="0">强烈同意<br></li><li>不应指责两个成年人自愿的婚前性行为。<br><input name="c4" type="radio" data-x="0" data-y="0" data-z="-2" checked>强烈反对<br><input name="c4" type="radio" data-x="0" data-y="0" data-z="-1">反对<br><input name="c4" type="radio" data-x="0" data-y="0" data-z="1">同意<br><input name="c4" type="radio" data-x="0" data-y="0" data-z="2">强烈同意<br></li><li>中国近年来经济发展的成果很多都被一小群人占有了，大多数人没得到什么好处。<br><input name="c5" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c5" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c5" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c5" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>发生重大社会安全事件时，即使认为信息公开会导致骚乱的风险，政府仍应该开放信息传播。<br><input name="c6" type="radio" data-x="-2" data-y="0" data-z="0" checked>强烈反对<br><input name="c6" type="radio" data-x="-1" data-y="0" data-z="0">反对<br><input name="c6" type="radio" data-x="1" data-y="0" data-z="0">同意<br><input name="c6" type="radio" data-x="2" data-y="0" data-z="0">强烈同意<br></li><li>在重大工程项目的决策中，个人利益应该为社会利益让路。<br><input name="c7" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c7" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c7" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c7" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>西方的多党制不适合中国国情。<br><input name="c8" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c8" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c8" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c8" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>不应当谈论或者在公开的文字中记录自己的长辈的缺点。<br><input name="c9" type="radio" data-x="0" data-y="0" data-z="2" checked>强烈反对<br><input name="c9" type="radio" data-x="0" data-y="0" data-z="1">反对<br><input name="c9" type="radio" data-x="0" data-y="0" data-z="-1">同意<br><input name="c9" type="radio" data-x="0" data-y="0" data-z="-2">强烈同意<br></li><li>浪费粮食也是个人的自由。<br><input name="c10" type="radio" data-x="0" data-y="-2" data-z="0" checked>强烈反对<br><input name="c10" type="radio" data-x="0" data-y="-1" data-z="0">反对<br><input name="c10" type="radio" data-x="0" data-y="1" data-z="0">同意<br><input name="c10" type="radio" data-x="0" data-y="2" data-z="0">强烈同意<br></li><li>在中国照搬西方式的言论自由会导致社会失序。<br><input name="c11" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c11" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c11" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c11" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>现代中国社会需要儒家思想。<br><input name="c12" type="radio" data-x="0" data-y="0" data-z="2" checked>强烈反对<br><input name="c12" type="radio" data-x="0" data-y="0" data-z="1">反对<br><input name="c12" type="radio" data-x="0" data-y="0" data-z="-1">同意<br><input name="c12" type="radio" data-x="0" data-y="0" data-z="-2">强烈同意<br></li><li>为保障社会公平，对富人征税应采用更高的税率。<br><input name="c13" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c13" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c13" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c13" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>由高校自主考试招生比全国统一考试招生更好。<br><input name="c14" type="radio" data-x="-2" data-y="0" data-z="0" checked>强烈反对<br><input name="c14" type="radio" data-x="-1" data-y="0" data-z="0">反对<br><input name="c14" type="radio" data-x="1" data-y="0" data-z="0">同意<br><input name="c14" type="radio" data-x="2" data-y="0" data-z="0">强烈同意<br></li><li>应当对国外同类产品征收高额关税来保护国内民族工业。<br><input name="c15" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c15" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c15" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c15" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>应该容许宗教人士在非宗教场所公开传教。<br><input name="c16" type="radio" data-x="-2" data-y="0" data-z="0" checked>强烈反对<br><input name="c16" type="radio" data-x="-1" data-y="0" data-z="0">反对<br><input name="c16" type="radio" data-x="1" data-y="0" data-z="0">同意<br><input name="c16" type="radio" data-x="2" data-y="0" data-z="0">强烈同意<br></li><li>任何艺术作品，只要有很多人愿意花钱去欣赏，就不能说它毫无艺术价值。<br><input name="c17" type="radio" data-x="0" data-y="0" data-z="-2" checked>强烈反对<br><input name="c17" type="radio" data-x="0" data-y="0" data-z="-1">反对<br><input name="c17" type="radio" data-x="0" data-y="0" data-z="1">同意<br><input name="c17" type="radio" data-x="0" data-y="0" data-z="2">强烈同意<br></li><li>在华外国资本应该受到限制，不能任意发展。<br><input name="c18" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c18" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c18" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c18" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>无论中小学生或大学生，都应参加由国家统一安排的军训。<br><input name="c19" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c19" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c19" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c19" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>集体财产比私有财产更应当保护。<br><input name="c20" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c20" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c20" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c20" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>试图控制房地产价格的行为是不可行的，会破坏经济发展，给社会带来危害。<br><input name="c21" type="radio" data-x="0" data-y="-2" data-z="0" checked>强烈反对<br><input name="c21" type="radio" data-x="0" data-y="-1" data-z="0">反对<br><input name="c21" type="radio" data-x="0" data-y="1" data-z="0">同意<br><input name="c21" type="radio" data-x="0" data-y="2" data-z="0">强烈同意<br></li><li>国家的统一和领土完整是社会的最高利益。<br><input name="c22" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c22" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c22" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c22" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>改善低收入者生活的首要手段是国家给予财政补贴和扶持。<br><input name="c23" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c23" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c23" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c23" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>以美国为首的西方国家不可能真正容许中国崛起成为一流强国。<br><input name="c24" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c24" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c24" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c24" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>个人有权利决定自己要不要孩子，要几个孩子。<br><input name="c25" type="radio" data-x="0" data-y="0" data-z="-2" checked>强烈反对<br><input name="c25" type="radio" data-x="0" data-y="0" data-z="-1">反对<br><input name="c25" type="radio" data-x="0" data-y="0" data-z="1">同意<br><input name="c25" type="radio" data-x="0" data-y="0" data-z="2">强烈同意<br></li><li>即使会导致国有资产的减少，国有企业也不应该在市场竞争中享有特殊的保护。<br><input name="c26" type="radio" data-x="0" data-y="-2" data-z="0" checked>强烈反对<br><input name="c26" type="radio" data-x="0" data-y="-1" data-z="0">反对<br><input name="c26" type="radio" data-x="0" data-y="1" data-z="0">同意<br><input name="c26" type="radio" data-x="0" data-y="2" data-z="0">强烈同意<br></li><li>应当保证代表全体人民利益的官方新闻机构的存在。<br><input name="c27" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c27" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c27" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c27" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>高收入者应该公开自己的经济来源。<br><input name="c28" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c28" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c28" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c28" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>国家领导人的形象可以出现在漫画中。<br><input name="c29" type="radio" data-x="-2" data-y="0" data-z="0" checked>强烈反对<br><input name="c29" type="radio" data-x="-1" data-y="0" data-z="0">反对<br><input name="c29" type="radio" data-x="1" data-y="0" data-z="0">同意<br><input name="c29" type="radio" data-x="2" data-y="0" data-z="0">强烈同意<br></li><li>周易八卦是老祖宗智慧的结晶，能够有效的解释很多事情。<br><input name="c30" type="radio" data-x="0" data-y="0" data-z="2" checked>强烈反对<br><input name="c30" type="radio" data-x="0" data-y="0" data-z="1">反对<br><input name="c30" type="radio" data-x="0" data-y="0" data-z="-1">同意<br><input name="c30" type="radio" data-x="0" data-y="0" data-z="-2">强烈同意<br></li><li>劫富济贫是行侠仗义。<br><input name="c31" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c31" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c31" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c31" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>当法律未能充分制止罪恶行为时，通过极端手段对犯罪进行制裁是可以容忍的。<br><input name="c32" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c32" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c32" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c32" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>中国传统医学具有一些现代主流医学不能比拟的优势。<br><input name="c33" type="radio" data-x="0" data-y="0" data-z="2" checked>强烈反对<br><input name="c33" type="radio" data-x="0" data-y="0" data-z="1">反对<br><input name="c33" type="radio" data-x="0" data-y="0" data-z="-1">同意<br><input name="c33" type="radio" data-x="0" data-y="0" data-z="-2">强烈同意<br></li><li>与其让公有制企业亏损破产，不如转卖给资本家。<br><input name="c34" type="radio" data-x="0" data-y="-2" data-z="0" checked>强烈反对<br><input name="c34" type="radio" data-x="0" data-y="-1" data-z="0">反对<br><input name="c34" type="radio" data-x="0" data-y="1" data-z="0">同意<br><input name="c34" type="radio" data-x="0" data-y="2" data-z="0">强烈同意<br></li><li>国家没有义务进行对外援助。<br><input name="c35" type="radio" data-x="-2" data-y="0" data-z="0" checked>强烈反对<br><input name="c35" type="radio" data-x="-1" data-y="0" data-z="0">反对<br><input name="c35" type="radio" data-x="1" data-y="0" data-z="0">同意<br><input name="c35" type="radio" data-x="2" data-y="0" data-z="0">强烈同意<br></li><li>以及其他重要国计民生的领域，必须全部由国有企业掌控。<br><input name="c36" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c36" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c36" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c36" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>如果国家综合实力许可，那么中国有权为了维护自己的利益而采取任何行动。<br><input name="c37" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c37" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c37" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c37" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>电视机构应当尽量制作格调高雅的节目，而不是只追求高收视率。<br><input name="c38" type="radio" data-x="0" data-y="0" data-z="2" checked>强烈反对<br><input name="c38" type="radio" data-x="0" data-y="0" data-z="1">反对<br><input name="c38" type="radio" data-x="0" data-y="0" data-z="-1">同意<br><input name="c38" type="radio" data-x="0" data-y="0" data-z="-2">强烈同意<br></li><li>资本积累的过程总是伴随着对普通劳动人民利益的伤害。<br><input name="c39" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c39" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c39" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c39" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>条件允许的话应该武力攻台，台独者死不足惜。<br><input name="c40" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c40" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c40" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c40" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>将传统文化的经典作品作为儿童的主要读物是值得称赞的。<br><input name="c41" type="radio" data-x="0" data-y="0" data-z="2" checked>强烈反对<br><input name="c41" type="radio" data-x="0" data-y="0" data-z="1">反对<br><input name="c41" type="radio" data-x="0" data-y="0" data-z="-1">同意<br><input name="c41" type="radio" data-x="0" data-y="0" data-z="-2">强烈同意<br></li><li>即使中国的市场经济出现危机或萧条，也不应当考虑退回计划经济体制。<br><input name="c42" type="radio" data-x="0" data-y="-2" data-z="0" checked>强烈反对<br><input name="c42" type="radio" data-x="0" data-y="-1" data-z="0">反对<br><input name="c42" type="radio" data-x="0" data-y="1" data-z="0">同意<br><input name="c42" type="radio" data-x="0" data-y="2" data-z="0">强烈同意<br></li><li>军队应当国家化。<br><input name="c43" type="radio" data-x="-2" data-y="0" data-z="0" checked>强烈反对<br><input name="c43" type="radio" data-x="-1" data-y="0" data-z="0">反对<br><input name="c43" type="radio" data-x="1" data-y="0" data-z="0">同意<br><input name="c43" type="radio" data-x="2" data-y="0" data-z="0">强烈同意<br></li><li>政府应当提高粮食收购价格以增加农民收入。<br><input name="c44" type="radio" data-x="0" data-y="2" data-z="0" checked>强烈反对<br><input name="c44" type="radio" data-x="0" data-y="1" data-z="0">反对<br><input name="c44" type="radio" data-x="0" data-y="-1" data-z="0">同意<br><input name="c44" type="radio" data-x="0" data-y="-2" data-z="0">强烈同意<br></li><li>应该允许公民在获得外国国籍之后依然保留中国国籍。<br><input name="c45" type="radio" data-x="-2" data-y="0" data-z="0" checked>强烈反对<br><input name="c45" type="radio" data-x="-1" data-y="0" data-z="0">反对<br><input name="c45" type="radio" data-x="1" data-y="0" data-z="0">同意<br><input name="c45" type="radio" data-x="2" data-y="0" data-z="0">强烈同意<br></li><li>同性恋对社会没有危害，人们应该接纳同性恋者。<br><input name="c46" type="radio" data-x="0" data-y="0" data-z="-2" checked>强烈反对<br><input name="c46" type="radio" data-x="0" data-y="0" data-z="-1">反对<br><input name="c46" type="radio" data-x="0" data-y="0" data-z="1">同意<br><input name="c46" type="radio" data-x="0" data-y="0" data-z="2">强烈同意<br></li><li>能在国际市场上买到的先进科技产品，我们没必要自行研制。<br><input name="c47" type="radio" data-x="0" data-y="-2" data-z="0" checked>强烈反对<br><input name="c47" type="radio" data-x="0" data-y="-1" data-z="0">反对<br><input name="c47" type="radio" data-x="0" data-y="1" data-z="0">同意<br><input name="c47" type="radio" data-x="0" data-y="2" data-z="0">强烈同意<br></li><li>哪怕经历了违反程序规定的审讯和取证过程，罪大恶极的人也应被处以死刑。<br><input name="c48" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c48" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c48" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c48" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li><li>政府不应当干预猪肉价格。<br><input name="c49" type="radio" data-x="0" data-y="-2" data-z="0" checked>强烈反对<br><input name="c49" type="radio" data-x="0" data-y="-1" data-z="0">反对<br><input name="c49" type="radio" data-x="0" data-y="1" data-z="0">同意<br><input name="c49" type="radio" data-x="0" data-y="2" data-z="0">强烈同意<br></li><li>国家应当采取措施培养和支持体育健儿在各种国际比赛场合为国争光。<br><input name="c50" type="radio" data-x="2" data-y="0" data-z="0" checked>强烈反对<br><input name="c50" type="radio" data-x="1" data-y="0" data-z="0">反对<br><input name="c50" type="radio" data-x="-1" data-y="0" data-z="0">同意<br><input name="c50" type="radio" data-x="-2" data-y="0" data-z="0">强烈同意<br></li></ol></form><div id="wrapper"><button id="submit" type="button" class="button button-inverse button-rounded">提交</button><br><span id="answer" class="red"></span></div><hr><p>X坐标反映政治观念，负值为左(<a href="https://en.wikipedia.org/wiki/Authoritarianism" target="_blank" rel="external">独裁主义</a>)，正值为右(<a href="https://en.wikipedia.org/wiki/Libertarianism" target="_blank" rel="external">自由意志主义</a>)。<br>Y坐标反映经济观念，负值为左(<a href="https://en.wikipedia.org/wiki/Communism" target="_blank" rel="external">共产主义</a>, <a href="https://en.wikipedia.org/wiki/Collectivism" target="_blank" rel="external">集体主义</a>)，正值为右(<a href="https://en.wikipedia.org/wiki/Neoliberalism" target="_blank" rel="external">新自由主义</a>)。<br>Z坐标反映社会文化观念，负值为<a href="https://en.wikipedia.org/wiki/Conservatism" target="_blank" rel="external">保守主义</a>，正值为<a href="https://en.wikipedia.org/wiki/Liberalism" target="_blank" rel="external">自由主义</a>。</p>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Github Issue的博客评论系统]]></title>
      <url>/2017-02-20-%E5%9F%BA%E4%BA%8EGithub-Issue%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.html</url>
      <content type="html"><![CDATA[<p>Testing now</p>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo折腾笔记]]></title>
      <url>/2016-09-10-Hexo%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0.html</url>
      <content type="html"><![CDATA[<p>身为一名预备程序员，对于自己使用的工具自然要有折腾的欲望。从今年<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>七八月以来，就一直在想着如何折腾折腾Hexo. 再加上很喜欢<a href="https://mufeng.me/wordpress-mobile-theme-kunkka.html" target="_blank" rel="external">Kunkka</a>（其Github源已404，估计被作者自己删除了）这个Wordpress的主题，想着把它移植到Hexo上来。就在这里记载一下碰到的问题和解决方案吧。</p><p>UPDATE 2016/10/28: 修改了部分用词</p><a id="more"></a><h2 id="主题的创建">主题的创建</h2><p>方便起见，我在主题中插入了<a href="https://jquery.com/" target="_blank" rel="external">jQuery</a>和<a href="http://fontawesome.io/" target="_blank" rel="external">FontAwesome</a>. 实际上，没有这两样我浑身难受。</p><h3 id="主题模板引擎">主题模板引擎</h3><p>Hexo主要提供了三款模板引擎，分别是<a href="http://www.embeddedjs.com/" target="_blank" rel="external">EJS</a>, <a href="https://naltatis.github.io/jade-syntax-docs/" target="_blank" rel="external">Jade</a>(现名<a href="https://pugjs.org/api/getting-started.html" target="_blank" rel="external">Pug</a>), <a href="http://www.swig.org/" target="_blank" rel="external">Swig</a>.</p><p>我个人看来，Jade代码结构优雅（和Python一样，不优雅不让跑），但是代码结构和HTML文档相去甚远，非常不直观。这也就意味着，要使用它不光要学习HTML, 还得特别地去学习Jade语法。而且据我本人少量的测试而言，Jade的主题和EJS的主题相比生成速度慢了几倍。EJS duang的一下就生成完了，Jade你还能在终端里看着它慢慢地一行一行的输出生成了xxx文件。</p><p>而EJS和Swig两个相比，在我使用的功能上我感觉不出什么差别。两个都和世界上最好的语言<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>一样，动态生成的部分穿插在HTML当中。不过，Swig在npm上已经没人维护了。</p><p>我本人使用的是EJS, 它脚本部分全盘使用Javascript语法，生成快，学起来也快，而且在之前有<ruby>改进<rp>(</rp><rt>xiā gǎi</rt><rp>)</rp></ruby><a href="https://github.com/unnamed42/hexo-theme-Anisina" target="_blank" rel="external">Anisina</a>的经验（它是用EJS写的）。最最重要的是，我使用的文本编辑器<a href="https://kate-editor.org/" target="_blank" rel="external">Kate</a>有它的高亮文件。这一点非常非常非常重要。</p><h3 id="主题css预处理器">主题CSS预处理器</h3><p>Hexo 所支持的CSS预处理器有<a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a>, <a href="http://stylus-lang.com/" target="_blank" rel="external">Stylus</a>, <a href="http://lesscss.org/" target="_blank" rel="external">Less</a>三款。另两个我没用过，不过Stylus功能绝对够多够强，够用了。</p><p>你要是不嫌麻烦，也可以不使用预处理器，直接莽原生CSS也是可以的。</p><h3 id="主题结构">主题结构</h3><p>这些在Hexo的文档(<a href="https://hexo.io/docs/themes.html" target="_blank" rel="external">Theme</a>, <a href="https://hexo.io/docs/templates.html" target="_blank" rel="external">Template</a>)里都有描写，虽然不是很详细，但也够用了。</p><h2 id="hexo主题相关">Hexo主题相关</h2><h3 id="回到顶部-按钮">“回到顶部”按钮</h3><h4 id="按钮样式">按钮样式</h4><p>刚开始我是仿自<a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">Maupassant</a>使用一个小按钮来实现“回到顶部”，而且当滚动到一定位置时才出现。</p><p>这一个按钮由以下部分组成：</p><figure class="highlight plain"><figcaption><span>totop.ejs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;totop&quot; class&gt;</div><div class="line">    &lt;button class=&quot;button button-square button-small&quot; title=&lt;%- __(&apos;to_top&apos;)%&gt;&gt;&lt;i class=&quot;fa fa-chevron-up&quot;&gt;&lt;/i&gt;&lt;/button&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p><code>button</code>, <code>button-square</code>, <code>button-small</code>是我引自<a href="http://www.bootcss.com/p/buttons/" target="_blank" rel="external">BUTTONS</a>的按钮样式（感谢<a href="https://github.com/MaoKwen" target="_blank" rel="external">@maokwen</a>的推荐），你也可以使用其他的按钮样式。</p><figure class="highlight css"><figcaption><span>totop.css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#totop</span> &#123;</div><div class="line">  <span class="attribute">position</span>: fixed;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">50px</span>;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">visibility</span>: hidden;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">-webkit-transition</span>: visibility <span class="number">0.2s</span>, opacity <span class="number">0.2s</span> linear;</div><div class="line">     <span class="attribute">-moz-transition</span>: visibility <span class="number">0.2s</span>, opacity <span class="number">0.2s</span> linear;</div><div class="line">          <span class="attribute">transition</span>: visibility <span class="number">0.2s</span>, opacity <span class="number">0.2s</span> linear;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#totop</span><span class="selector-class">.display</span> &#123;</div><div class="line">  <span class="attribute">visibility</span>: visible;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>totop.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123; </div><div class="line"><span class="comment">// When to show the scroll link</span></div><div class="line"><span class="comment">// higher number = scroll link appears further down the page   </span></div><div class="line"><span class="keyword">var</span> upperLimit = <span class="number">500</span>;</div><div class="line"></div><div class="line"><span class="comment">// Our scroll link element</span></div><div class="line"><span class="keyword">var</span> scrollElem = $(<span class="string">'#totop'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Scroll to top speed</span></div><div class="line"><span class="keyword">var</span> scrollSpeed = <span class="number">500</span>;</div><div class="line"></div><div class="line"><span class="comment">// Show and hide the scroll to top link based on scroll position   </span></div><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> ( $(<span class="built_in">document</span>).scrollTop() &gt; upperLimit ) &#123;</div><div class="line">        $(scrollElem).addClass(<span class="string">"display"</span>); <span class="comment">// fade back in           </span></div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $(scrollElem).removeClass(<span class="string">"display"</span>); <span class="comment">// fade out</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Scroll to top animation on click</span></div><div class="line">$(scrollElem).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'html, body'</span>).animate(&#123;<span class="attr">scrollTop</span>:<span class="number">0</span>&#125;, scrollSpeed); <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;);</div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure><p>将其插入到合适的地方即可。</p><h4 id="百分比样式">百分比样式</h4><p>后来看见了lijiancheng0614的<a href="https://lijiancheng0614.github.io/2015/08/15/2015_08_15_Migrate_to_Hexo/#%E6%B7%BB%E5%8A%A0gotop" target="_blank" rel="external">百分比样式</a>，我感觉它更强，于是换用了这个。</p><p>这个按钮是一个圆形按钮，并且有一个实时更新的圆形进度条显示你当前阅读进度。虽然功能更强，但代码量更大，性能损耗更多。具体如何取舍看你自己了。</p><figure class="highlight plain"><figcaption><span>totop.ejs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;backtoTop&quot; data-action=&quot;gototop&quot; title=&quot;&lt;%- __(&apos;to_top&apos;) %&gt;&quot;&gt;</div><div class="line">    &lt;canvas id=&quot;backtoTopCanvas&quot; width=&quot;48&quot; height=&quot;48&quot;&gt;&lt;/canvas&gt;</div><div class="line">    &lt;div class=&quot;percentage&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><figure class="highlight stylus"><figcaption><span>totop.styl</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="number">#bac</span>ktoTop &#123;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">5%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">48px</span>;</div><div class="line">    <span class="attribute">position</span>: fixed;</div><div class="line">    <span class="attribute">right</span>: -<span class="number">100px</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</div><div class="line">    -webkit-<span class="attribute">transition</span>: <span class="number">0.5s</span>;</div><div class="line">       -moz-<span class="attribute">transition</span>: <span class="number">0.5s</span>;</div><div class="line">            <span class="attribute">transition</span>: <span class="number">0.5s</span>;</div><div class="line">    &amp;<span class="selector-class">.display</span> &#123;<span class="attribute">right</span>: <span class="number">10px</span>;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.percentage</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">48px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">48px</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">48px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">    &amp;:before &#123;<span class="attribute">content</span>:attr(data-percent);&#125;</div><div class="line"><span class="comment">/*    &amp;:hover:before &#123;</span></div><div class="line">        display: inline-block;</div><div class="line">        font: normal normal normal 14px/1 FontAwesome;</div><div class="line">        font-size: inherit;</div><div class="line">        text-rendering: auto;</div><div class="line">        -webkit-font-smoothing: antialiased;</div><div class="line">        -moz-osx-font-smoothing: grayscale;</div><div class="line">        content: "\f176";</div><div class="line">    &#125;*/</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>被注释内容和下面<code>totop.js</code>最后的<code>hover()</code>不能同时用。如果上面的注释取消掉的话，下面的<code>hover()</code>就得整个删掉。其实两个的效果是相同的，都是在触发按钮的<code>hover</code>事件时给它改成图标。</p><figure class="highlight js"><figcaption><span>totop.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bigfa_scroll = &#123;</div><div class="line">    <span class="attr">drawCircle</span>: <span class="function"><span class="keyword">function</span>(<span class="params">id, percentage, color</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> width = $(id).width();</div><div class="line">        <span class="keyword">var</span> height = $(id).height();</div><div class="line">        <span class="keyword">var</span> radius = <span class="built_in">parseInt</span>(width / <span class="number">2.20</span>);</div><div class="line">        <span class="keyword">var</span> position = width;</div><div class="line">        <span class="keyword">var</span> positionBy2 = position / <span class="number">2</span>;</div><div class="line">        <span class="keyword">var</span> bg = $(id)[<span class="number">0</span>];</div><div class="line">        id = id.split(<span class="string">"#"</span>);</div><div class="line">        <span class="keyword">var</span> ctx = bg.getContext(<span class="string">"2d"</span>);</div><div class="line">        <span class="keyword">var</span> imd = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">var</span> circ = <span class="built_in">Math</span>.PI * <span class="number">2</span>;</div><div class="line">        <span class="keyword">var</span> quart = <span class="built_in">Math</span>.PI / <span class="number">2</span>;</div><div class="line">        ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</div><div class="line">        ctx.beginPath();</div><div class="line">        ctx.strokeStyle = color;</div><div class="line">        ctx.lineCap = <span class="string">"square"</span>;</div><div class="line">        ctx.closePath();</div><div class="line">        ctx.fill();</div><div class="line">        ctx.lineWidth = <span class="number">3</span>;</div><div class="line">        imd = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, position, position);</div><div class="line">        <span class="keyword">var</span> draw = <span class="function"><span class="keyword">function</span>(<span class="params">current, ctxPass</span>) </span>&#123;</div><div class="line">            ctxPass.putImageData(imd, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            ctxPass.beginPath();</div><div class="line">            ctxPass.arc(positionBy2, positionBy2, radius, -(quart), ((circ) * current) - quart, <span class="literal">false</span>);</div><div class="line">            ctxPass.stroke();</div><div class="line">        &#125;</div><div class="line">        draw(percentage / <span class="number">100</span>, ctx);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">backToTop</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$this</span>) </span>&#123;</div><div class="line">        $<span class="keyword">this</span>.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $(<span class="string">"body,html"</span>).animate(&#123;</div><div class="line">                <span class="attr">scrollTop</span>: <span class="number">0</span></div><div class="line">            &#125;,</div><div class="line">            <span class="number">800</span>);</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">scrollHook</span>: <span class="function"><span class="keyword">function</span>(<span class="params">$this, color</span>) </span>&#123;</div><div class="line">        color = color ? color: <span class="string">"#000000"</span>;</div><div class="line">        $<span class="keyword">this</span>.scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> docHeight = ($(<span class="built_in">document</span>).height() - $(<span class="built_in">window</span>).height()),</div><div class="line">            $windowObj = $<span class="keyword">this</span>,</div><div class="line">            $per = $(<span class="string">".percentage"</span>),</div><div class="line">            percentage = <span class="number">0</span>;</div><div class="line">            defaultScroll = $windowObj.scrollTop();</div><div class="line">            percentage = <span class="built_in">parseInt</span>((defaultScroll / docHeight) * <span class="number">100</span>);</div><div class="line">            <span class="keyword">var</span> backToTop = $(<span class="string">"#backtoTop"</span>);</div><div class="line">            <span class="keyword">if</span> (backToTop.length &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> ($windowObj.scrollTop() &gt; <span class="number">200</span>) &#123;</div><div class="line">                    backToTop.addClass(<span class="string">"display"</span>);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    backToTop.removeClass(<span class="string">"display"</span>);</div><div class="line">                &#125;</div><div class="line">                $per.attr(<span class="string">"data-percent"</span>, percentage);</div><div class="line">                bigfa_scroll.drawCircle(<span class="string">"#backtoTopCanvas"</span>, percentage, color);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> T = bigfa_scroll,</div><div class="line">        totop = $(<span class="string">"#backtoTop"</span>),</div><div class="line">        percent = totop.children(<span class="string">".percentage"</span>);</div><div class="line">    T.backToTop(totop);</div><div class="line">    T.scrollHook($(<span class="built_in">window</span>), <span class="string">"#99ccff"</span>);</div><div class="line">    percent.hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        percent.addClass(<span class="string">"fa-long-arrow-up"</span>);</div><div class="line">        percent.css(&#123;<span class="string">"font-family"</span>:<span class="string">"FontAwesome"</span>&#125;);</div><div class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        percent.removeClass(<span class="string">"fa-long-arrow-up"</span>);</div><div class="line">        percent.removeAttr(<span class="string">"style"</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>将其插入到合适的地方即可。</p><h3 id="目录样式">目录样式</h3><p>首先，来探索Hexo自带helper<code>toc()</code>生成的目录的HTML（该部分目录摘自我的博客<a href="https://unnamed42.github.io/2016-06-22-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86-%E6%A0%88.html">二叉树的遍历-栈</a>）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"toc"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#直接遍历算法"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>直接遍历算法<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"toc-child "</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-3"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#有关约定"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>有关约定<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-3"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#使用系统栈"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>使用系统栈<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"toc-child "</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-4"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#前序遍历"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>前序遍历<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-4"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#中序遍历"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>中序遍历<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-4"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#后序遍历"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>后序遍历<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-3"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#使用自定义栈"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>使用自定义栈<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"toc-child "</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-4"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#前序遍历-v2"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>前序遍历<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-4"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#中序遍历-v2"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>中序遍历<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-4"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#后序遍历-v2"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>后序遍历<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"toc-child"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"toc-item toc-level-5"</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"toc-link"</span> <span class="attr">href</span>=<span class="string">"#仙术"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"toc-text"</span>&gt;</span>仙术<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure><p>分层非常明显。每个链接的目的地就是对应的heading, heading的id就是链接地址去掉<code>#</code>. 各个markdown渲染器生成的结果虽然会有些许不同，但链接和id一定是对应的（Hexo的<code>toc()</code>就是根据heading的id来生成目录的，不对应的话要么没有目录，要么链接目的地是<code>undefined</code>）。</p><p>除此之外，还可以给目录做个外层包装。在本主题中，目录被包裹在<code>&lt;div id=&quot;toc&quot;&gt;&lt;/div&gt;</code>内。</p><p>我给目录定下了几个样式上的目标：</p><ol><li><p>跟随页面滚动</p></li><li><p>当滚动到某个标题时，目录的对应链接要被高亮。</p></li></ol><p>跟随页面滚动这个比较好做，保持<code>position: fixed</code>然后设置好<code>left</code>/<code>right</code>, <code>top</code>/<code>bottom</code>就好。但是仍然会有些许问题，比如滚动到文章底部时目录还能继续向下跟随移动，而且<code>top</code>无法自适应变化(在本主题中，导航栏高55px, 目录希望距离顶部35px因此<code>top</code>的初值是90px. 而90px的<code>top</code>滚动到文章区时无疑太大了)。像这样动态设置位置，只能依赖脚本。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> toc = $(<span class="string">"#toc"</span>), post = $(<span class="string">".post-body"</span>);</div><div class="line">    <span class="keyword">var</span> post_height = post.position().top + post.outerHeight(),</div><div class="line">        toc_height = toc.height(),</div><div class="line">        pos_max = post_height - toc_height;</div><div class="line">    $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> scroll_top = $(<span class="built_in">window</span>).scrollTop();</div><div class="line">        toc.css(<span class="string">"top"</span>, scroll_top&lt;<span class="number">55</span>? <span class="number">90</span>-scroll_top: (pos_max&gt;scroll_top? <span class="number">35</span>: pos_max-scroll_top));</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>其中，<code>post-body</code>是包裹文章的<code>div</code>, <code>post_height</code>就是文章区域底部的位置。使用这段脚本，就可以解决问题1了。</p><p>问题2的解决就比较麻烦了，好在有别的插件可用。经过我一番搜寻，实现了类似于Bootstrap里<code>scrollspy()</code>类似功能的轮子不少，但是没几个能用的（也许是我不会用？）。在Github上面的那几个（<a href="https://github.com/r3plica/Scrollspy" target="_blank" rel="external">r3plica/Scrollspy</a>, <a href="https://github.com/thesmart/jquery-scrollspy" target="_blank" rel="external">thesmart/jquery-scrollspy</a>, <a href="https://github.com/softwarespot/jquery-scrollspy" target="_blank" rel="external">softwarespot/jquery-scrollspy</a>, <a href="https://github.com/sxalexander/jquery-scrollspy" target="_blank" rel="external">sxalexander/jquery-scrollspy</a>）都没有起效；而<a href="https://github.com/jgallen23/toc" target="_blank" rel="external">jgallen23/toc</a>虽然有点小bug但也能用，不过最大的问题是，它的目录是附送的代码动态生成的，我要是配合它还得改css. 出于一种懒人的心态，我没有去用它。最终，我还是屈服于Bootstrap的淫威之下。</p><p>在代码里插入Bootstrap的<a href="http://getbootstrap.com/javascript/#scrollspy" target="_blank" rel="external">scrollspy.js</a>, 然后写这么一段脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"#toc ol"</span>).addClass(<span class="string">"nav"</span>);</div><div class="line">    $(<span class="string">"body"</span>).scrollspy(&#123;<span class="attr">target</span>:<span class="string">"#toc"</span><span class="comment">/* ,offset:40 */</span>&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>注释里那段是可选的，加与不加随意。而添加<code>nav</code>这个class, 是因为目前的Bootstrap使用<code>scrollspy()</code>的时候要求目标有<code>nav</code>这个class, 在开发中的v4版Bootstrap就没有这个要求了。使用这个之后，滚动到对应标题，目录里的链接以及它的上级标题的链接会添加一个<code>active</code>的class, 退出这段区域时删除class. 可以据此设置高亮。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#toc</span> &#123;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1em</span>;</div><div class="line">    <span class="attribute">position</span>: fixed;</div><div class="line">    <span class="attribute">right</span>: <span class="number">5%</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">20%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">90%</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">90px</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">6</span>) &#123;</div><div class="line">    .toc-level-&#123;i&#125; <span class="selector-class">.toc-text</span> &#123;<span class="attribute">margin-left</span>: i em;&#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.toc-text</span> &#123;<span class="attribute">white-space</span>: nowrap;&#125;</div><div class="line"><span class="selector-class">.toc-link</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</div><div class="line">    <span class="attribute">display</span>: inline-block; <span class="comment">// stretch to parent height</span></div><div class="line">    &amp;:hover &#123;<span class="attribute">text-decoration</span>: none;&#125;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.toc</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.8em</span>;</div><div class="line">    <span class="attribute">overflow</span>: auto;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">    <span class="selector-tag">li</span> &#123;<span class="attribute">list-style-type</span>: none;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.toc-child</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(hexo-config(<span class="string">'toc.collapse'</span>)) &#123;<span class="attribute">display</span>: none;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.toc-item</span> &#123;</div><div class="line">    &amp;:hover &gt; <span class="selector-class">.toc-link</span> &#123;<span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="variable">$color</span>-theme;&#125;</div><div class="line">    &amp;<span class="selector-class">.active</span> &#123;</div><div class="line">        &gt; <span class="selector-class">.toc-link</span> &#123;</div><div class="line">            <span class="attribute">color</span>: <span class="variable">$color</span>-theme;</div><div class="line">            <span class="attribute">border-left</span>: <span class="number">2px</span> solid <span class="variable">$color</span>-theme;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我是仿照Bootstrap官网的目录做的样式。要注意层级缩进的时候要使用<code>margin-left</code>, 如果使用<code>padding-left</code>那么被高亮时左边边框无法对齐。<code>$color-theme</code>填一个你喜欢的颜色即可。</p><p>如果还想把它打扮成没高亮的目录不显示，再加上下面这段：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#toc</span> <span class="selector-class">.toc-item</span> &#123;</div><div class="line">    <span class="selector-class">.toc-child</span> &#123;<span class="attribute">display</span>: none;&#125;</div><div class="line">    &amp;<span class="selector-class">.active</span> <span class="selector-class">.toc-child</span> &#123;<span class="attribute">display</span>: block;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>大功告成。</p><h3 id="脚注样式">脚注样式</h3><p>由于默认渲染器<code>hexo-renderer-marked</code>不支持footnote语法，所以为了使用脚注，必须将markdown渲染器换到<code>hexo-renderer-markdown-it</code>, 并开启<code>markdown-it</code>插件。</p><p>其使用方式就是</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Test [^1]</div><div class="line">[<span class="symbol">^1</span>]: <span class="link">Footnote</span></div></pre></td></tr></table></figure><p>生成对应的html文档是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Test</div><div class="line">    <span class="tag">&lt;<span class="name">sup</span> <span class="attr">class</span>=<span class="string">"footnote-ref"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#fn1"</span> <span class="attr">id</span>=<span class="string">"fnref1"</span>&gt;</span>[1]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">sup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"footnotes-sep"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"footnotes"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"footnotes-list"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"fn1"</span> <span class="attr">class</span>=<span class="string">"footnote-item"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>Footnote <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#fnref1"</span> <span class="attr">class</span>=<span class="string">"footnote-backref"</span>&gt;</span>↩<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure><p>然而这样的话，要看脚注就要跳来跳去地看，比较影响正常的阅读。在我在网上苦苦寻求了一阵之后，我看到了一个<a href="http://tympanus.net/codrops/2014/10/07/tooltip-styles-inspiration/" target="_blank" rel="external">很酷炫的tooltip样式</a>（你们可以上<a href="http://tympanus.net/Development/TooltipStylesInspiration/" target="_blank" rel="external">Demo</a>来感受一下），因此我决定把脚注改成这个样子的。</p><p>既然都是这种样式的了那后面的脚注内容（分割线<code>footnotes-sep</code>和脚注内容<code>footnotes</code>）都不需要了。首先上样式表：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.footnotes-sep</span>, <span class="selector-class">.footnotes</span> &#123;<span class="attribute">display</span>: none;&#125;</div><div class="line"></div><div class="line"><span class="comment">/* Style from https://github.com/codrops/TooltipStylesInspiration */</span></div><div class="line"><span class="selector-class">.footnote-ref</span> &#123;</div><div class="line">    <span class="attribute">vertical-align</span>: super;</div><div class="line">    <span class="attribute">font-size</span>: smaller;</div><div class="line">    <span class="attribute">display</span>: inline;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    &amp;<span class="selector-class">.active</span> &#123;</div><div class="line">        <span class="selector-tag">a</span>:after &#123; <span class="attribute">pointer-events</span>: auto;&#125;</div><div class="line">        <span class="selector-class">.fn-content</span> &#123;</div><div class="line">            <span class="attribute">pointer-events</span>: auto;</div><div class="line">            <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">            -webkit-<span class="attribute">transform</span>: translate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) rotate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">            <span class="attribute">transform</span>: translate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) rotate3d(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &gt; <span class="selector-tag">a</span> &#123;</div><div class="line">        <span class="attribute">cursor</span>: pointer;</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        <span class="attribute">font-weight</span>: <span class="number">700</span>;</div><div class="line">        &amp;:after &#123;</div><div class="line">            <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">width</span>: <span class="number">360px</span>;</div><div class="line">            <span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">            <span class="attribute">bottom</span>: <span class="number">100%</span>;</div><div class="line">            <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">            <span class="attribute">pointer-events</span>: none;</div><div class="line">            -webkit-<span class="attribute">transform</span>: translateX(-<span class="number">50%</span>);</div><div class="line">            <span class="attribute">transform</span>: translateX(-<span class="number">50%</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.fn-content</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">14</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.4</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: -<span class="number">5px</span> -<span class="number">5px</span> <span class="number">15px</span> rgba(<span class="number">48</span>,<span class="number">54</span>,<span class="number">61</span>,<span class="number">0.2</span>);</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">0.5em</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#2a3035</span>;</div><div class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">pointer-events</span>: none;</div><div class="line">    -webkit-<span class="attribute">transform</span>: translate3d(<span class="number">0</span>,-<span class="number">10px</span>,<span class="number">0</span>);</div><div class="line">    <span class="attribute">transform</span>: translate3d(<span class="number">0</span>,-<span class="number">10px</span>,<span class="number">0</span>);</div><div class="line">    -webkit-<span class="attribute">transition</span>: opacity <span class="number">0.3s</span>, -webkit-transform <span class="number">0.3s</span>;</div><div class="line">    <span class="attribute">transition</span>: opacity <span class="number">0.3s</span>, transform <span class="number">0.3s</span>;</div><div class="line">    <span class="comment">/* Arrow */</span></div><div class="line">    &amp;:after &#123;</div><div class="line">        <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">        <span class="attribute">top</span>: <span class="number">100%</span>;</div><div class="line">        <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">        <span class="attribute">border</span>: solid transparent;</div><div class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">width</span>: <span class="number">0</span>;</div><div class="line">        <span class="attribute">position</span>: absolute;</div><div class="line">        <span class="attribute">pointer-events</span>: none;</div><div class="line">        <span class="attribute">border-color</span>: transparent;</div><div class="line">        <span class="attribute">border-top-color</span>: <span class="number">#2a3035</span>;</div><div class="line">        <span class="attribute">border-width</span>: <span class="number">10px</span>;</div><div class="line">        <span class="attribute">margin-left</span>: -<span class="number">10px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.fn-text</span> &#123;</div><div class="line">        <span class="attribute">line-height</span>: <span class="number">1.35</span>;</div><div class="line">        <span class="attribute">display</span>: inline-block;</div><div class="line">        <span class="attribute">padding</span>: <span class="number">1.31em</span> <span class="number">1.21em</span> <span class="number">0</span>;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">14.5px</span>;</div><div class="line">        <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">        <span class="attribute">z-index</span>: <span class="number">8</span>;</div><div class="line">        <span class="selector-tag">a</span> &#123;<span class="attribute">font-weight</span>: bold;&#125;</div><div class="line">        <span class="comment">/* p &#123;margin-bottom: 0;&#125;*/</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>首先我们得生成我们需要的html, 改markdown渲染器代码虽然一劳永逸，但太麻烦了，我们可以使用jQuery来生成tooltip的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">".footnote-ref"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> id = $(<span class="keyword">this</span>).children(<span class="string">"a"</span>).attr(<span class="string">"href"</span>).substr(<span class="number">1</span>),</div><div class="line">            footnote = $(<span class="built_in">document</span>.getElementById(id)),</div><div class="line">            outer_wrapper = $(<span class="string">"&lt;span&gt;"</span>,&#123;<span class="string">"class"</span>:<span class="string">"fn-content"</span>&#125;),</div><div class="line">            inner_wrapper = $(<span class="string">"&lt;span&gt;"</span>,&#123;<span class="string">"class"</span>:<span class="string">"fn-text"</span>&#125;);</div><div class="line">        footnote.find(<span class="string">".footnote-backref"</span>).remove();</div><div class="line">        $(<span class="keyword">this</span>).append(outer_wrapper.append(inner_wrapper.html(footnote.html())));</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code>footnote-backref</code>是脚注部分返回的小图标，放在脚注tooltip里绝对不好看，也不合理。因此，我选择干掉它。</p><p>其实上面的样式和原来的相比，差了<code>width</code>和<code>margin-left</code>两个，这两个我准备用js来动态调整。由于脚注文字有多有少，直接统一一个很大的<code>width</code>对于文字少的来说有一大片空白，相当不好看，而且在手机上会溢出屏幕。而<code>margin-left</code>应该为<code>width</code>一半的负值，来保证tooltip处于脚注链接的正上方。如果改了<code>width</code>的话，<code>margin-left</code>也要跟着改变。</p><p>其实对于文字少的来说，外层<code>span</code>的<code>width</code>不会变，但内层<code>span</code>的<code>width</code>是会跟着文字量改变的。据此我们不用自己计算<code>width</code>, 等浏览器绘制完毕直接把这个值拿来用就行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> position = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> content = $(<span class="string">".fn-content"</span>).removeAttr(<span class="string">"style"</span>);</div><div class="line">        <span class="keyword">if</span>($(<span class="built_in">window</span>).width() &lt; <span class="number">640</span>)</div><div class="line">            content.css(<span class="string">"width"</span>,$(<span class="built_in">window</span>).width()/<span class="number">2</span>);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            content.css(<span class="string">"width"</span>,<span class="number">340</span>); <span class="comment">// default value</span></div><div class="line">        content.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> width = $(<span class="keyword">this</span>).children(<span class="string">".fn-text"</span>).outerWidth();</div><div class="line">            $(<span class="keyword">this</span>).css(&#123;</div><div class="line">                <span class="string">"width"</span>: width,</div><div class="line">                <span class="string">"margin-left"</span>: width/<span class="number">-2</span></div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    position();</div><div class="line">    $(<span class="built_in">window</span>).resize(position());</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>因为要根据屏幕大小确定<code>width</code>初始值，所以这个函数不光在<code>document</code>加载完毕后要执行，<code>window</code>改变大小的时候也要跟着执行。</p><p>解决完了样式的事情我们再来解决显示的事情。我希望的是点击脚注链接它要显示，再次点击时消失，点击别处也要消失（包括点击其他的脚注链接）。因此不能用<code>$(&quot;.footnote-ref&quot;).click()</code>来实现，而要通过整个<code>document</code>的点击事件来实现。这个点击的判断我们可以直接摘抄<a href="https://stackoverflow.com/a/2364639" target="_blank" rel="external">Stack Overflow</a>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> target = $(<span class="string">".fn-content"</span>),</div><div class="line">            clicked = $(t.target);</div><div class="line">        <span class="keyword">if</span>(target.is(clicked) || target.has(clicked).length != <span class="number">0</span>)</div><div class="line">            t.stopPropagation();</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> parent = clicked.parents(<span class="string">".footnote-ref"</span>),</div><div class="line">                active = $(<span class="string">".footnote-ref.active"</span>);</div><div class="line">            <span class="keyword">if</span>(!active.is(parent))</div><div class="line">                active.removeClass(<span class="string">"active"</span>);</div><div class="line">            <span class="keyword">if</span>(!parent.length)&#123;</div><div class="line">                parent.hasClass(active)?parent.removeClass(<span class="string">"active"</span>):parent.addClass(<span class="string">"active"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>将以上几段js合体（假设你放到的是<code>js/footnote.js</code>），插入到有脚注的页面即可。可以使用这个简单的Hexo插件来实现，也可以简单粗暴地在所有页面都插入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hexo.extend.filter.register(<span class="string">'after_post_render'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(data.content.indexOf(<span class="string">"#fn"</span>) != <span class="number">-1</span>)&#123;</div><div class="line">        data.content += <span class="string">"&lt;script src=\"js/footnote.js\" type=\"text/javascript\"&gt;&lt;/script&gt;"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>其实还有别的脚注tooltip化方案，比如<a href="http://www.bigfootjs.com/" target="_blank" rel="external">bigfoot.js</a>或者是<a href="http://syeong.jcsg.com/2012/07/07/footnote-tooltips/" target="_blank" rel="external">这篇博客</a>介绍的方案，但是前者体积太大。后者我看着感觉不错。</p><h3 id="在js插件中访问设置">在js插件中访问设置</h3><p>使用<code>hexo.config</code>来访问站点设置，<code>hexo.theme.config</code>来访问主题设置。</p><h3 id="根据设置生成css">根据设置生成CSS</h3><p>在Stylus里使用<code>hexo-config(entry)</code>能获取<strong>主题设置</strong>里的<code>entry</code>条目内容。可以使用这个功能根据设置生成不同的CSS, 而不用预先给你的<code>&lt;div&gt;</code>设置上好几个<code>class</code>来调整外观。</p><p><code>hexo-config</code>的定义在<a href="https://github.com/hexojs/hexo-renderer-stylus/" target="_blank" rel="external"><code>hexo-renderer-stylus</code></a>里如下：</p><figure class="highlight js"><figcaption><span>https://github.com/hexojs/hexo-renderer-stylus/blob/master/lib/renderer.js</span></figcaption><table><tr><td class="gutter"><pre><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineConfig</span>(<span class="params">style</span>) </span>&#123;</div><div class="line">  style.define(<span class="string">'hexo-config'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> getProperty(self.theme.config, data.val);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="自定义页面生成">自定义页面生成</h3><p>将下面的js放到主题文件夹下的<code>scripts</code>文件夹里，文件名随意。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line">hexo.extend.generator.register(some_name,<span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">path</span>: page_path,</div><div class="line">        <span class="attr">data</span>: &#123;&#125;,</div><div class="line">        <span class="attr">layout</span>: page_layout</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>细节解释如下：</p><ul><li><code>some_name</code>是一个<code>String</code>, 原则上这个名字可以随便填。但是Hexo自己已经占用了<code>asset</code>, <code>page</code>, <code>post</code>这三个，所以除此之外都可以。</li><li><code>data</code>代表除页面模板之外的页面内容。<strong>并非字符串</strong>。</li><li><code>page_path</code>是一个<code>String</code>, 内容应该是该网页相对根的路径，不包含代表根目录的<code>/</code>.</li><li><code>page_layout</code>是<code>String</code>或<code>String</code>的<code>Array</code>, 代表该页面使用的<code>layout</code>.</li></ul><p>示例，比如我要想生成404页面（已经写好了<code>404.ejs</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo.extend.generator.register(<span class="string">'_404'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'404.html'</span>,</div><div class="line">        <span class="attr">data</span>: &#123;&#125;,</div><div class="line">        <span class="attr">layout</span>: [<span class="string">'404'</span>,<span class="string">'layout'</span>]</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这样Hexo就会根据<code>layout/404.ejs</code>的模板在网站根目录下生成<code>404.html</code>. 如果找不到<code>404.ejs</code>的话，就会转而使用<code>layout.ejs</code>模板。</p><p>还可以同时生成多个页面：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo.extend.generator.register(some_name,<span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">        &#123;<span class="attr">path</span>: page_path1,<span class="attr">data</span>: &#123;&#125;,<span class="attr">layout</span>: page_layout1&#125;,</div><div class="line">        &#123;<span class="attr">path</span>: page_path2,<span class="attr">data</span>: &#123;&#125;,<span class="attr">layout</span>: page_layout2&#125;,</div><div class="line">        &#123;<span class="attr">path</span>: page_path3,<span class="attr">data</span>: &#123;&#125;,<span class="attr">layout</span>: page_layout3&#125;</div><div class="line">    ];</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这样做的好处就是，举例来说，不需要用户自己去写一个<code>404.md</code>来使用404页面，自动就能生成。</p><h3 id="选择性生成css或js">选择性生成css或js</h3><p>比如，我在主题的<code>source/js</code>文件夹下放了<code>duoshuo.min.js</code>这个多说本地化脚本，当设置里没启用多说的时候这个js文件还是会跟着生成。该怎么办呢？</p><p>把如下js放进主题的<code>scripts</code>文件夹下（文件名随意）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line">hexo.extend.filter.register(<span class="string">'after_generate'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> duoshuo = hexo.theme.config.duoshuo_shortname;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!duoshuo || duoshuo.length == <span class="number">0</span>)&#123;</div><div class="line">        hexo.route.remove(<span class="string">'js/duoshuo.min.js'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>其中<code>duoshuo_shortname</code>是主题设置里的一个条目。</p><p>这样，当<code>duoshuo_shortname</code>为空时，<code>duoshuo.min.js</code>不会跟着生成，从而减少所需加载量。</p><h3 id="html分块">HTML分块</h3><p>你可以将经常变动，而使用又非常频繁的部分单独拿出来，使用<a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90">上面提到的技巧</a>生成一个单独的页面，使用jQuery来加载它。</p><p>以我的主题为例，“最近文章”这个插件属于侧边栏，而侧边栏几乎在每个页面里面都有。每当post有哪怕一个很小的改动，“最近文章”就需要更新，导致侧边栏内容需要重新生成，进而导致所有的页面全部重新生成。将它单独拿出来，就可以避免这一情况发生。</p><p>首先，生成一个单独的页面<code>/components/recent-posts.html</code>.</p><figure class="highlight plain"><figcaption><span>recent_posts.ejs</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">layout: none</div><div class="line">---</div><div class="line">&lt;% if (site.posts.length)&#123; %&gt;</div><div class="line">    &lt;h3&gt;&lt;%= __(&apos;recent_posts&apos;) %&gt;&lt;/h3&gt;</div><div class="line">    &lt;ul class=&quot;list&quot;&gt;</div><div class="line">        &lt;% site.posts.sort(&apos;updated&apos;, -1).limit(8).each(function(post)&#123; %&gt;</div><div class="line">        &lt;li&gt;</div><div class="line">            &lt;p&gt;&lt;a href=&quot;&lt;%- url_for(post.path) %&gt;&quot; class=&quot;tooltipped tooltipped-n&quot; aria-label=&quot;&lt;%= post.title || __(&apos;untitled&apos;) %&gt;&quot;&gt;&lt;%= truncate(post.title || __(&apos;untitled&apos;),&#123;length: 23,omission:&quot;...&quot;&#125;) %&gt;&lt;/a&gt;&lt;/p&gt;</div><div class="line">            &lt;p&gt;&lt;%= __(&apos;updated&apos;) + __(&apos;:&apos;) %&gt;</div><div class="line">            &lt;span class=&quot;update-time&quot;&gt;&lt;%= post.updated.format(&apos;YYYY-MM-D h:m a&apos;) %&gt;&lt;/span&gt;&lt;/p&gt;</div><div class="line">        &lt;/li&gt;</div><div class="line">        &lt;% &#125;) %&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p>里面的<code>layout: none</code>非常关键，因为我们只想要这一个部分而不是一个完整的网页。</p><p>此时插入这个插件就不能使用<code>&lt;%- partial('_widget/recent_posts') %&gt;</code>来插入，而是使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Something before --&gt;</div><div class="line">&lt;% if (site.posts.length)&#123; %&gt;</div><div class="line">&lt;div class=&quot;widget recent-posts&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div><div class="line">&lt;!-- Something after --&gt;</div></pre></td></tr></table></figure><p>并且插入这样一段脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">".widget.recent_posts"</span>).load(<span class="string">"/components/recent-posts.html"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>如果还想对html做点什么修改的话，改成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">".widget.recent_posts"</span>).load(<span class="string">"/components/recent-posts.html"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">response,status</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(status === <span class="string">"success"</span>)&#123;</div><div class="line">            <span class="comment">// something</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h2 id="hexo插件使用">Hexo插件使用</h2><h3 id="hexo-generator-search">hexo-generator-search</h3><p>一个基于jQuery的本地搜索插件。它本身不提供搜索功能，它所做的只是生成博客内所有页面的索引。该插件提供的搜索内容相当于Hexo生成阶段的<code>post.content</code>. 在<a href="http://hahack.com/codes/local-search-engine-for-hexo/" target="_blank" rel="external">作者博客</a>那边的代码里有个小错误，它会导致搜索返回的匹配字符串异常地长。</p><p>既然我都把这个单独拿出来了那肯定就要做一点自己的改进了。作者提供的代码是直接去掉所有html tag再搜索，但有一点缺陷，就是存放在<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code>里的内容也会被算进搜索范围内，还有就是代码高亮的行号也会被算在内。针对这一点，我们在搜索之前利用jQuery干掉这些内容：</p><p>默认情况下，Hexo的行号是静态生成好的，而且被<code>&lt;td class=&quot;gutter&quot;&gt;</code>包着。删去<code>$(&quot;.gutter&quot;)</code>就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripper</span>(<span class="params">content</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> wrapper = $(<span class="string">"&lt;div&gt;"</span>+ content +<span class="string">"&lt;/div&gt;"</span>);</div><div class="line">    wrapper.find(<span class="string">"script,style"</span>).remove();</div><div class="line">    $(<span class="string">".gutter"</span>,wrapper).remove();</div><div class="line">    <span class="keyword">return</span> wrapper.html();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>剩下的搜索代码，可以使用作者提供的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span>(<span class="params">path, search_id, content_id</span>) </span>&#123;</div><div class="line"><span class="meta">    'use strict'</span>;</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: path,</div><div class="line">        <span class="attr">dataType</span>: <span class="string">"xml"</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params"> xmlResponse </span>) </span>&#123;</div><div class="line">            <span class="comment">// get the contents from search data</span></div><div class="line">            <span class="keyword">var</span> datas = $( <span class="string">"entry"</span>, xmlResponse ).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">title</span>: $( <span class="string">"title"</span>, <span class="keyword">this</span> ).text(),</div><div class="line">                    <span class="attr">content</span>: stripper($(<span class="string">"content"</span>,<span class="keyword">this</span>).text()),</div><div class="line">                    <span class="attr">url</span>: $( <span class="string">"url"</span> , <span class="keyword">this</span>).text()</div><div class="line">                &#125;;</div><div class="line">            &#125;).get();</div><div class="line">            <span class="keyword">var</span> $input = <span class="built_in">document</span>.getElementById(search_id);</div><div class="line">            <span class="keyword">var</span> $resultContent = <span class="built_in">document</span>.getElementById(content_id);</div><div class="line">            $input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> str=<span class="string">'&lt;ul class=\"search-result-list\"&gt;'</span>;                </div><div class="line">                <span class="keyword">var</span> keywords = <span class="keyword">this</span>.value.trim().toLowerCase().split(<span class="regexp">/[\s\-]+/</span>);</div><div class="line">                $resultContent.innerHTML = <span class="string">""</span>;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.value.trim().length &lt;= <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// perform local searching</span></div><div class="line">                datas.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> isMatch = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">var</span> content_index = [];</div><div class="line">                    <span class="keyword">var</span> data_title = data.title.trim().toLowerCase();</div><div class="line">                    <span class="keyword">var</span> data_content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>).toLowerCase();</div><div class="line">                    <span class="keyword">var</span> data_url = data.url;</div><div class="line">                    <span class="keyword">var</span> index_title = <span class="number">-1</span>;</div><div class="line">                    <span class="keyword">var</span> index_content = <span class="number">-1</span>;</div><div class="line">                    <span class="keyword">var</span> first_occur = <span class="number">-1</span>;</div><div class="line">                    <span class="comment">// only match artiles with not empty titles and contents</span></div><div class="line">                    <span class="keyword">if</span>(data_title != <span class="string">''</span> &amp;&amp; data_content != <span class="string">''</span>) &#123;</div><div class="line">                        keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword, i</span>) </span>&#123;</div><div class="line">                            index_title = data_title.indexOf(keyword);</div><div class="line">                            index_content = data_content.indexOf(keyword);</div><div class="line">                            <span class="keyword">if</span>( index_title &lt; <span class="number">0</span> &amp;&amp; index_content &lt; <span class="number">0</span> )&#123;</div><div class="line">                                isMatch = <span class="literal">false</span>;</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) &#123;</div><div class="line">                                    index_content = <span class="number">0</span>;</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                                    first_occur = index_content;</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// show search results</span></div><div class="line">                    <span class="keyword">if</span> (isMatch) &#123;</div><div class="line">                        str += <span class="string">"&lt;li&gt;&lt;a href='"</span>+ data_url +<span class="string">"' class='search-result-title'&gt;"</span>+ data_title +<span class="string">"&lt;/a&gt;"</span>;</div><div class="line">                        <span class="keyword">var</span> content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>);</div><div class="line">                        <span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// cut out 100 characters</span></div><div class="line">                            <span class="keyword">var</span> start = first_occur - <span class="number">20</span>;</div><div class="line">                            <span class="keyword">var</span> end = first_occur + <span class="number">80</span>;</div><div class="line">                            <span class="keyword">if</span>(start &lt; <span class="number">0</span>)&#123;</div><div class="line">                                start = <span class="number">0</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span>(start == <span class="number">0</span>)&#123;</div><div class="line">                                end = <span class="number">100</span>;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span>(end &gt; content.length)&#123;</div><div class="line">                                end = content.length;</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">var</span> match_content = content.substring(start, end); </div><div class="line">                            <span class="comment">// highlight all keywords</span></div><div class="line">                            keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword</span>)</span>&#123;</div><div class="line">                                <span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">"gi"</span>);</div><div class="line">                                match_content = match_content.replace(regS, <span class="string">"&lt;em class=\"search-keyword\"&gt;"</span>+keyword+<span class="string">"&lt;/em&gt;"</span>);</div><div class="line">                            &#125;);</div><div class="line">                            </div><div class="line">                            str += <span class="string">"&lt;p class=\"search-result\"&gt;"</span> + match_content +<span class="string">"...&lt;/p&gt;"</span></div><div class="line">                        &#125;</div><div class="line">                        str += <span class="string">"&lt;/li&gt;"</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                str += <span class="string">"&lt;/ul&gt;"</span>;</div><div class="line">                $resultContent.innerHTML = str;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果你的搜索框插入的是</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"site_search"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"local-search-input"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">results</span>=<span class="string">"0"</span> <span class="attr">placeholder</span>=<span class="string">"search my blog..."</span> <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"local-search-result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>那么还要在页面当中插入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> search_path = <span class="string">"&lt;%= config.search.path %&gt;"</span>;</div><div class="line">    <span class="keyword">if</span> (search_path.length == <span class="number">0</span>) &#123;</div><div class="line">        search_path = <span class="string">"search.xml"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> path = <span class="string">"&lt;%= config.root %&gt;"</span> + search_path;</div><div class="line">    searchFunc(path, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>剩下就是一些css装饰这类的细节工作了。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>2016年 <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>PHP <a href="#fnref2" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[官方版DnD阵营测试]]></title>
      <url>/2016-06-30-%E5%AE%98%E6%96%B9%E7%89%88DnD%E9%98%B5%E8%90%A5%E6%B5%8B%E8%AF%95.html</url>
      <content type="html"><![CDATA[<p>本版测试搬运自<a href="http://www.padnd.com/alignment_test2.php" target="_blank" rel="external">一个非官方的网站</a>，翻译出自<a href="https://www.douban.com/group/topic/5049348/" target="_blank" rel="external">豆瓣</a>。虽然测试并非出自官网，但内容是一样的。<span class="spoiler">为什么我不直接搬官网的呢？因为我找不到官网的测试结果处理脚本啊！</span></p><a id="more"></a><body><div class="alignprose"><form name="survey" action=""><script type="text/javascript">var alignments={lg:{name:"守序善良",value:0,description:"守序善良的人物相信，规律而强大的社会和高尚的政府，可以让大多数人民生活得更好。只要人们相信法律，并试着互相帮助，整个社会就将因此而进步。因此，这个阵营的人物将会朝着这个方向努力，他们会尽可能地为大多数人带来较多的福利及较少的伤害。他们必定信守自己的承诺。守序善良的人物，特别是圣武士，时常自己陷于善良与法律相冲突的两难处境。比如履行誓言可能会伤及无辜时，或在宗教法规和地方法律相矛盾时。"},ng:{name:"中立善良",value:0,description:"中立善良的人物相信力量平衡是十分重要的事，单方面地强调秩序或混乱，是无法达到至善的。因为整个宇宙中充满了朝着各式各样的目标而努力的生物，所以若要追求至善，便不能破坏这种平衡，甚至的设法维持这种平衡，如果说支持社会秩序可以带来至善，便得以为之。若推翻既有的社会秩序就可以达到至善，那也必须为之。社会结构对他们来说，没什么重大意义。中立善良的长处是，行善不为阶级偏见所影响。"},cg:{name:"混乱善良",value:0,description:"混乱善良的人物虽然喜欢按照自己的意思行事，心地却不错。尽管他们认同一切美德和公理，却不愿意受到律法和规范的约束。想要任意驱使这些人，要他们遵照命令做事是不可能的。这些人有自己的一套道德标准，虽然不至于为恶，但也不见得和一般大众的道德标准完全相同。混乱善良人物常会因为感到受人指使而在团队内制造矛盾，比起有计划的行动他们更喜欢即兴发挥。混乱善良阵营的人物不介意用恶毒的手段制裁他们认为是邪恶的人，即便并不喜欢这样做，但他们本身却并不带有恶意。"},ln:{name:"守序中立",value:0,description:"守序中立的人物而言，秩序和组织是非常重要的。他们认同强大、井然有序的统治阶层，不管这个统治阶层是专制的暴君，还是安和乐利的民主政府，这些人都不在乎，世界上必须有法律，而法律则必须被遵守。对他们而言，绝对的秩序比什么道德良知来的重要。只要是规定，不管结果是好是坏，都必须遵行无误。绝对公正的法官，和绝对服从命令的士兵，都是此阵营的最佳典范。守序中立对善恶持中立态度，但这不代表他们是不道德的、是道德虚无主义者或是没有道德立场。他们只不过是将道德观念永远置于服从信条、传统或者法律之下。他们通常有强烈的伦理信条，但这一信条是首先基于其信念体系，而非基于善恶认同。"},nn:{name:"绝对中立",value:0,description:"绝对中立的人物相信绝对平衡的力量，因此，他们拒绝采取任何被视为邪恶和暴力的行动。绝对中立的人会尽力避免和善良或邪恶，秩序或叛逆的力量合流。有时候他们发现自己被迫得和某个阵营结盟。为了保持平衡，这些人会刻意改变立场，和弱势者合作。然而，当强弱势力对换时，他们也会毫不犹豫地跟着改变立场。"},cn:{name:"混乱中立",value:0,description:"混乱中立的人按自己一时的兴致行动。他是一个完全的个人主义者。他重视自己的自由权利，但并不致力于保护别人的自由。他蔑视权威，愤恨约束并且挑战传统。混乱中立者并不会向无政府运动那样有意瓦解组织。如果这么做，他必须把自己的阵营转成善良(希望解放他人)或是邪恶(使异己受苦)。混乱中立的寻常称谓是“真正混乱”。注意，混乱中立者的行为也许很难预测，但他的举止并非完全随机的，他从桥上的走过去的可能性和从桥上跳下去的可能性大小并不相等。混乱中立是一个真正自由于社会约束和对改良社会的空想的阵营。"},le:{name:"守序邪恶",value:0,description:"守序邪恶的人有系统地得到他想要的东西，此行为受到他行为准则的限制，但并不顾及受其伤害的人。他关心传统、忠诚和秩序，但不关心自由、尊严和生命。他按规则行动，但没有怜悯和同情。他觉得待在统治阶层里很舒服，愿意支配别人，但也乐意为别人服务。他处罚谴责别人并不是根据他们的行为而是根据种族、信仰、祖国或社会阶层。他不愿违反法律或承诺，这种不愿部分是因为他的天性，部分是因为他需要秩序来保护他免受道德上的反对。某些守序邪恶者有特别的禁忌，比如不冷血嗜杀(但让属下去做)或不伤害儿童(如果可能的话)。他们认为这些良心上的原则使自己比一般不合人道的恶人水准高。诡计多端扩展自己势力并他的压迫人民的贵族是一个守序邪恶的例子。某些守序邪恶的人或生物狂热的效忠于邪恶，就好像十字军效忠于良善一样。伤害别人是他们这么做的目的，传播邪恶本身也是他们乐于如此的原因。他们也可能认为行恶是对某种邪恶神明或主人的责任的一部分。守序邪恶有时被称为“恶魔般的”，因为恶魔是守序邪恶的化身和典型。守序邪恶是一个有方法有意图并且能常常有所成就的邪恶阵营。"},ne:{name:"中立邪恶",value:0,description:"中立邪恶的人物为了自己可以做出任何事，一切都是为了自己，就这么简单。他们从不为死在手下的人掉泪，不论是为财、为了高兴或只是为了方便。他们不喜欢纪律，也不遵守法律、传统或任何高贵的信念。然而，他们也不像混乱邪恶者那样浮躁不安，或热爱冲突。有些中立邪恶者将邪恶视为一种理想，想要献身于邪恶。这种恶人大多是邪恶神祇或秘密组织的成员。一般人习惯将中立邪恶称为“真正的邪恶”。中立邪恶的可怕在于表现出全然的邪恶，完全没有荣誉感和对象区别。"},ce:{name:"混乱邪恶",value:0,description:"混乱邪恶的人物会因为贪婪、憎恨或欲望而做出任何事。他暴躁易怒、满怀恶意、独断暴力而且无法预料。为了得到想要的东西，他会冲动而鲁莽地行动，散播邪恶与混乱。所幸他的计划大多杂乱无章，其团体大多组织散乱。一般而言，混乱邪恶者只有被强迫时才会与人合作，其领袖常要面对斗争与暗杀。混乱邪恶的可怕在于不仅破坏美丽与生命，也破坏了美丽与生命赖以存在的秩序。"}};$(document).ready(function(){$("#submit").click(function(){var n={cx:0,lx:0,nx:0,xe:0,xg:0,xn:0};$('form[name="survey"] input[name^="q"]:checked').each(function(){n[$(this).attr("data-infl")]+=parseInt($(this).attr("data-value"))});var e,a=0,r=-1;Object.keys(alignments).forEach(function(i){var r=i.charAt(0)+"x",t="x"+i.charAt(1),c=n[r]+n[t];alignments[i].value=c,a<c&&(a=c,e=i)}),Object.keys(alignments).forEach(function(n){alignments[n].value==a&&++r}),0!=r&&(e=n.lx>n.nx&&n.lx>n.cx?"l":n.cx>n.nx&&n.cx>n.lx?"c":"n",n.xg>n.xe&&n.xg>n.xn?e+="g":n.xe>n.xn&&n.xe>n.xg?e+="e":e+="n"),e=alignments[e];var t="<p>你的阵营是：</p><h3>"+e.name+"</h3>";for(t+="<p>"+e.description+"</p>",t+="<h3>详细得分：</h3>",t+="<h4>阵营倾向：</h4>",Object.keys(alignments).forEach(function(n){var e=alignments[n];t+=e.name+" ---- ";for(var i=0;i<e.value;++i)t+="X";t+="("+e.value+")<br>"}),t+="<h4>守序与混乱：</h4>",t+="守序 ----- ",i=0;i<n.lx;i++)t+="X";for(t+="("+n.lx+")<br>",t+="中立 ----- ",i=0;i<n.nx;i++)t+="X";for(t+="("+n.nx+")<br>",t+="混乱 ----- ",i=0;i<n.cx;i++)t+="X";for(t+="("+n.cx+")<br>",t+="<h4>善良与邪恶：</h4>",t+="善良 ---- ",i=0;i<n.xg;i++)t+="X";for(t+="("+n.xg+")<br>",t+="中立 ---- ",i=0;i<n.xn;i++)t+="X";for(t+="("+n.xn+")<br>",t+="邪恶 ---- ",i=0;i<n.xe;i++)t+="X";t+="("+n.xe+")<br>",$("#result").html(t)})})</script><h2>第一卷：对亲戚的看法</h2><ol><li>长辈在家族中公开反对你，你会：<br><input name="q1" type="radio" data-infl="xg" data-value="2" checked>接受批评，改变方法<br><input name="q1" type="radio" data-infl="xg" data-value="1">尝试与长辈妥协，用折衷的方法<br><input name="q1" type="radio" data-infl="xe" data-value="1">忽略长辈的轻蔑，诽谤他们<br><input name="q1" type="radio" data-infl="xe" data-value="2">千方百计使他们收声<br></li><li>你会放弃一个前途无量的职业来帮忙解决家庭的燃眉之急吗？<br><input name="q2" type="radio" data-infl="xg" data-value="2" checked>不用想，肯定会<br><input name="q2" type="radio" data-infl="xg" data-value="1">会，但有点不情愿<br><input name="q2" type="radio" data-infl="xn" data-value="1">除非我肯定我会很快重回工作岗位<br><input name="q2" type="radio" data-infl="xn" data-value="2">不会<br></li><li>你会为了前途而背叛家人吗？<br><input name="q3" type="radio" data-infl="xe" data-value="2" checked>会，不带一点罪恶感<br><input name="q3" type="radio" data-infl="xe" data-value="1">会——只要我能秘密行事<br><input name="q3" type="radio" data-infl="xn" data-value="1">我会抗拒这诱惑<br><input name="q3" type="radio" data-infl="xn" data-value="2">我认为这个主意极为可恨<br></li><li>你尊敬一家之主吗？<br><input name="q4" type="radio" data-infl="lx" data-value="2" checked>他们的言语指导着我的行动<br><input name="q4" type="radio" data-infl="lx" data-value="1">他们是我的榜样<br><input name="q4" type="radio" data-infl="cx" data-value="1">他们通常都与我无关<br><input name="q4" type="radio" data-infl="cx" data-value="2">我当他们透明<br></li><li>如果家族要你与一个令人作呕的家伙结婚，你会：<br><input name="q5" type="radio" data-infl="lx" data-value="2" checked>听从安排，为能帮助家族而自豪<br><input name="q5" type="radio" data-infl="lx" data-value="1">会，但强颜欢笑<br><input name="q5" type="radio" data-infl="nx" data-value="1">巧妙地抗婚<br><input name="q5" type="radio" data-infl="nx" data-value="2">逃跑<br></li><li>有一位家人疏远了你。在他弥留之际，他想与你和解。你会：<br><input name="q6" type="radio" data-infl="cx" data-value="2" checked>与他谈谈，但坚守立场<br><input name="q6" type="radio" data-infl="cx" data-value="1">不跟他说话<br><input name="q6" type="radio" data-infl="nx" data-value="1">不计前嫌敞开心扉地讨论前事<br><input name="q6" type="radio" data-infl="nx" data-value="2">积极进行和解，并留心听他的遗言<br></li></ol><h2>第二卷：对朋友的看法</h2><ol><li>一个位高权重的腐败法官允诺如果你能作对你朋友不利的假证，他便给你一大笔钱。你会：<br><input name="q7" type="radio" data-infl="xe" data-value="2" checked>照做，然后拿钱<br><input name="q7" type="radio" data-infl="xe" data-value="1">拿钱照做，但尽量使证词显得无力<br><input name="q7" type="radio" data-infl="xg" data-value="1">拒绝<br><input name="q7" type="radio" data-infl="xg" data-value="2">不管结果如何，都站在朋友那一边<br></li><li>你会亲近朋友，还是与大部分人保持一段距离以保安全？<br><input name="q8" type="radio" data-infl="xg" data-value="2" checked>我有一大群密友<br><input name="q8" type="radio" data-infl="xg" data-value="1">我有些密友<br><input name="q8" type="radio" data-infl="xn" data-value="1">我有几个密友<br><input name="q8" type="radio" data-infl="xn" data-value="2">我会与人保持距离<br></li><li>你背叛过朋友吗？<br><input name="q9" type="radio" data-infl="xe" data-value="2" checked>我干过不止一次，有时也能逃避惩罚<br><input name="q9" type="radio" data-infl="xe" data-value="1">我只干过那么一次<br><input name="q9" type="radio" data-infl="xn" data-value="1">我曾被怂恿过这么做，但从未做过<br><input name="q9" type="radio" data-infl="xn" data-value="2">我从未考虑过这种事<br></li><li>你怎么看待“执子之手，与子偕老”这类对爱人的终生承诺？<br><input name="q10" type="radio" data-infl="lx" data-value="2" checked>我曾有过或正渴望着这么一段罗曼史<br><input name="q10" type="radio" data-infl="lx" data-value="1">这种罗曼史挺理想的——如果能成功的话<br><input name="q10" type="radio" data-infl="cx" data-value="1">我担心我会错过其他人对我的爱<br><input name="q10" type="radio" data-infl="cx" data-value="2">作茧自缚？真是天大的错误<br></li><li>朋友借了你钱，你会要他们还吗？<br><input name="q11" type="radio" data-infl="lx" data-value="2" checked>会，而且写好借据，不得抵赖<br><input name="q11" type="radio" data-infl="lx" data-value="1">会，但期限上会宽松些<br><input name="q11" type="radio" data-infl="nx" data-value="1">不会，尽管还了会更好<br><input name="q11" type="radio" data-infl="nx" data-value="2">不会，他们欠我一个人情<br></li><li>你仍与儿时玩伴保持联络吗？<br><input name="q12" type="radio" data-infl="nx" data-value="2" checked>是的，我们定期通信<br><input name="q12" type="radio" data-infl="nx" data-value="1">是的，我们努力保持联络<br><input name="q12" type="radio" data-infl="cx" data-value="1">不会，我经常搬家<br><input name="q12" type="radio" data-infl="cx" data-value="2">不会，我不再与他们有共同之处<br></li></ol><h2>第三卷：对集体的看法</h2><ol><li>你会花时间和金钱在集体上吗？<br><input name="q13" type="radio" data-infl="xg" data-value="2" checked>会，我会优先考虑集体的需要<br><input name="q13" type="radio" data-infl="xg" data-value="1">如果我的需求被满足的话，我会尽我所能<br><input name="q13" type="radio" data-infl="xn" data-value="1">不会，我没钱也不闲<br><input name="q13" type="radio" data-infl="xn" data-value="2">不会，花时间和金钱在集体上是一种浪费<br></li><li>集体面临被侵害的威胁，你会：<br><input name="q14" type="radio" data-infl="xg" data-value="2" checked>保卫它直至自己的最后一口气<br><input name="q14" type="radio" data-infl="xg" data-value="1">和残存同伴构筑防御<br><input name="q14" type="radio" data-infl="xe" data-value="1">一看到势头不对就逃跑<br><input name="q14" type="radio" data-infl="xe" data-value="2">与入侵者达成协议，成为间谍<br></li><li>如果你受伤了，需要急救，你的同伴愿意帮助你吗？<br><input name="q15" type="radio" data-infl="xn" data-value="2" checked>会的，因为他们知道我也会为他们做同样的事<br><input name="q15" type="radio" data-infl="xn" data-value="1">会的，因为我很受欢迎<br><input name="q15" type="radio" data-infl="xe" data-value="1">可能不会，因为我不受信任<br><input name="q15" type="radio" data-infl="xe" data-value="2">肯定不会，我在集体中树敌了<br></li><li>你尊重集体的规章和领袖吗？<br><input name="q16" type="radio" data-infl="lx" data-value="2" checked>毋庸置疑，是的<br><input name="q16" type="radio" data-infl="lx" data-value="1">是的，总的来说他们是最佳的管理方式<br><input name="q16" type="radio" data-infl="cx" data-value="1">当它适合我时，我才会——有些规章我并不认同<br><input name="q16" type="radio" data-infl="cx" data-value="2">我不关心他们；他们拿我没辙<br></li><li>同伴回避你，或嘲笑你吗？<br><input name="q17" type="radio" data-infl="cx" data-value="2" checked>是的，这些井底之蛙不会理解超规格的人<br><input name="q17" type="radio" data-infl="cx" data-value="1">有些会，因为并不是所有人都认同我<br><input name="q17" type="radio" data-infl="nx" data-value="1">不会，我看起来一切正常<br><input name="q17" type="radio" data-infl="nx" data-value="2">不会，我就是集体中的正常人的标准<br></li><li>你当官会为民作主，或者希望代表集体的意志吗？<br><input name="q18" type="radio" data-infl="lx" data-value="2" checked>做这种事是我所乐意接受的荣誉<br><input name="q18" type="radio" data-infl="lx" data-value="1">当然。这是每个人的义务<br><input name="q18" type="radio" data-infl="nx" data-value="1">不会，除非无人能接手此事<br><input name="q18" type="radio" data-infl="nx" data-value="2">不会，我不想为集体利益负责<br></li></ol><h2>第四卷：对国家的看法</h2><ol><li>你的国家闹饥荒，你会：<br><input name="q19" type="radio" data-infl="xg" data-value="2" checked>与其他人共享自己有的食物<br><input name="q19" type="radio" data-infl="xg" data-value="1">自己吃尽可能少，余下的给其他人<br><input name="q19" type="radio" data-infl="xe" data-value="1">偷取自己生存所需食物<br><input name="q19" type="radio" data-infl="xe" data-value="2">偷取尽可能多的食物，然后高价卖出<br></li><li>给你足够的钱，你会往国王的酒中下毒吗？<br><input name="q20" type="radio" data-infl="xe" data-value="2" checked>会，类似的事我干过了<br><input name="q20" type="radio" data-infl="xe" data-value="1">如果我能逃避惩罚的话，我会的<br><input name="q20" type="radio" data-infl="xn" data-value="1">不会，尽管我觉得这一大笔钱很诱人<br><input name="q20" type="radio" data-infl="xn" data-value="2">不会，而且我会叫国王小心这个阴谋<br></li><li>瘟疫传遍你的国家，你会：<br><input name="q21" type="radio" data-infl="xg" data-value="2" checked>接下寻求解药的危险任务<br><input name="q21" type="radio" data-infl="xg" data-value="1">尽力治好病人<br><input name="q21" type="radio" data-infl="xn" data-value="1">避免接触到病人<br><input name="q21" type="radio" data-infl="xn" data-value="2">逃离国家<br></li><li>你尊重领主的法律权威吗？<br><input name="q22" type="radio" data-infl="lx" data-value="2" checked>是的，X主席万岁！<br><input name="q22" type="radio" data-infl="lx" data-value="1">是的，我们的统治者大体上是公平、公正的<br><input name="q22" type="radio" data-infl="cx" data-value="1">不会，统治者还不是人一个！<br><input name="q22" type="radio" data-infl="cx" data-value="2">不会，权力必定导致腐化<br></li><li>给你一笔稳赚的生意，你会为敌国做间谍吗？<br><input name="q23" type="radio" data-infl="cx" data-value="2" checked>会，因为我的国家势必任人鱼肉<br><input name="q23" type="radio" data-infl="cx" data-value="1">会，因为国家机密对我无关紧要<br><input name="q23" type="radio" data-infl="nx" data-value="1">不会，我会被抓的<br><input name="q23" type="radio" data-infl="nx" data-value="2">不会，我不会辜负国家对我的信任<br></li><li>你依靠政府来建立社会契约和保障所有权吗？<br><input name="q24" type="radio" data-infl="lx" data-value="2" checked>是的，因为维护法律比任何个人争执重要<br><input name="q24" type="radio" data-infl="lx" data-value="1">是的，因为法庭就是为了解决这种争执而设立的<br><input name="q24" type="radio" data-infl="nx" data-value="1">你在开玩笑吗？政府连路都不会铺<br><input name="q24" type="radio" data-infl="nx" data-value="2">绝对不会，如果我自己不能保护个人所有，我就无权拥有它<br></li></ol><h2>第五卷：对刑罚的看法</h2><ol><li>如果你入狱了，你会伤害或杀死其他人而脱狱吗？<br><input name="q25" type="radio" data-infl="xe" data-value="2" checked>会，服刑这么多年等于锁住自己<br><input name="q25" type="radio" data-infl="xe" data-value="1">会，在犯事时便已知道这风险了<br><input name="q25" type="radio" data-infl="xn" data-value="1">不会，除非只造成容易愈合的小伤<br><input name="q25" type="radio" data-infl="xn" data-value="2">不会，那些守卫只是在尽本分而已<br></li><li>你接受贵族有权恶劣对待手下的仆人吗？<br><input name="q26" type="radio" data-infl="xn" data-value="2" checked>是的，很幸运，贵族们投了个好胎<br><input name="q26" type="radio" data-infl="xn" data-value="1">是的，有时要靠吓，他们才肯干活<br><input name="q26" type="radio" data-infl="xg" data-value="1">不会，贵族应仁慈地统治<br><input name="q26" type="radio" data-infl="xg" data-value="2">任何人都无权恶劣对待别人。以上。<br></li><li>你意外地犯罪了，你会：<br><input name="q27" type="radio" data-infl="xg" data-value="2" checked>认罪，并向受害者赔偿<br><input name="q27" type="radio" data-infl="xg" data-value="1">认罪，向法官请求宽大处理<br><input name="q27" type="radio" data-infl="xe" data-value="1">隐瞒自己的涉案事实，必要时说谎<br><input name="q27" type="radio" data-infl="xe" data-value="2">嫁祸于人<br></li><li>如果犯罪了，你会认罪吗？<br><input name="q28" type="radio" data-infl="lx" data-value="2" checked>会，因为我有这个责任<br><input name="q28" type="radio" data-infl="lx" data-value="1">会，因为我会因此获得轻判<br><input name="q28" type="radio" data-infl="nx" data-value="1">不会，我会等到检察官证明我有罪<br><input name="q28" type="radio" data-infl="nx" data-value="2">不会，我会证明我“无罪”的<br></li><li>如果可能被惩罚，你会表明一个革命性的政见吗？<br><input name="q29" type="radio" data-infl="cx" data-value="2" checked>会，我宁愿受罚也不愿保持沉默<br><input name="q29" type="radio" data-infl="cx" data-value="1">会，总要有人说真话<br><input name="q29" type="radio" data-infl="nx" data-value="1">不会，尽管私底下我会对朋友说<br><input name="q29" type="radio" data-infl="nx" data-value="2">不会，不值得为政治费神<br></li><li>旅行时，你目击了一场袭击。你被传去作证，这会非常耽误你的行程。你会：<br><input name="q30" type="radio" data-infl="cx" data-value="2" checked>连夜溜走，避免作证<br><input name="q30" type="radio" data-infl="cx" data-value="1">说自己什么也没看到<br><input name="q30" type="radio" data-infl="lx" data-value="1">勉强留下，作证，然后离开<br><input name="q30" type="radio" data-infl="lx" data-value="2">留下直至结案所需证供足够<br></li></ol><h2>第六卷：对财富的看法</h2><ol><li>财富的最大用途是什么？<br><input name="q31" type="radio" data-infl="xg" data-value="2" checked>帮助穷人和不幸的人<br><input name="q31" type="radio" data-infl="xg" data-value="1">满足亲朋戚友需要<br><input name="q31" type="radio" data-infl="xe" data-value="1">让自己达到人生巅峰<br><input name="q31" type="radio" data-infl="xe" data-value="2">不仅达到巅峰，还要阻止别人超过自己<br></li><li>遇到乞丐，你会：<br><input name="q32" type="radio" data-infl="xg" data-value="2" checked>慷慨地给钱<br><input name="q32" type="radio" data-infl="xg" data-value="1">恰到好处地给钱<br><input name="q32" type="radio" data-infl="xn" data-value="1">只给我认为无所谓的钱——至多一两块<br><input name="q32" type="radio" data-infl="xn" data-value="2">视而不见<br></li><li>通过魔法，你可以使村里的商人们以为你的铜币是金币。你会这样做吗？<br><input name="q33" type="radio" data-infl="xe" data-value="2" checked>会，而且我还要尽可能地消费<br><input name="q33" type="radio" data-infl="xe" data-value="1">会，但只骗富商<br><input name="q33" type="radio" data-infl="xn" data-value="1">不会，风险太大了<br><input name="q33" type="radio" data-infl="xn" data-value="2">不会，商人也要养家糊口啊<br></li><li>你有两份工作可供选择。一份酬劳更多，另一份较稳定。你会选哪一份？<br><input name="q34" type="radio" data-infl="nx" data-value="2" checked>肯定是更赚钱的那份；稳定的工作听上去像苦差事<br><input name="q34" type="radio" data-infl="nx" data-value="1">可能是前者，尽管我会看看后者干些什么<br><input name="q34" type="radio" data-infl="lx" data-value="1">后者，除非前者赚的钱多到吓死人<br><input name="q34" type="radio" data-infl="lx" data-value="2">肯定是稳定的那份，因为我有长远的计划<br></li><li>最佳的致富途径是什么？<br><input name="q35" type="radio" data-infl="cx" data-value="2" checked>这关乎天时地利，还有一时运气<br><input name="q35" type="radio" data-infl="cx" data-value="1">灵活变通会有更多机会<br><input name="q35" type="radio" data-infl="lx" data-value="1">按照一个有适度风险的长期计划来做<br><input name="q35" type="radio" data-infl="lx" data-value="2">努力工作，坚持不懈<br></li><li>如果你接手一项工作，尽管它会很危险，你会努力完成吗？<br><input name="q36" type="radio" data-infl="nx" data-value="2" checked>会，我说话算数<br><input name="q36" type="radio" data-infl="nx" data-value="1">会，因为人家会认为我信得过，这很好<br><input name="q36" type="radio" data-infl="cx" data-value="1">你可以赌我会否爽约<br><input name="q36" type="radio" data-infl="cx" data-value="2">如果这不是什么好差事，那算了吧<br></li></ol><div align="center"><button id="submit" class="button button-inverse button-rounded" type="button">提交</button></div><div id="result"></div></form></div></body>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> DnD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo spoiler插件]]></title>
      <url>/2016-06-25-hexo-spoiler%E6%8F%92%E4%BB%B6.html</url>
      <content type="html"><![CDATA[<p>这是个新手做的非常简单的插件。</p><p>UPDATE 2016/06/27: 添加点击可见功能</p><p>UPDATE 2017/03/13: 更正一些错误知识</p><a id="more"></a><p>由于看到了萌娘百科和Steam的黑幕插件，我就萌生了在博客上也用上这个功能的想法。之前想表达一些嘿嘿嘿的信息的时候，要么使用自带的划线，或者是使用<a href="https://github.com/JamesPan/hexo-ruby-character" target="_blank" rel="external">hexo-ruby-character</a>。但这些还不够喜感，像萌娘百科的那种才有喜感，然而它在手机上十分蛋疼（手机上就算选中了也看不到内容，而且那个黑条也不是点击消失的）。我的小伙伴也做了个黑幕插件，在此打个<a href="https://github.com/MaoKwen/hexo-black-cover" target="_blank" rel="external">广告</a><span class="spoiler">我没用过，不知道怎样，效果不好不要打我</span>。</p><p>今天做制作准备工作的时候（其实就是在各网站搜刮css和脚本），偶然间发现了<a href="https://meta.discourse.org/t/folding-spoilers/16123/2" target="_blank" rel="external">这个网站</a>，他自带的spoiler是类似高斯模糊效果，点击可消失，我一下就心动了，仿照他们的做了这么个插件。</p><h2 id="安装与使用">安装与使用</h2><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-spoiler --save</div></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% spoiler text %&#125;</div></pre></td></tr></table></figure><h2 id="成果展示">成果展示</h2><p>可以遮蔽正常文本：<span class="spoiler">text</span></p><p>可以遮蔽带格式的文本：<span class="spoiler"><em>text</em> <strong>text</strong> <s>text</s></span></p><p>可以遮蔽行内代码，但是效果非常差：<span class="spoiler"><code>code</code></span></p><h2 id="缺点">缺点</h2><ol><li><p>当内部有代码块的时候效果非常糟糕</p></li><li><p><del>只是鼠标划过的时候显示文本，而不是像原网站那样点击显示文本，再点击隐藏 <span class="spoiler">我觉得他们肯定用了js脚本</span></del>点击可隐藏，再点击消失<del>，但缺少动画效果</del>。</p></li><li><p>目前它产生的HTML代码是<code>&lt;span&gt;</code>包起来的，而且我去除了它渲染时生成的<code>&lt;p&gt;</code>, 所以如果你需要换行的话也许需要自己手动加上<code>&lt;br&gt;</code></p></li><li><p><del>在手机上会有点卡，因为它似乎先触发<code>hover</code>效果再触发<code>click</code>事件。</del>已经无所谓了</p></li></ol><h2 id="背后的故事">背后的故事</h2><p>实际上是抄袭那个网站的css, 在每个文章的正文中都植入这个css. css长这样：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">span</span><span class="selector-class">.spoiler</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);</div><div class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0);</div><div class="line">    <span class="attribute">text-shadow</span>: grey <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span>;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span><span class="selector-class">.spoiler</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">text-shadow</span>: grey <span class="number">0px</span> <span class="number">0px</span> <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span><span class="selector-class">.spoiler</span><span class="selector-class">.revealed</span> &#123;</div><div class="line">    <span class="attribute">text-shadow</span>: grey <span class="number">0px</span> <span class="number">0px</span> <span class="number">0px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后给每个需要遮蔽的文本渲染后用<code>&lt;span class=&quot;spoiler&quot;&gt;</code>框起来。使用jQuery或者是DOM API来处理它的点击事件，通过加上<code>revealed</code>来使马赛克消失或显示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> spoiler = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"spoiler"</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spoiler.length; ++i) &#123;</div><div class="line">        spoiler[i].addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.classList.toggle(<span class="string">"revealed"</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>就是这么简单。为什么我（初版）做了一天呢？<span class="spoiler">因为你智障啊</span></p>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二叉树的遍历-无栈]]></title>
      <url>/2016-06-22-2016-06-022-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86-%E6%97%A0%E6%A0%88.html</url>
      <content type="html"><![CDATA[<p>一个在数据结构领域被艹了又艹的话题。本文只涉及使用指向父节点的指针<code>parent</code>来遍历二叉树（不包含层次遍历），并将其包装为迭代器。</p><p>UPDATE 2016/06/22: 将不使用栈的部分从原来的大文章中分离出来</p><p>UPDATE 2016/10/28: 文章名从“二叉树的遍历-迭代器”改为“二叉树的遍历-无栈”，并将使用栈的迭代器移到对应文章</p><a id="more"></a><h2 id="直接遍历">直接遍历</h2><h3 id="有关约定">有关约定</h3><p>树节点定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">    TreeNode *left,*right,*parent;</div><div class="line">    </div><div class="line">    TreeNode(<span class="keyword">int</span> x):data(x),left(<span class="literal">nullptr</span>),right(<span class="literal">nullptr</span>),parent(<span class="literal">nullptr</span>) &#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>代码中的<code>Func</code>是函数类，也可以用函数指针/<code>std::function</code>替换之。</p><h3 id="不使用栈">不使用栈</h3><p>由于我的迭代器中不包含栈，所以首先要讨论这种不使用栈的方法，将循环的主体提取出来就是迭代器自增的逻辑。</p><p>为了达到回溯的目的，必须给节点添加上父节点的指针，否则遍历无法进行。虽然这种方法无需额外的辅助工具，但相比使用栈的算法，由于每个节点都多了一个<code>parent</code>指针，额外空间就相当于变成了$O(n)$（只是相比使用栈的，实际讨论起来这是个$O(1)$的算法）。</p><p>在这一类算法中，必须要用到各种遍历前后相邻节点的关系。</p><h4 id="前序遍历">前序遍历</h4><p>设当前节点为<code>node</code>, 父节点为<code>parent</code>. 在访问<code>node</code>之后，可有如下几种去向：</p><ol><li><p>向左进发；</p></li><li><p>左边已经访问过（或为空）时向右进发；</p></li><li><p>都访问过时向上回溯。</p></li></ol><p>前两个都很好理解，只是第三个需要进行一番讨论。从<code>node</code>向上回溯时，根据前序遍历特性可以认为以<code>node</code>为根的子树已经遍历完毕，其父节点<code>parent</code>也已访问过。回溯至<code>parent</code>, 如果<code>node</code>是<code>parent</code>的左子树，则对<code>parent</code>来说是左子树已经遍历完毕了，应该向<code>parent</code>的右子树进发；如果<code>node</code>是<code>parent</code>的右子树，此时<code>parent</code>的情况与<code>node</code>相同，此时令<code>node=parent</code>, <code>parent=parent-&gt;parent</code>, 循环处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>&gt; <span class="title">void</span> <span class="title">preorder</span>(<span class="title">TreeNode</span> *<span class="title">root</span>,<span class="title">Func</span> <span class="title">visit</span>)&#123;</span></div><div class="line">    <span class="keyword">while</span>(root!=<span class="literal">nullptr</span>)&#123;</div><div class="line">        visit(root-&gt;data);</div><div class="line">        <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</div><div class="line">            root=root-&gt;left;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</div><div class="line">            root=root-&gt;right;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">auto</span> parent=root-&gt;parent;</div><div class="line">            <span class="keyword">while</span>(parent!=<span class="literal">nullptr</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(root==parent-&gt;left &amp;&amp; parent-&gt;right!=<span class="literal">nullptr</span>)&#123;</div><div class="line">                    root=parent-&gt;right;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="comment">/* if(root==parent-&gt;right) */</span> &#123;</div><div class="line">                    root=parent;</div><div class="line">                    parent=parent-&gt;parent;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(parent==<span class="literal">nullptr</span>)</div><div class="line">                root=<span class="literal">nullptr</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="中序遍历">中序遍历</h4><p>设当前节点为<code>node</code>, 父节点为<code>parent</code>. 在访问<code>node</code>之后，考虑到中序遍历特点我们可以认为<code>node</code>的左子树已经遍历完毕。因此，<code>node</code>可有如下几种去向：</p><ol><li><p>向右进发；</p></li><li><p>若右已经访问过（或为空），向上回溯。</p></li></ol><p>回溯至<code>parent</code>之后，如果<code>node</code>是<code>parent</code>的左子树，对<code>parent</code>来说要向右进发；如果<code>node</code>是<code>parent</code>的右子树，则对<code>parent</code>来说左右都已访问完毕，情况同<code>node</code>，即可令<code>node=parent</code>, <code>parent=parent-&gt;parent</code>, 循环处理。</p><p>由于中序遍历不是直接从树的根开始，因此要找到遍历的起始节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function">TreeNode* <span class="title">inorder_first</span><span class="params">(TreeNode *root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">while</span>(root-&gt;left!=<span class="literal">nullptr</span>)</div><div class="line">        root=root-&gt;left;</div><div class="line">    <span class="keyword">return</span> root;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>&gt; <span class="title">void</span> <span class="title">inorder</span>(<span class="title">TreeNode</span> *<span class="title">root</span>,<span class="title">Func</span> <span class="title">visit</span>)&#123;</span></div><div class="line">    root=inorder_first(root);</div><div class="line">    <span class="keyword">while</span>(root!=<span class="literal">nullptr</span>)&#123;</div><div class="line">        visit(root-&gt;data);</div><div class="line">        <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</div><div class="line">            root=inorder_first(root-&gt;right);</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">auto</span> parent=root-&gt;parent;</div><div class="line">            <span class="keyword">while</span>(parent!=<span class="literal">nullptr</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(root==parent-&gt;left)&#123;</div><div class="line">                    root=parent;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="comment">/* else if(root==parent-&gt;right) */</span></div><div class="line">                root=parent;</div><div class="line">                parent=parent-&gt;parent;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(parent==<span class="literal">nullptr</span>)</div><div class="line">                root=<span class="literal">nullptr</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="后序遍历">后序遍历</h4><p>设当前节点为<code>node</code>, 父节点为<code>parent</code>. 在访问<code>node</code>之后，考虑到后序遍历特点我们可以认为<code>node</code>的左右子树均已遍历完毕。因此，<code>node</code>只能向上回溯。</p><p>回溯至<code>parent</code>之后，如果<code>node</code>是<code>parent</code>的左子树，对<code>parent</code>来说接下来要遍历右子树；如果<code>node</code>是<code>parent</code>的右子树，则对<code>parent</code>来说左右已经访问完毕，情况同<code>node</code>，即可令<code>node=parent</code>, <code>parent=parent-&gt;parent</code>, 循环处理。</p><p>由于后序遍历不是直接从树的根开始，因此也要找到它起始节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function">TreeNode* <span class="title">postorder_first</span><span class="params">(TreeNode *root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">for</span>(;;)&#123;</div><div class="line">        <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</div><div class="line">            root=root-&gt;left;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</div><div class="line">            root=root-&gt;right;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>&gt; <span class="title">void</span> <span class="title">postorder</span>(<span class="title">TreeNode</span> *<span class="title">root</span>,<span class="title">Func</span> <span class="title">visit</span>)&#123;</span></div><div class="line">    root=postorder_first(root);</div><div class="line">    <span class="keyword">while</span>(root!=<span class="literal">nullptr</span>)&#123;</div><div class="line">        visit(root-&gt;data);</div><div class="line">        <span class="keyword">auto</span> parent=root-&gt;parent;</div><div class="line">        <span class="keyword">if</span>(parent!=<span class="literal">nullptr</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(root==parent-&gt;left &amp;&amp; parent-&gt;right!=<span class="literal">nullptr</span>)</div><div class="line">                root=postorder_first(parent-&gt;right);</div><div class="line">            <span class="keyword">else</span> <span class="comment">/* if(root==parent-&gt;right) */</span></div><div class="line">                root=parent;</div><div class="line">        &#125; <span class="keyword">else</span> </div><div class="line">            root=<span class="literal">nullptr</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="迭代器遍历">迭代器遍历</h2><h3 id="有关约定-v2">有关约定</h3><p>迭代器有关接口声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">iterator</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        iterator(TreeNode *root); <span class="comment">// 待实现</span></div><div class="line">        iterator(<span class="keyword">const</span> iterator &amp;o):m_cursor(o.m_cursor) &#123;&#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123;<span class="keyword">return</span> m_cursor-&gt;data;&#125;</div><div class="line">        <span class="keyword">int</span>* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123;<span class="keyword">return</span> &amp;<span class="keyword">operator</span>*();&#125;</div><div class="line">        iterator&amp; <span class="keyword">operator</span>++(); <span class="comment">// 待实现</span></div><div class="line">        iterator <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;<span class="keyword">auto</span> i=*<span class="keyword">this</span>; <span class="keyword">operator</span>++(); <span class="keyword">return</span> i;&#125;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        TreeNode *m_cursor;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>注意：</p><ol><li><p><code>operator++()</code>所实现的操作是找到在遍历序列中，当前节点的下一个节点。我们应该认为当前节点已经访问过了。</p></li><li><p>在下文中，虽然三种遍历算法的迭代器都叫<code>iterator</code>, 但实际上是三种不同的类型。为描述简单起见我共用一个名称。</p></li><li><p>在这里<code>operator-&gt;()</code>是非必须的，如果使用会导致编译错误。但设计成泛型迭代器的话那么就是必须要重载的一个重要运算符了。</p></li><li><p>如果想和STL接轨，迭代器实现起来不会如此简单，还要定义一大堆类型别名，设置迭代器种类等。该迭代器由于只能自增，因此属于<a href="http://en.cppreference.com/w/cpp/concept/ForwardIterator" target="_blank" rel="external"><code>ForwardIterator</code></a>.</p></li></ol><h3 id="具体实现">具体实现</h3><p>比起有栈的版本，不使用栈的版本更好拆分。我们可以认为while循环之前的部分是迭代器初始化，while循环之内除去<code>visit</code>的部分是一次<code>operator++()</code>.</p><h4 id="前序遍历-v2">前序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">iterator::iterator(TreeNode *root):m_cursor(root) &#123;&#125;</div><div class="line"></div><div class="line">iterator&amp; iterator::<span class="keyword">operator</span>++()&#123;</div><div class="line">    <span class="keyword">if</span>(m_cursor==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span>(m_cursor-&gt;left!=<span class="literal">nullptr</span>)</div><div class="line">        m_cursor=m_cursor-&gt;left;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(m_cursor-&gt;right!=<span class="literal">nullptr</span>)</div><div class="line">        m_cursor=m_cursor-&gt;right;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">auto</span> parent=m_cursor-&gt;parent;</div><div class="line">        <span class="keyword">while</span>(parent!=<span class="literal">nullptr</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(parent-&gt;right==<span class="literal">nullptr</span> || m_cursor==parent-&gt;right)&#123;</div><div class="line">                m_cursor=parent;</div><div class="line">                parent=parent-&gt;parent;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                m_cursor=parent-&gt;right;</div><div class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        m_cursor=<span class="literal">nullptr</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="中序遍历-v2">中序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">iterator::iterator(TreeNode *root):m_cursor(root)&#123;</div><div class="line">    <span class="keyword">if</span>(m_cursor==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">while</span>(m_cursor-&gt;left!=<span class="literal">nullptr</span>)</div><div class="line">        m_cursor=m_cursor-&gt;left;</div><div class="line">&#125;</div><div class="line"></div><div class="line">iterator&amp; iterator::<span class="keyword">operator</span>++()&#123;</div><div class="line">    <span class="keyword">if</span>(m_cursor==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span>(m_cursor-&gt;right!=<span class="literal">nullptr</span>)&#123;</div><div class="line">        m_cursor=m_cursor-&gt;right;</div><div class="line">        <span class="keyword">while</span>(m_cursor-&gt;left!=<span class="literal">nullptr</span>)</div><div class="line">            m_cursor=m_cursor-&gt;left;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">auto</span> parent=m_cursor-&gt;parent;</div><div class="line">        <span class="keyword">while</span>(parent!=<span class="literal">nullptr</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(m_cursor==parent-&gt;left)&#123;</div><div class="line">                m_cursor=parent;</div><div class="line">                <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">            &#125;</div><div class="line">            m_cursor=parent;</div><div class="line">            parent=parent-&gt;parent;</div><div class="line">        &#125;</div><div class="line">        m_cursor=<span class="literal">nullptr</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="后序遍历-v2">后序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 辅助用函数</span></div><div class="line"><span class="function">TreeNode* <span class="title">next</span><span class="params">(TreeNode *root)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">for</span>(;;)&#123;</div><div class="line">        <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</div><div class="line">            root=root-&gt;left;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</div><div class="line">            root=root-&gt;right;</div><div class="line">        <span class="keyword">else</span> </div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">iterator::iterator(TreeNode *root):m_cursor(next(root)) &#123;&#125;</div><div class="line"></div><div class="line">iterator&amp; iterator::<span class="keyword">operator</span>++()&#123;</div><div class="line">    <span class="keyword">if</span>(m_cursor==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">auto</span> parent=m_cursor-&gt;parent;</div><div class="line">    <span class="keyword">if</span>(parent!=<span class="literal">nullptr</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(m_cursor==parent-&gt;left &amp;&amp; parent-&gt;right!=<span class="literal">nullptr</span>)</div><div class="line">            m_cursor=next(parent-&gt;right);</div><div class="line">        <span class="keyword">else</span> </div><div class="line">            m_cursor=parent;</div><div class="line">    &#125; <span class="keyword">else</span> </div><div class="line">        m_cursor=<span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二叉树的遍历-栈]]></title>
      <url>/2016-06-22-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86-%E6%A0%88.html</url>
      <content type="html"><![CDATA[<p>一个在数据结构领域被艹了又艹的话题。本文只涉及使用栈来遍历二叉树（不包含层次遍历），并将其包装为迭代器。</p><p>UPDATE 2016/06/22: 将栈的部分从原来的大文章中分离出来</p><p>UPDATE 2016/10/28: 拿回了属于自己的迭代器</p><a id="more"></a><h2 id="直接遍历">直接遍历</h2><h3 id="有关约定">有关约定</h3><p>树节点定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> data;</div><div class="line">    TreeNode *left,*right;</div><div class="line">    </div><div class="line">    TreeNode(<span class="keyword">int</span> x):data(x),left(<span class="literal">nullptr</span>),right(<span class="literal">nullptr</span>) &#123;&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>代码中的<code>Func</code>是函数类，也可以用函数指针/<code>std::function</code>替换之。</p><h3 id="使用系统栈">使用系统栈</h3><p>这绝对是简单到爆的一个实现方法了，不可能还有比这更简单的了。几乎就是照着这几种遍历的定义翻译到程序代码，因此不做过多解释。</p><h4 id="前序遍历">前序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>&gt; <span class="title">void</span> <span class="title">preorder</span>(<span class="title">TreeNode</span> *<span class="title">root</span>,<span class="title">Func</span> <span class="title">visit</span>)&#123;</span></div><div class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    visit(root-&gt;data);</div><div class="line">    preorder(root-&gt;left,visit);</div><div class="line">    preorder(root-&gt;right,visit);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="中序遍历">中序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>&gt; <span class="title">void</span> <span class="title">inorder</span>(<span class="title">TreeNode</span> *<span class="title">root</span>,<span class="title">Func</span> <span class="title">visit</span>)&#123;</span></div><div class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    inorder(root-&gt;left,visit);</div><div class="line">    visit(root-&gt;data);</div><div class="line">    inorder(root-&gt;right,visit);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="后序遍历">后序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>&gt; <span class="title">void</span> <span class="title">postorder</span>(<span class="title">TreeNode</span> *<span class="title">root</span>,<span class="title">Func</span> <span class="title">visit</span>)&#123;</span></div><div class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    postorder(root-&gt;left,visit);</div><div class="line">    postorder(root-&gt;right,visit);</div><div class="line">    visit(root-&gt;data);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="使用自定义栈">使用自定义栈</h3><p>难度开始逐步提升了。在抛开了系统栈之后，我们应该如何使用自定义栈来<strong>替换</strong>掉系统栈呢？</p><h4 id="前序遍历-v2">前序遍历</h4><p>观察原来使用系统栈的算法，先访问当前节点，之后向左走，再之后向右走。如果只是对系统栈无脑地模拟的话，向左走时把当前节点入栈，完成后退栈；向右走时同法。但在向右走时这一个调用（<code>preorder(root-&gt;right,visit)</code>）属于尾递归，此时不需要入栈，直接替换掉对应变量值即可。</p><p>总结一下，先访问当前节点；将右边入栈；节点值替换成左节点，循环。当前支路走无可走之时，弹栈，继续；此时如果栈空，结束。循环这整个过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>&gt; <span class="title">void</span> <span class="title">preorder</span>(<span class="title">TreeNode</span> *<span class="title">root</span>,<span class="title">Func</span> <span class="title">visit</span>)&#123;</span></div><div class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode*&gt; <span class="built_in">stack</span>;</div><div class="line">    <span class="keyword">while</span>(root!=<span class="literal">nullptr</span>)&#123;</div><div class="line">        visit(root-&gt;data);</div><div class="line">        <span class="keyword">if</span>(root-&gt;right!=<span class="literal">nullptr</span>)</div><div class="line">            <span class="built_in">stack</span>.push(root-&gt;right);</div><div class="line">        <span class="keyword">if</span>(root-&gt;left!=<span class="literal">nullptr</span>)</div><div class="line">            root=root-&gt;left;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">stack</span>.empty())</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            root=<span class="built_in">stack</span>.top();</div><div class="line">            <span class="built_in">stack</span>.pop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="中序遍历-v2">中序遍历</h4><p>同样对系统栈进行模拟，参考前序的流程，中序的流程如下：将当前节点入栈，向左走走到黑；不可走时弹栈（如果栈空则结束），访问该节点，之后向右走一步。如果向右走遇到空，重复弹栈-访问-向右的操作。循环这整个过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>&gt; <span class="title">void</span> <span class="title">inorder</span>(<span class="title">TreeNode</span> *<span class="title">root</span>,<span class="title">Func</span> <span class="title">visit</span>)&#123;</span></div><div class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode*&gt; <span class="built_in">stack</span>;</div><div class="line">    <span class="keyword">while</span>(root!=<span class="literal">nullptr</span>||!<span class="built_in">stack</span>.empty())&#123;</div><div class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</div><div class="line">            <span class="built_in">stack</span>.push(root);</div><div class="line">            root=root-&gt;left;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">stack</span>.empty())</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            root=<span class="built_in">stack</span>.top();</div><div class="line">            <span class="built_in">stack</span>.pop();</div><div class="line">            visit(root-&gt;data);</div><div class="line">            root=root-&gt;right;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>为简化代码起见，把“弹栈-访问-向右”的循环合并到主流程里面了。</p><h4 id="后序遍历-v2">后序遍历</h4><p>后序遍历就有些复杂了（Leetcode上非递归<a href="https://leetcode.com/problems/binary-tree-preorder-traversal/" target="_blank" rel="external">前序</a>，<a href="https://leetcode.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="external">中序</a>都是Medium, <a href="https://leetcode.com/problems/binary-tree-postorder-traversal/" target="_blank" rel="external">后序</a>就成了Hard我会说？）。</p><p>将当前节点入栈，向左走；不可走时弹栈，向右走，跳回前一步；不可走时弹栈，栈空时结束。问题在于，此时弹栈之后，可能是要向左走，也可能是要向右走，而且同一个节点可能会被弹多次。考虑下面这棵树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    1</div><div class="line">   / \</div><div class="line">  2   3</div><div class="line"> / \</div><div class="line">4   5</div></pre></td></tr></table></figure><p>在系统栈作用下，在<code>4</code>不可走时，节点<code>2</code>被弹出，随后又入栈，走向<code>5</code>, 此后再一次弹出<code>2</code>, 这次是真正的弹出了。因此，重点在于判断节点被弹出后，是否还要向右走。主要是需要判断是否是第二次弹出，因此可设一个<code>visit</code>数组来记录访问状态，但太浪费空间。</p><p>这时就要用到后序遍历的特性了。记当前节点为<code>node</code>, 若<code>node</code>被访问，则其左右子树已经遍历完毕，应该向上回溯了。如果<code>node</code>为<code>parent</code>的左子树，代表着<code>parent</code>的左子树遍历完成，接下来就是右子树，应该向<code>parent</code>的右边进发；如果<code>node</code>是<code>parent</code>的右子树，代表<code>parent</code>的左右子树已经遍历完毕，这时它的情况和<code>node</code>一样，循环进行处理。</p><p>我们设置一个辅助变量<code>last</code>(初始设为空), 用来记录上次访问的节点。遍历时，节点一路向左一路入栈走到成空为止，此后取栈顶<code>parent</code>, 如果上次访问的<code>last</code>不为<code>parent</code>的右子树，且右子树不为空，这时要向右进发；其他情况（即<code>parent</code>的左右子树已经遍历完毕）就该访问<code>parent</code>了。之后，更新<code>last</code>记录。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>&gt; <span class="title">void</span> <span class="title">postorder</span>(<span class="title">TreeNode</span> *<span class="title">root</span>,<span class="title">Func</span> <span class="title">visit</span>)&#123;</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode*&gt; <span class="built_in">stack</span>;</div><div class="line">    TreeNode *last=<span class="literal">nullptr</span>;</div><div class="line">    <span class="keyword">while</span>(root!=<span class="literal">nullptr</span>||!<span class="built_in">stack</span>.empty())&#123;</div><div class="line">        <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)&#123;</div><div class="line">            <span class="built_in">stack</span>.push(root);</div><div class="line">            root=root-&gt;left;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            TreeNode *parent=<span class="built_in">stack</span>.top();</div><div class="line">            <span class="keyword">if</span>(last!=parent-&gt;right &amp;&amp; parent-&gt;right!=<span class="literal">nullptr</span>)</div><div class="line">                root=parent-&gt;right;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                visit(parent-&gt;data);</div><div class="line">                last=parent;</div><div class="line">                <span class="built_in">stack</span>.pop();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="仙术">仙术</h5><p>此方法根据树的遍历定义得来。树的前序遍历是“根-左-右”，后序遍历是“左-右-根”。修改前序遍历的代码，使其顺序变为“根-右-左”，再将修改后得到的前序遍历序列逆置，即可得到后序遍历的“左-右-根”顺序。由于该方法需要一个额外的记录序列的容器，Leetcode的题目正好就是要获得一个这样的序列，因此该序列容器不占空间复杂度，在我这个遍历算法中就不一样了。解法放在这里，给各位扩展一下思路。</p><p>该方法来自Leetcode讨论区的<a href="https://leetcode.com/discuss/9736/accepted-code-with-explaination-does-anyone-have-better-idea" target="_blank" rel="external">这篇帖子</a>。</p><h2 id="迭代器遍历">迭代器遍历</h2><h3 id="有关约定-v2">有关约定</h3><p>迭代器有关接口声明如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">iterator</span>&#123;</span></div><div class="line">    <span class="keyword">public</span>:</div><div class="line">        iterator(TreeNode *root); <span class="comment">// 待实现</span></div><div class="line">        iterator(<span class="keyword">const</span> iterator &amp;o):m_cursor(o.m_cursor) &#123;&#125;</div><div class="line">        </div><div class="line">        <span class="keyword">int</span>&amp; <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123;<span class="keyword">return</span> m_cursor.top()-&gt;data;&#125;</div><div class="line">        <span class="keyword">int</span>* <span class="keyword">operator</span>-&gt;() <span class="keyword">const</span> &#123;<span class="keyword">return</span> &amp;<span class="keyword">operator</span>*();&#125;</div><div class="line">        iterator&amp; <span class="keyword">operator</span>++(); <span class="comment">// 待实现</span></div><div class="line">        iterator <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123;<span class="keyword">auto</span> i=*<span class="keyword">this</span>; <span class="keyword">operator</span>++(); <span class="keyword">return</span> i;&#125;</div><div class="line">    <span class="keyword">private</span>:</div><div class="line">        <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode*&gt; m_cursor;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ol><li><p><code>operator++()</code>所实现的操作是找到在遍历序列中，当前节点的下一个节点。我们应该认为当前节点已经访问过了。</p></li><li><p>使用栈时的迭代器内部封装的是一个栈，复制起来开销太大，你可以在此基础实现上移动语义以降低开销。</p></li><li><p>在下文中，虽然三种遍历算法的迭代器都叫<code>iterator</code>, 但实际上是三种不同的类型。为描述简单起见我共用一个名称。</p></li><li><p>在这里<code>operator-&gt;()</code>是非必须的，如果使用会导致编译错误。但设计成泛型迭代器的话那么就是必须要重载的一个重要运算符了。</p></li><li><p>如果想和STL接轨，迭代器实现起来不会如此简单，还要定义一大堆类型别名，设置迭代器种类等。该迭代器由于只能自增，因此属于<a href="http://en.cppreference.com/w/cpp/concept/ForwardIterator" target="_blank" rel="external"><code>ForwardIterator</code></a>.</p></li></ol><h3 id="具体实现">具体实现</h3><p>主算法已经在上面讨论过了，因此在这里主要是将循环的单步操作提取出来作为迭代器的自增操作。初始化迭代器时，应该找到这种遍历方式生成的序列中的第一个节点。</p><h4 id="前序遍历-v3">前序遍历</h4><p>前序的第一个节点就是根。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">iterator::iterator(TreeNode *root):m_cursor() &#123;</div><div class="line">    <span class="keyword">if</span>(root!=<span class="literal">nullptr</span>)</div><div class="line">        m_cursor.push(root);</div><div class="line">&#125;</div><div class="line"></div><div class="line">iterator&amp; iterator::<span class="keyword">operator</span>++() &#123;</div><div class="line">    <span class="keyword">if</span>(m_cursor.empty())</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">auto</span> tmp=m_cursor.top();</div><div class="line">    m_cursor.pop();</div><div class="line">    <span class="keyword">if</span>(tmp-&gt;right != <span class="literal">nullptr</span>)</div><div class="line">        m_cursor.push(tmp-&gt;right);</div><div class="line">    <span class="keyword">if</span>(tmp-&gt;left != <span class="literal">nullptr</span>)</div><div class="line">        m_cursor.push(tmp-&gt;left);</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="中序遍历-v3">中序遍历</h4><p>中序遍历的第一个节点是最左的一个节点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">iterator::iterator(TreeNode *root):m_cursor() &#123;</div><div class="line">    <span class="keyword">while</span>(root!=<span class="literal">nullptr</span>)&#123;</div><div class="line">        m_cursor.push(root);</div><div class="line">        root=root-&gt;left;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">iterator&amp; iterator::<span class="keyword">operator</span>++() &#123;</div><div class="line">    <span class="keyword">if</span>(m_cursor.empty())</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">auto</span> ptr = m_cursor.top()-&gt;right;</div><div class="line">    m_cursor.pop();</div><div class="line">    <span class="keyword">while</span>(ptr != <span class="literal">nullptr</span>) &#123;</div><div class="line">        m_cursor.push(ptr);</div><div class="line">        ptr = ptr-&gt;left;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="后序遍历-v3">后序遍历</h4><p>后序遍历的第一个节点沿左边的支路向下的第一个叶子节点。</p><p>为了不给后序迭代器增加一个<code>last</code>成员，将上面的遍历算法做出一点修改：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 辅助用函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">(TreeNode *root,<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode*&gt; &amp;s)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(;;)&#123;</div><div class="line">        s.push(root);</div><div class="line">        <span class="keyword">if</span>(root-&gt;left != <span class="literal">nullptr</span>)</div><div class="line">            root = root-&gt;left;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;right != <span class="literal">nullptr</span>)</div><div class="line">            root = root-&gt;right;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Func</span>&gt; <span class="title">void</span> <span class="title">postorder</span>(<span class="title">TreeNode</span> *<span class="title">root</span>,<span class="title">Func</span> <span class="title">visit</span>)&#123;</span></div><div class="line">    <span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode*&gt; <span class="built_in">stack</span>;</div><div class="line">    next(root,<span class="built_in">stack</span>);</div><div class="line">    <span class="keyword">while</span>(!<span class="built_in">stack</span>.empty())&#123;</div><div class="line">        root=<span class="built_in">stack</span>.top();<span class="built_in">stack</span>.pop();</div><div class="line">        visit(root-&gt;data);</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">stack</span>.empty())</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        TreeNode *parent=<span class="built_in">stack</span>.top(), *tmp=parent-&gt;right;</div><div class="line">        <span class="keyword">if</span>(root==parent-&gt;left &amp;&amp; tmp!=<span class="literal">nullptr</span>)</div><div class="line">            next(tmp,<span class="built_in">stack</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>迭代器算法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 辅助用函数</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">(TreeNode *root,<span class="built_in">std</span>::<span class="built_in">stack</span>&lt;TreeNode*&gt; &amp;s)</span></span>&#123;</div><div class="line">    <span class="keyword">for</span>(;;)&#123;</div><div class="line">        s.push(root);</div><div class="line">        <span class="keyword">if</span>(root-&gt;left != <span class="literal">nullptr</span>)</div><div class="line">            root = root-&gt;left;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(root-&gt;right != <span class="literal">nullptr</span>)</div><div class="line">            root = root-&gt;right;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">iterator::iterator(TreeNode *root):m_cursor() &#123;</div><div class="line">    <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    next(root,m_cursor);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">iterator&amp; iterator::<span class="keyword">operator</span>++() &#123;</div><div class="line">    <span class="keyword">if</span>(m_cursor.empty())</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">auto</span> ptr=m_cursor.top();</div><div class="line">    m_cursor.pop_back();</div><div class="line">    <span class="keyword">if</span>(m_cursor.empty())</div><div class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">auto</span> parent = m_cursor.top(), tmp = parent-&gt;right;</div><div class="line">    <span class="keyword">if</span>(ptr == parent-&gt;left &amp;&amp; tmp != <span class="literal">nullptr</span>)</div><div class="line">        next(tmp,m_cursor);</div><div class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BMP位图到ASCII字符画]]></title>
      <url>/2016-02-27-BMP%E4%BD%8D%E5%9B%BE%E5%88%B0ASCII%E5%AD%97%E7%AC%A6%E7%94%BB.html</url>
      <content type="html"><![CDATA[<p>最近闲得蛋疼，所以诞生了搞些大新闻的念头。</p><p>由于我<ruby>不擅长<rp>(</rp><rt>lǎn de xué</rt><rp>)</rp></ruby>脚本语言，因此费力不讨好地去用C++来完成这项工作。</p><p>UPDATE 2016-03-18: 修复失效的图片链接</p><a id="more"></a><h2 id="bmp简略介绍">BMP简略介绍</h2><p>位图一共有两种类型，即：设备相关位图(DDB)和设备无关位图(DIB). DDB位图在早期的Windows系统（Windows 3.0以前）中是很普遍的，事实上它也是唯一的。然而，随着显示器制造技术的进步，以及显示设备的多样化，DDB位图的一些固有的问题开始浮现出来了。比如，它不能够存储（或者说获取）创建这张图片的原始设备的分辨率，这样，应用程序就不能快速的判断客户机的显示设备是否适合显示这张图片。为了解决这一难题，微软创建了DIB位图格式。</p><p>设备无关位图(Device-Independent Bitmap)包含下列的颜色和尺寸信息：</p><ul><li><p>原始设备（即创建图片的设备）的颜色格式</p></li><li><p>原始设备的分辨率</p></li><li><p>原始设备的调色板</p></li><li><p>一个位数组，由红、绿、蓝（RGB）三个值代表一个像素</p></li><li><p>一个数组压缩标志，用于表明数据的压缩方案（如果需要的话）</p></li></ul><h2 id="bmp文件结构">BMP文件结构</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c4/BMPfileFormat.png" alt="Wikipedia: BMP文件结构图"></p><p><img src="https://msdn.microsoft.com/dynimg/IC444238.png" alt="MSDN: BMP文件结构简图"></p><p>位图文件由以下结构体依次构成：</p><table><thead><tr><th>结构体名称</th><th>可选</th><th>大小</th><th>用途</th><th>备注</th></tr></thead><tbody><tr><td>位图文件头</td><td>否</td><td>14字节</td><td>存储位图文件通用信息</td><td>仅在读取文件时有用</td></tr><tr><td>DIB头</td><td>否</td><td>固定（存在7种不同版本）</td><td>存储位图详细信息及像素格式</td><td>紧接在位图文件头后</td></tr><tr><td>附加位掩码</td><td>是</td><td>3或4 DWORD（12或16字节）</td><td>定义像素格式</td><td>仅在DIB头是BITMAPINFOHEADER时存在</td></tr><tr><td>调色板</td><td>见备注</td><td>可变</td><td>定义图像数据（像素数组）所用颜色</td><td>色深≤ 8时不能省略</td></tr><tr><td>填充区A</td><td>是</td><td>可变</td><td>结构体对齐</td><td>位图文件头中像素数组偏移量的产物</td></tr><tr><td>像素数组</td><td>否</td><td>可变</td><td>定义实际的像素数值</td><td>像素数据在DIB头和附加位掩码中定义。像素数组中每行均以4字节对齐</td></tr><tr><td>填充区B</td><td>是</td><td>可变</td><td>结构体对齐</td><td>DIB头中ICC色彩特性数据偏移量的产物</td></tr><tr><td>ICC色彩特性数据</td><td>是</td><td>可变</td><td>定义色彩特性</td><td>可以包含外部文件路径，由该文件来定义色彩特性</td></tr></tbody></table><h3 id="bitmapfileheader">BITMAPFILEHEADER</h3><p><code>BITMAPFILEHEADER</code>位于文件的开头，存储着整个文件的概要信息。<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd183374.aspx" target="_blank" rel="external">MSDN</a>上，该结构体的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPFILEHEADER</span> &#123;</span></div><div class="line">  WORD  bfType;</div><div class="line">  DWORD bfSize;</div><div class="line">  WORD  bfReserved1;</div><div class="line">  WORD  bfReserved2;</div><div class="line">  DWORD bfOffBits;</div><div class="line">&#125; BITMAPFILEHEADER, *PBITMAPFILEHEADER;</div></pre></td></tr></table></figure><p>注：<code>WORD</code>, <code>DWORD</code>为微软MFC的经典类型别名，类型的要求分别是16位无符号整型和32位无符号整型。</p><p>各变量作用如下：</p><ul><li><p><code>bfType</code>: 文件签名，标识文件类型。这两个字节内容是0x42 0x4D, 如果以<code>char</code>的方式来读取的话要求为<code>'B'</code>, <code>'M'</code>. 根据标准的不同，也可以是其他内容（见附表）。</p></li><li><p><code>bfSize</code>: 文件大小，记录整个文件的大小（单位：字节）。</p></li><li><p><code>bfReserved1</code>, <code>bfReserved2</code>: 保留位，其内容必须是0(MSDN); 取决于具体创建图形文件的程序(Wikipedia).</p></li><li><p><code>bfOffBits</code>: 偏移量（单位：字节），标识从<code>BITMAPFILEHEADER</code>结构体的开头到位图像素数据的偏移量。</p></li></ul><h4 id="bftype的可能值">bfType的可能值</h4><table><thead><tr><th style="text-align:center">值</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center">BM</td><td>Windows 3.1x, 95, NT, … etc.</td></tr><tr><td style="text-align:center">BA</td><td>OS/2 struct Bitmap Array</td></tr><tr><td style="text-align:center">CI</td><td>OS/2 struct Color Icon</td></tr><tr><td style="text-align:center">CP</td><td>OS/2 const Color Pointer</td></tr><tr><td style="text-align:center">IC</td><td>OS/2 struct Icon</td></tr><tr><td style="text-align:center">PT</td><td>OS/2 Pointer</td></tr></tbody></table><h3 id="bitmapinfoheader">BITMAPINFOHEADER</h3><p>紧跟着<code>BITMAPFILEHEADER</code>的就是位图信息头，主要有<code>BITMAPINFOHEADER</code>, <code>BITMAPV4HEADER</code>, 以及<code>BITMAPV5HEADER</code>这几种。这里我们介绍使用最广的<code>BITMAPINFOHEADER</code>结构体。<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd183376.aspx" target="_blank" rel="external">MSDN</a>上定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPINFOHEADER</span> &#123;</span></div><div class="line">  DWORD biSize;</div><div class="line">  LONG  biWidth;</div><div class="line">  LONG  biHeight;</div><div class="line">  WORD  biPlanes;</div><div class="line">  WORD  biBitCount;</div><div class="line">  DWORD biCompression;</div><div class="line">  DWORD biSizeImage;</div><div class="line">  LONG  biXPelsPerMeter;</div><div class="line">  LONG  biYPelsPerMeter;</div><div class="line">  DWORD biClrUsed;</div><div class="line">  DWORD biClrImportant;</div><div class="line">&#125; BITMAPINFOHEADER, *PBITMAPINFOHEADER;</div></pre></td></tr></table></figure><p>注：<code>LONG</code>的要求为32位有符号整型。</p><p>各变量作用如下：</p><ul><li><p><code>biSize</code>: 该结构体需要的字节数。</p></li><li><p><code>biWidth</code>: 位图的宽度（单位：像素）。 如果<code>biCompression</code>为<code>BI_JPEG</code>或<code>BI_PNG</code>, 那么<code>biWidth</code>表示解压缩后图像的宽度。</p></li><li><p><code>biHeight</code>: 位图的高度（单位：像素）。 如果为正，位图像素就是从下往上，从左往右存储，原点在左下角。如果为负，则是从上至下存储。此时，<code>biCompression</code>必须为<code>BI_RGB</code>或<code>BI_BITFIELDS</code>. 从上至下存储的位图不能压缩。 如果<code>biCompression</code>为<code>BI_JPEG</code>或<code>BI_PNG</code>, 那么<code>biHeight</code>表示解压缩后图像的高度。</p></li><li><p><code>biPlanes</code>: 目标设备的颜色面板值数量。该值必须为1.</p></li><li><p><code>biBitCount</code>: 每像素的位(bit)数。即图像色深。该成员变量决定了位图的最大色彩数。该值必须为表格内容之一（表格附后）。</p></li><li><p><code>biCompression</code>: 表示从下至上存储的位图的压缩方式。具体值见下表（表格附后）。</p></li><li><p><code>biSizeImage</code>: 图像的大小（单位：字节），无压缩位图该值可能设为0. 如果<code>biCompression</code>为<code>BI_JPEG</code>或<code>BI_PNG</code>, 那么<code>biSizeImage</code>表示对应JPEG或PNG图像的缓冲区大小。</p></li><li><p><code>biXPelsPerMeter</code>: 目标设备位图的横向分辨率（单位：像素/米）。程序可根据该值来选择合适大小的位图来显示。</p></li><li><p><code>biYPelsPerMeter</code>: 目标设备位图的纵向分辨率（单位：像素/米）。</p></li><li><p><code>biClrUsed</code>: 表示该位图中使用过的颜色索引数量。如果该值为0, 那么位图使用的是<code>biCompression</code>压缩模式下对应<code>biBitCount</code>的最大色彩数。 如果该值非0且<code>biBitCount</code>小于16, 那么<code>biClrUsed</code>表示图像引擎或设备驱动访问的色彩数。如果<code>biBitCount</code>大于等于16, 那么<code>biClrUsed</code>表示颜色表大小来优化系统调色板的性能。如果<code>biBitCount</code>等于16或32, 优化过的调色板紧跟着接下来的3个<code>DWORD</code>掩码后开始。 如果位图阵列紧跟在<code>BITMAPINFO</code>后，那么它是填充位图(packed bitmap). 填充位图是由单个指针引用。填充位图要求该<code>biClrUsed</code>必须是0或颜色表的实际大小。</p></li><li><p><code>biClrImportant</code>: 为显示该位图所需要的颜色索引数量。如果该值为0, 那么所有颜色都是需要的。</p></li></ul><h4 id="bibitcount的可能值">biBitCount的可能值</h4><table><thead><tr><th style="text-align:center">值</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td>色深由内含的JPEG或PNG格式图像显式确定或隐含</td></tr><tr><td style="text-align:center">1</td><td>位图是单色图。<code>BITMAPINFO</code>的<code>bmiColors</code>包含两个条目。位图的每一bit表示一个像素，如果是0则像素颜色是<code>bmiColors</code>的第一个条目内容；其余情况是第二个条目内容</td></tr><tr><td style="text-align:center">4</td><td>位图色彩数量最大为16, <code>bmiColors</code>包含16个条目。每四bit表示一个像素</td></tr><tr><td style="text-align:center">8</td><td>位图色彩数量最大为256, <code>bmiColors</code>包含256个条目。每一字节表示一个像素</td></tr><tr><td style="text-align:center">16</td><td>位图色彩数量最大为$2^{16}$. 如果<code>biCompression</code>为<code>BI_RGB</code>, 那么<code>bmiColors</code>为<code>NULL</code>. 每一<code>WORD</code>表示一个像素</td></tr><tr><td style="text-align:center">24</td><td>位图色彩数量最大为$2^{24}$, 并且<code>bmiColors</code>为<code>NULL</code>. 每3字节表示一个像素，每一字节分别表示一个像素的BGR分量</td></tr><tr><td style="text-align:center">32</td><td>位图色彩数量最大为$2^{32}$. 如果<code>biCompression</code>为<code>BI_RGB</code>, 那么<code>bmiColors</code>为<code>NULL</code>. 每一<code>DWORD</code>表示一个像素</td></tr></tbody></table><h4 id="bicompression的可能值">biCompression的可能值</h4><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">标识</th><th>压缩方法</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">BI_RGB</td><td>无</td><td>最常见</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">BI_RLE8</td><td>RLE8位/像素</td><td>只能用于格式为8位/像素的位图</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">BI_RLE4</td><td>RLE4位/像素</td><td>只能用于格式为4位/像素的位图</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">BI_BITFIELDS</td><td>位字段或者霍夫曼1D压缩（BITMAPCOREHEADER2）</td><td>像素格式由位掩码指定，或位图经过霍夫曼1D压缩（BITMAPCOREHEADER2）</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">BI_JPEG</td><td>JPEG或RLE-24压缩（BITMAPCOREHEADER2）</td><td>位图包含JPEG图像或经过RLE-24压缩（BITMAPCOREHEADER2）</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">BI_PNG</td><td>PNG</td><td>位图包含PNG图像</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">BI_ALPHABITFIELDS</td><td>位字段</td><td>针对WindowsCE.NET4.0及之后版本</td></tr></tbody></table><h3 id="bitmapinfo">BITMAPINFO</h3><p>该结构体包含了一个DIB的主要信息和色彩信息。<a href="https://msdn.microsoft.com/zh-cn/library/windows/desktop/dd183375.aspx" target="_blank" rel="external">MSDN</a>定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPINFO</span> &#123;</span></div><div class="line">  BITMAPINFOHEADER bmiHeader;</div><div class="line">  RGBQUAD          bmiColors[<span class="number">1</span>];</div><div class="line">&#125; BITMAPINFO, *PBITMAPINFO;</div></pre></td></tr></table></figure><p>各变量作用如下：</p><ul><li><p><code>bmiHeader</code>: 见上一部分</p></li><li><p><code>bmiColors</code>: 一个<code>bmiColors</code>包含以下二者之一：</p><ul><li>一个<code>RGBQUAD</code>的数组，数组元素组成了颜色表。</li><li>一个16位无符号整型的数组，元素是本地调色板的颜色索引。</li></ul></li></ul><h4 id="rgbquad">RGBQUAD</h4><p>该结构体描述BGR色彩分量值。<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd162938.aspx" target="_blank" rel="external">MSDN</a>定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagRGBQUAD</span> &#123;</span></div><div class="line">  BYTE rgbBlue;</div><div class="line">  BYTE rgbGreen;</div><div class="line">  BYTE rgbRed;</div><div class="line">  BYTE rgbReserved;</div><div class="line">&#125; RGBQUAD;</div></pre></td></tr></table></figure><p>注： <code>BYTE</code>的要求是宽为1字节的类型。一般为<code>typedef unsigned char BYTE;</code></p><p>需要注意的是它的真实顺序是BGR而不是RGB.</p><h2 id="读取bmp文件">读取BMP文件</h2><p>有了上面的资料我们就能很快地写出读取文件的代码。</p><p>首先准备好两个文件头结构体，注意要禁止编译器自动对齐。在GCC/Clang下可以用<code>__attribute__((packed))</code>, VS下可以用<code>#pragma pack(1)</code>.</p><figure class="highlight cpp"><figcaption><span>bmp.h</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __BMP__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __BMP__</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">file_header</span>&#123;</span></div><div class="line">    <span class="keyword">uint8_t</span> signature[<span class="number">2</span>];   <span class="comment">// 4 bytes signature, or you can use a single uint16_t instead.</span></div><div class="line">    <span class="keyword">uint32_t</span> file_size;</div><div class="line">    <span class="keyword">uint16_t</span> reserved1;</div><div class="line">    <span class="keyword">uint16_t</span> reserved2;</div><div class="line">    <span class="keyword">uint32_t</span> off_bits;</div><div class="line">&#125; __attribute__((packed));</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info_header</span>&#123;</span></div><div class="line">    <span class="keyword">uint32_t</span> info_header_size;</div><div class="line">    <span class="keyword">int32_t</span> width;</div><div class="line">    <span class="keyword">int32_t</span> height;</div><div class="line">    <span class="keyword">uint16_t</span> planes;</div><div class="line">    <span class="keyword">uint16_t</span> bit_count;</div><div class="line">    <span class="keyword">uint32_t</span> compression;</div><div class="line">    <span class="keyword">uint32_t</span> image_size;</div><div class="line">    <span class="keyword">int32_t</span> x_res;</div><div class="line">    <span class="keyword">int32_t</span> y_res;</div><div class="line">    <span class="keyword">uint32_t</span> color_used;</div><div class="line">    <span class="keyword">uint32_t</span> color_important;</div><div class="line">&#125; __attribute__((packed));</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename,file_header *f,info_header *i,<span class="keyword">uint8_t</span> *data)</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure><p>然后可以写一个简单的读取程序。除第一个参数表示文件路径外，其它的均是以指针形式返回的返回值。</p><p>我们直接为每个像素分配3字节的空间来存储RGB信息，而非使用<code>RGBQUAD</code>结构体。为简单起见，假设我们读取的BMP文件都是24位真彩色的，无压缩，从下至上存储。</p><figure class="highlight cpp"><figcaption><span>bmp.cpp</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"bmp.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename,file_header *f,info_header *i,<span class="keyword">uint8_t</span>* &amp;data,<span class="keyword">uint32_t</span> &amp;size_of_data)</span></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="function">fstream <span class="title">file</span><span class="params">(filename,<span class="built_in">std</span>::ios::in|<span class="built_in">std</span>::ios::binary)</span></span>;</div><div class="line">    <span class="keyword">if</span>(!file.is_open()||!file.bad())</div><div class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"cannot open or read file"</span>);</div><div class="line">    file.read(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(f),<span class="keyword">sizeof</span>(file_header));</div><div class="line">    <span class="comment">// check signature of file</span></div><div class="line">    <span class="keyword">if</span>(f-&gt;signature[<span class="number">0</span>]!=<span class="string">'B'</span>||f-&gt;signature[<span class="number">1</span>]!=<span class="string">'M'</span>)&#123;</div><div class="line">        file.close();</div><div class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"Wrong image file type"</span>);</div><div class="line">    &#125;</div><div class="line">    file.read(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(i),<span class="keyword">sizeof</span>(info_header));</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(i-&gt;bit_count&lt;<span class="number">8</span>)&#123;</div><div class="line">        file.close();</div><div class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"Unsupported format."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(i-&gt;compression &gt; <span class="number">1</span>)&#123;</div><div class="line">        file.close();</div><div class="line">        <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"Unsupported compression mode."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// recalculate file size</span></div><div class="line">    file.seekg(<span class="number">0</span>,<span class="built_in">std</span>::ios::end);</div><div class="line">    f-&gt;file_size=file.tellg();</div><div class="line">    </div><div class="line">    <span class="keyword">uint32_t</span> data_size = i-&gt;width * i-&gt;height * i-&gt;bit_count / <span class="number">8</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">uint32_t</span> image_size=f-&gt;file_size - data_size;</div><div class="line">    data=<span class="keyword">new</span> <span class="keyword">uint8_t</span>[image_size];</div><div class="line">    size_of_data=image_size;</div><div class="line">    </div><div class="line">    <span class="comment">// set to the beginning</span></div><div class="line">    file.seekg(f-&gt;off_bits,<span class="built_in">std</span>::ios::beg);</div><div class="line">    <span class="comment">// read pixel data</span></div><div class="line">    file.read(<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(data),image_size);</div><div class="line">    file.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="灰度转换">灰度转换</h2><p>现在我们得到了每个像素的RGB信息（上一步得到的<code>data</code>还需要经过处理变成RGB顺序），现在将其转换成灰度。我们使用这样的一个公式：</p><p>$$ Luminace = 0.299 Red + 0.587 Green + 0.114 Blue $$</p><ruby>最简单<rp>(</rp><rt>bù dòng nǎo</rt><rp>)</rp></ruby>的一个写法如下：<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i=<span class="number">0U</span>;i&lt;size;i+=<span class="number">3</span>)</div><div class="line">    output[i]=<span class="keyword">uint8_t</span>(<span class="number">0.299</span>*data[i] + <span class="number">0.587</span>*data[i+<span class="number">1</span>] + <span class="number">0.114</span>*data[i+<span class="number">2</span>] + <span class="number">0.5</span>);</div></pre></td></tr></table></figure><p>最后加入<code>+ 0.5</code>是为了实现四舍五入而不是全部截断。</p><p>由于涉及到了浮点数，导致比整型之间的乘除法慢了很多。因此，我们把公式做个近似，变成了：</p><p>$$ Luminance = { {2 Red + 5 Green + Blue} \over 8} $$</p><p>在此基础上使用移位运算优化，整个变成了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i=<span class="number">0U</span>;i&lt;size;i+=<span class="number">3</span>)&#123;</div><div class="line">    <span class="keyword">auto</span> temp=data[i] &lt;&lt; <span class="number">1</span>;            <span class="comment">// 2*Red</span></div><div class="line">    temp+=(data[i+<span class="number">1</span>]&lt;&lt;<span class="number">2</span>) + data[i+<span class="number">1</span>];  <span class="comment">// 5*Green</span></div><div class="line">    temp+=data[i+<span class="number">2</span>];                   <span class="comment">// Blue</span></div><div class="line">    output[i]=<span class="keyword">uint8_t</span>(temp&gt;&gt;<span class="number">3</span>);        <span class="comment">// divide by 8</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="转换到ascii字符">转换到ASCII字符</h2><p>参考资料中给出了两种思路，在此只简单介绍其中一种。</p><p>该方法的基本思路是，针对每一个点（一些像素组成的小区域），计算它平均灰度强度然后将其替换为强度差不多的字符。基于此我们需要一组字符，记为<code>map</code>. 其强度我们可以采取线性分布，即满足：</p><p>$$ \begin{aligned} intensity(map_i) = intensity(map_{i-1})+Constant \end{aligned} $$</p><p>然后选取字符时可以像查表一样：</p><p>$$ character=map_{intensity(dot) \over Constant} $$</p><p>因此，大致步骤如下：</p><ol><li><p>将图片平均分割为像素点或者是（矩形）小区域</p></li><li><p>计算每个部分的灰度强度</p></li><li><p>将每个部分替换为与它灰度强度最相近的字符</p></li></ol><p>我们所选取的字符组最好是强度均匀分布。刚上手时可以使用<code>const char *map=&quot; .,:;ox%#@&quot;;</code>, 并按照强度递减排列处理。使用这个<code>map</code>的话，选取对应的字符的代码则是<code>char c=map[(255-intensity(dot))*strlen(map)/256];</code>.简略代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">ascii</span><span class="params">(<span class="keyword">uint8_t</span> *data,<span class="keyword">uint32_t</span> height,<span class="keyword">uint32_t</span> width,<span class="keyword">uint32_t</span> line_width,<span class="keyword">const</span> <span class="keyword">char</span> *<span class="built_in">map</span>=<span class="string">"@#%xo;:,. "</span>)</span></span>&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">result</span><span class="params">(<span class="string">""</span>)</span></span>;</div><div class="line">    <span class="keyword">uint32_t</span> len=<span class="built_in">std</span>::<span class="built_in">strlen</span>(<span class="built_in">map</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> y=<span class="number">0U</span>;i&lt;height;++y)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x=<span class="number">0U</span>;x&lt;width;++x)&#123;</div><div class="line">            <span class="keyword">auto</span> intensity=data[y*line_width+x]+data[y*line_width+x+<span class="number">1</span>]+data[y*line_width+x+<span class="number">2</span>];</div><div class="line">            intensity=(intensity*len)/<span class="number">768</span>;      <span class="comment">// for average</span></div><div class="line">            result+=<span class="built_in">map</span>[len-intensity];</div><div class="line">        &#125;</div><div class="line">        result+=<span class="string">'\n'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>转换的效果可以看图：</p><p><img src="https://i.stack.imgur.com/V0zRq.png" alt="无耻的我从原作者处偷来的图"></p><h2 id="参考资料">参考资料</h2><ol><li><p><a href="http://www.songho.ca/dsp/luminance/luminance.html" target="_blank" rel="external">彩色图到灰度图</a></p></li><li><p><a href="http://stackoverflow.com/a/32987834" target="_blank" rel="external">灰度图到ASCII字符画</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/BMP_file_format" target="_blank" rel="external">Wikipedia: BMP文件格式</a></p></li><li><p><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd183391.aspx" target="_blank" rel="external">MSDN: BMP文件格式</a></p></li><li><p><a href="https://msdn.microsoft.com/library/windows/desktop/aa383751" target="_blank" rel="external">Windows Data Types</a></p></li></ol>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 136, 137, 260 "Single Number"-s]]></title>
      <url>/2016-02-08-Leetcode-136-137-260-Single-Number-s.html</url>
      <content type="html"><![CDATA[<p>LeetCode 136, 137, 260 的题解</p><p>UPDATE 2016/06/23: 我数电修炼有成，回来改了我原先写的自己都看不懂的解答。</p><a id="more"></a><h2 id="leetcode-136-single-number">Leetcode 136 Single Number</h2><blockquote><p>Given an array of integers, every element appears twice except for one. Find that single one.</p><p><strong>Note</strong>: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p></blockquote><p>由于大多数的数都出现了两次，我们希望将这些数都成对消去。此时就会想到异或运算的两条性质：</p><ol><li><p><code>(a^b)^b=a</code>.</p></li><li><p><code>0^a=a</code>.</p></li></ol><p>使用异或，所有重复的数都能成对消去，因此解法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)</div><div class="line">        res^=nums[i];</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该解法实质是要寻找这样的一个二元运算$\oplus$, 使得：</p><ol><li><p>$ (a \oplus b) \oplus b = a $.</p></li><li><p>$ \exists X \forall a, X \oplus a = a $.</p></li></ol><p>正好异或运算就满足这样的性质，其中X=0.</p><h2 id="leetcode-137-single-number-ii">Leetcode 137 Single Number II</h2><blockquote><p>Given an array of integers, every element appears <em>three</em> times except for one. Find that single one.</p><p><strong>Note</strong>: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p></blockquote><h3 id="解法1">解法1</h3><p>参照I的思路，我们需要寻找一个二元运算$\oplus$, 使得：</p><ol><li><p>$ ((a \oplus b) \oplus b) \oplus b = a $.</p></li><li><p>$ \exists X \forall a, X \oplus a = a $.</p></li></ol><p>三进制的不进位加法可满足这些要求，其中X=0. 现在使用二进制来模拟一位的这种三进制加法。模拟一个三进制位需要三个状态，至少需要两个二进制位，而两个二进制位能表示00, 01, 10, 11四个状态。我们舍去状态11, 在三进制下不断加一应该出现如下循环：<code>00-&gt;01-&gt;10-&gt;00-&gt;...</code>。记输入为$D$，原状态的两个位分别为$A_n$（高位）和$B_n$（低位），将其列出真值表如下：</p><table><thead><tr><th style="text-align:center">$D$</th><th style="text-align:center">$A_n$</th><th style="text-align:center">$B_n$</th><th style="text-align:center">$A_{n+1}$</th><th style="text-align:center">$B_{n+1}$</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">X</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">X</td><td style="text-align:center">X</td></tr></tbody></table><p>其中<code>X</code>表示输入出现了不应出现的状态，可作为无关项用于化简。根据真值表使用卡诺图大法化简得到逻辑表达式如下：</p><ul><li><p>$A_{n+1} = D B_n + \overline{D} A_n$</p></li><li><p>$B_{n+1} = D \overline{A_n} \overline{B_n} + \overline{D} B_n$</p></li></ul><p>此即为所求的运算。放在题中的<code>int</code>上，一个数的各位计算所得$A_n B_n$与其他位的值无关，只与$A_n B_n$原状态和对应位的值有关。因此我们直接用两个<code>int</code>数<code>a</code>, <code>b</code>来保存$A_n B_n$, <code>a</code>, <code>b</code> 的第i位分别表示将给定数的第i位作为$D$输入后$A_n B_n$的计算结果。回到题目中来，出现三次的数会使$A_n B_n$进行一个周期，因此这些数对$A_n B_n$的值没有任何影响；对于只出现一次的那个数，在$A_n B_n$初始值为00的情况下，一次操作后只有$B_n$由0变到1, 换句话说此时<code>b</code>每个位的内容和要找的数每个位的内容相同，即<code>b</code>为所求。</p><p>写成代码就是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; ++i)&#123;</div><div class="line">        <span class="keyword">int</span> tmp=a;</div><div class="line">        a=(nums[i]&amp;a)|((~nums[i])&amp;a);</div><div class="line">        b=(nums[i]&amp;(~tmp)&amp;~b)|((~nums[i])&amp;b);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> b;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>简直丑出新高度……卡诺图化简能达到与或的最简表达，但对要到达形式最简没有任何帮助。</p><p>下面是来自<a href="https://leetcode.com/discuss/6632/challenge-me-thx" target="_blank" rel="external">Leetcode讨论区</a>的仙法，一看到就给人一种美的享受，一种视觉上的冲击。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>* nums,<span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ones = <span class="number">0</span>, twos = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize; i++)&#123;</div><div class="line">        ones = (ones ^ nums[i]) &amp; ~twos;</div><div class="line">        twos = (twos ^ nums[i]) &amp; ~ones;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ones;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下面按照我上面的思路瞎扯一二：上面我的丑极的代码选择忽略状态11，选择循环<code>00-&gt;01-&gt;10-&gt;00-&gt;...</code>。在此我们照样忽略11，但选择的循环是<code>00-&gt;10-&gt;01-&gt;00-&gt;...</code>，列出真值表如下：</p><table><thead><tr><th style="text-align:center">$D$</th><th style="text-align:center">$A_n$</th><th style="text-align:center">$B_n$</th><th style="text-align:center">$A_{n+1}$</th><th style="text-align:center">$B_{n+1}$</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">X</td><td style="text-align:center">X</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">X</td><td style="text-align:center">X</td></tr></tbody></table><p>得到逻辑表达式：</p><ul><li><p>$ A_{n+1} = D \overline{A_n} \overline{B_n} + \overline{D} A_n \overline{B_n} = (D \overline{A_n} + \overline{D} A_n) \overline{B_n} = (D \oplus A_n) \overline{B_n} $</p></li><li><p>$ B_{n+1} = \overline{D} \overline{A_n} B_n + D A_n \overline{B_n} = \ldots = (D \oplus B_n) \overline{ A_{n+1} } $</p></li></ul><p>其中$B_{n+1}$的逻辑式我只能验证而不是化简到对应结果，这里面一定隐藏了什么我不知道的变换方法。</p><p>由于从状态00到状态10变换的是$A_n$, 因此我们应该返回的值是<code>a</code>, 在上面的代码里就是<code>ones</code>.</p><h3 id="解法2">解法2</h3><p>该解法来自于这篇<a href="http://www.1point3acres.com/bbs/forum.php?mod=viewthread&amp;tid=111563&amp;page=1#pid1954331" target="_blank" rel="external">帖子</a>。</p><p>我们可以统计所有第<code>i</code>位是<code>1</code>的数（二进制表示）的个数，该结果对3求余结果只可能是0和1(重复三次的数对应<code>i</code>位上的<code>1</code>的个数一定是三的倍数。如果单次出现的数第<code>i</code>位上是<code>0</code>, 取余会得到0; 如果单次出现的数第<code>i</code>位上是<code>1</code>, 那么结果是三的倍数+1, 取余结果为1), 正好就是要求的数二进制表示的第<code>i</code>位。把数的<code>sizeof(int)*8</code>位都如此处理，然后将结果按顺序组合起来就能得到要求的数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> K 3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="keyword">int</span>* nums,<span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">8</span> , res = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; numsSize; j++) </div><div class="line">            sum += (nums[j] &gt;&gt; i) &amp; <span class="number">0x01</span>;</div><div class="line">        res += (sum % K) &lt;&lt; i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在本题中<code>K</code>为3(大部分数出现三次), 如果题目变动的话可以据此修改<code>K</code>值而不用更改其他。</p><h2 id="leetcode-260-single-number-iii">Leetcode 260 Single Number III</h2><blockquote><p>Given an array of numbers <code>nums</code>, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.</p><p>For example:</p><p>Given <code>nums = [1, 2, 1, 3, 2, 5]</code>, return <code>[3, 5]</code>.</p><p><strong>Note</strong>:</p><ol><li>The order of the result is not important. So in the above example, <code>[5, 3]</code> is also correct.</li><li>Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?</li></ol></blockquote><p>使用I的思路，一遍异或下来我们能够得到<code>A^B</code>(记为<code>bit</code>). 因此下面要做的就是把<code>A</code>和<code>B</code>使用某种方法区分出来（<code>A</code>, <code>B</code>为我们要求的两个数）。</p><p>由于<code>A</code>与<code>B</code>是不同的数，因此<code>bit</code>里面至少有一位二进制位是<code>1</code>. 我们使用小技巧<code>bit&amp;(~(bit-1))</code>(或<code>bit&amp;(-bit)</code>)来将它的最低位的<code>1</code>取出来，从而将整组数分成两组，<code>A</code>,<code>B</code>肯定在不同的组里面，这样就变成了我们在Single Number里面解决过的问题了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; singleNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result(<span class="number">2</span>,<span class="number">0</span>);</div><div class="line">        <span class="keyword">int</span> bit=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)</div><div class="line">            bit^=num;</div><div class="line">        <span class="keyword">int</span> lowest=bit&amp;(~(bit<span class="number">-1</span>));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)&#123;</div><div class="line">            <span class="keyword">if</span>((lowest&amp;num)==<span class="number">0</span>)</div><div class="line">                result[<span class="number">0</span>]^=nums[i];</div><div class="line">            <span class="keyword">else</span></div><div class="line">                result[<span class="number">1</span>]^=nums[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>其极简版：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; singleNumber(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</div><div class="line">        <span class="keyword">int</span> bit=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)</div><div class="line">            bit^=num;</div><div class="line">        bit&amp;=(~(bit<span class="number">-1</span>));</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result(<span class="number">2</span>,<span class="number">0</span>);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> num:nums)</div><div class="line">            result[!(num&amp;bit)]^=num;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 331 Verify Preorder Serialization of a Binary Tree]]></title>
      <url>/2016-02-02-Leetcode-331-Verify-Preorder-Serialization-of-a-Binary-Tree.html</url>
      <content type="html"><![CDATA[<p>Leetcode 331 的题解</p><a id="more"></a><p>题目如下：</p><blockquote><p>One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node’s value. If it is a null node, we record using a sentinel value such as <code>#</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">     _9_</div><div class="line">    /   \</div><div class="line">   3     2</div><div class="line">  / \   / \</div><div class="line"> 4   1  #  6</div><div class="line">/ \ / \   / \</div><div class="line"># # # #   # #</div></pre></td></tr></table></figure><p>For example, the above binary tree can be serialized to the string <code>“9,3,4,#,#,1,#,#,2,#,6,#,#”</code>, where <code>#</code> represents a null node.</p><p>Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.</p><p>Each comma separated value in the string must be either an integer or a character <code>'#'</code> representing null pointer.</p><p>You may assume that the input format is always valid, for example it could never contain two consecutive commas such as <code>&quot;1,,3&quot;</code>.</p><p><strong>Example 1</strong>:<br><code>&quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;</code><br>Return <code>true</code></p><p><strong>Example 2</strong>:<br><code>&quot;1,#&quot;</code><br>Return <code>false</code></p><p><strong>Example 3</strong>:<br><code>&quot;9,#,#,1&quot;</code><br>Return <code>false</code></p></blockquote><hr><p>该解法来源于这篇<a href="https://leetcode.com/discuss/83824/7-lines-easy-java-solution" target="_blank" rel="external">Discuss</a>.</p><p>在二叉树中，如果把空节点也当做叶子节点考虑的话，有如下性质：</p><ul><li><p>除根节点外，所有非空节点有2个出度和1个入度（2个子节点，1个父节点）</p></li><li><p>所有空节点有0个出度和1个入度（0个子节点，1个父节点）</p></li></ul><p>现在假设我们在根据先序遍历结果建立这棵树。建立过程中，用变量<code>diff</code>记录总的出度与入度之差(<code>diff=outdegree-indegree</code>)。读入下一个节点时，将<code>diff</code>减一，因为该节点具有一个入度。如果该节点非空，那么将<code>diff</code>加二，因为该节点具有两个出度。如果该先序序列是正确的话，那么<code>diff</code>不可能为负且结果应该为0.</p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValidSerialization</span><span class="params">(<span class="keyword">char</span>* preorder)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> *iter=strtok(preorder,<span class="string">","</span>);</div><div class="line">    <span class="keyword">int</span> diff=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(iter!=<span class="literal">NULL</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(--diff&lt;<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(iter,<span class="string">"#"</span>)!=<span class="number">0</span>)</div><div class="line">            diff+=<span class="number">2</span>;</div><div class="line">        iter=strtok(<span class="literal">NULL</span>,<span class="string">","</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> diff==<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>diff</code>初始化为<code>1</code>是为了刚开始处理根节点的时候不至于在第一步得到<code>false</code>, 并且这样能够使得根节点与其他节点是使用同一逻辑处理。</p>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 268 Missing Number]]></title>
      <url>/2016-02-02-Leetcode-268-Missing-Number.html</url>
      <content type="html"><![CDATA[<p>Leetcode 268 的题解</p><a id="more"></a><p>题目如下：</p><blockquote><p>Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.</p><p>For example, Given <code>nums = [0, 1, 3]</code> return <code>2</code>.</p><p><strong>Note</strong>: Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?</p></blockquote><hr><p><strong>解法1</strong>：</p><p>由等差数列求和可知，从$ 0 $到$ n $的自然数之和为$ {n(n+1)} \over 2 $. 我们求得给出数组的和，二者相减，就可得到缺失的那个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum_n=numsSize*(numsSize+<span class="number">1</span>)/<span class="number">2</span>,sum_nums=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)</div><div class="line">        sum_nums+=nums[i];</div><div class="line">    <span class="keyword">return</span> sum_n-sum_nums;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该方法有个缺点，就是当<code>numsSize</code>很大的时候，求出来的和可能会溢出。</p><p><strong>解法2</strong>：</p><p>该方法用到了按位异或运算的几个性质：</p><ol><li><p>假设<code>a</code>与<code>b</code>均为整数，则<code>(a^b)^b=a</code>.</p></li><li><p><code>0^a=a</code>.</p></li></ol><p>考虑到一次遍历过程中，下标<code>i</code>的可能取值为$ 0 $到$ numsSize-1 $, 数组里<code>numsSize</code>个数的范围则是$ 0 $到$ numsSize $. 使用变量<code>res</code>来存放结果，如果让<code>res</code>每次都与<code>i</code>和<code>nums[i]</code>进行异或，则最终能够成对消去大部分的数，剩下来的结果则是我们真正要求的那个数。下面我们来探讨<code>res</code>的初值。</p><p>由于<code>i</code>始终小于<code>numsSize</code>, 因此如果将<code>res</code>初始化为<code>0</code>则会出错：正好缺失$ numsSize $时，遍历一次数组，异或完毕后所有的数全部成对消去，<code>res</code>必定为0. 因此我们需要将<code>res</code>初始化为$ numsSize $, 则不缺$ numsSize $时其他的数能够成对消去，结果为所缺的那个数；缺$ numsSize $时其他的数全部消去，剩下的就是$ numsSize $.</p><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">missingNumber</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> res=numsSize;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</div><div class="line">        res^=i;</div><div class="line">        res^=nums[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该解法能够避免解法1中潜在的溢出风险。</p>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[西方政治坐标测试]]></title>
      <url>/2016-01-10-%E8%A5%BF%E6%96%B9%E6%94%BF%E6%B2%BB%E5%9D%90%E6%A0%87%E6%B5%8B%E8%AF%95.html</url>
      <content type="html"><![CDATA[<p><del>没错我玩上瘾了！</del></p><hr><p>本测试转载自政治坐标测试北大未名版之<a href="http://zuobiao.me/~zuobiaom/politicalcompass/" target="_blank" rel="external">西方政治坐标系测试</a></p><a id="more"></a><p>以下测试题目原文来自英文「<a href="https://www.politicalcompass.org/test" target="_blank" rel="external">政治指南针</a>」网站，英文版权属于原作者。本站对该测试的准确性及所造成的一切后果不负责。测试结果不能作为任何学术研究的依据。<br>本测试的目的是反映答题者经济与政治观念「左与右」的坐标。本测试系统建立于西方政治价值体系基础之上，<strong>某些问题强烈的依赖于具体的西方社会环境，未必能够充分反映中国国情。</strong><br>题目分六个部分，必须全部回答。</p><script type="text/javascript">$(function(){$("#submit").click(function(){var t=0,a=0;$('#questions input[name^="c"]:checked').each(function(){t+=parseFloat($(this).attr("data-x")),a+=parseFloat($(this).attr("data-y"))}),t=Math.round(100*t)/100,a=Math.round(100*a)/100,$("#answer").html("经济立场坐标（左翼<->右翼）"+t+"，政治立场坐标（专制<->自由）"+a)})})</script><style>.red{color:red}#wrapper{text-align:center}</style><form id="questions"><p><strong>第一部分</strong>：你如何看待国家与世界。</p><ol><li>如果全球化无法避免，应该首先为人服务而不是跨国公司的利益。<br><input name="c1" type="radio" data-x="0.5" data-y="0" checked>强烈反对<br><input name="c1" type="radio" data-x="0.25" data-y="0">反对<br><input name="c1" type="radio" data-x="-0.375" data-y="0">同意<br><input name="c1" type="radio" data-x="-0.625" data-y="0">强烈同意<br></li><li>我会一直支持我的国家，无论它是对是错。<br><input name="c2" type="radio" data-x="0" data-y="-0.26" checked>强烈反对<br><input name="c2" type="radio" data-x="0" data-y="-0.155">反对<br><input name="c2" type="radio" data-x="0" data-y="0.15">同意<br><input name="c2" type="radio" data-x="0" data-y="0.255">强烈同意<br></li><li>没有人可以选择祖国，因此为祖国自豪很愚蠢。<br><input name="c3" type="radio" data-x="0" data-y="0.23" checked>强烈反对<br><input name="c3" type="radio" data-x="0" data-y="0.13">反对<br><input name="c3" type="radio" data-x="0" data-y="-0.13">同意<br><input name="c3" type="radio" data-x="0" data-y="-0.23">强烈同意<br></li><li>我的种族和其他种族相比有很多出众的优点。<br><input name="c4" type="radio" data-x="0" data-y="-0.23" checked>强烈反对<br><input name="c4" type="radio" data-x="0" data-y="-0.13">反对<br><input name="c4" type="radio" data-x="0" data-y="0.13">同意<br><input name="c4" type="radio" data-x="0" data-y="0.23">强烈同意<br></li><li>敌人的敌人是朋友。<br><input name="c5" type="radio" data-x="0" data-y="-0.23" checked>强烈反对<br><input name="c5" type="radio" data-x="0" data-y="-0.13">反对<br><input name="c5" type="radio" data-x="0" data-y="0.13">同意<br><input name="c5" type="radio" data-x="0" data-y="0.23">强烈同意<br></li><li>违反国际法的军事行动有时候是正当的。<br><input name="c6" type="radio" data-x="0" data-y="-0.2" checked>强烈反对<br><input name="c6" type="radio" data-x="0" data-y="-0.1">反对<br><input name="c6" type="radio" data-x="0" data-y="0.11">同意<br><input name="c6" type="radio" data-x="0" data-y="0.21">强烈同意<br></li><li>现在信息和娱乐已经令人忧虑的交融在一起。<br><input name="c7" type="radio" data-x="0" data-y="0.23" checked>强烈反对<br><input name="c7" type="radio" data-x="0" data-y="0.13">反对<br><input name="c7" type="radio" data-x="0" data-y="-0.13">同意<br><input name="c7" type="radio" data-x="0" data-y="-0.23">强烈同意<br></li></ol><p><strong>第二部分</strong>：经济问题。</p><ol><li>人民根本上说是通过阶级而不是国籍来区分的。<br><input name="c8" type="radio" data-x="0.5" data-y="0" checked>强烈反对<br><input name="c8" type="radio" data-x="0.25" data-y="0">反对<br><input name="c8" type="radio" data-x="-0.375" data-y="0">同意<br><input name="c8" type="radio" data-x="-0.625" data-y="0">强烈同意<br></li><li>控制通货膨胀比控制失业要重要。<br><input name="c9" type="radio" data-x="-0.5" data-y="0" checked>强烈反对<br><input name="c9" type="radio" data-x="-0.25" data-y="0">反对<br><input name="c9" type="radio" data-x="0.375" data-y="0">同意<br><input name="c9" type="radio" data-x="0.625" data-y="0">强烈同意<br></li><li>因为无法信任企业能够自觉保护环境，因此需要规章来规范它们。<br><input name="c10" type="radio" data-x="0.5" data-y="0" checked>强烈反对<br><input name="c10" type="radio" data-x="0.25" data-y="0">反对<br><input name="c10" type="radio" data-x="-0.25" data-y="0">同意<br><input name="c10" type="radio" data-x="-0.5" data-y="0">强烈同意<br></li><li>“各尽所能，各取所需”从根本上说是个好的想法。<br><input name="c11" type="radio" data-x="0.5" data-y="0" checked>强烈反对<br><input name="c11" type="radio" data-x="0.25" data-y="0">反对<br><input name="c11" type="radio" data-x="-0.375" data-y="0">同意<br><input name="c11" type="radio" data-x="-0.625" data-y="0">强烈同意<br></li><li>令人沮丧的是在我们的社会中一些最基本的事物比如饮用水现在都成为了瓶装、注明商标的商品。<br><input name="c12" type="radio" data-x="0.5" data-y="0" checked>强烈反对<br><input name="c12" type="radio" data-x="0.25" data-y="0">反对<br><input name="c12" type="radio" data-x="-0.5" data-y="0">同意<br><input name="c12" type="radio" data-x="-0.75" data-y="0">强烈同意<br></li><li>土地不应当被作为商品买卖。<br><input name="c13" type="radio" data-x="0.5" data-y="0" checked>强烈反对<br><input name="c13" type="radio" data-x="0.25" data-y="0">反对<br><input name="c13" type="radio" data-x="-0.5" data-y="0">同意<br><input name="c13" type="radio" data-x="-0.75" data-y="0">强烈同意<br></li><li>很多人赚钱完全是靠运作资金，而并没有为社会做出任何贡献，这是令人不爽的。<br><input name="c14" type="radio" data-x="0.5" data-y="0" checked>强烈反对<br><input name="c14" type="radio" data-x="0.25" data-y="0">反对<br><input name="c14" type="radio" data-x="-0.375" data-y="0">同意<br><input name="c14" type="radio" data-x="-0.625" data-y="0">强烈同意<br></li><li>保护主义对贸易来说有时候是必须的。<br><input name="c15" type="radio" data-x="0.5" data-y="0" checked>强烈反对<br><input name="c15" type="radio" data-x="0.25" data-y="0">反对<br><input name="c15" type="radio" data-x="-0.5" data-y="0">同意<br><input name="c15" type="radio" data-x="-0.625" data-y="0">强烈同意<br></li><li>公司为它的股东赚取利润就是它仅有的社会职责。<br><input name="c16" type="radio" data-x="-0.5" data-y="0" checked>强烈反对<br><input name="c16" type="radio" data-x="-0.25" data-y="0">反对<br><input name="c16" type="radio" data-x="0.375" data-y="0">同意<br><input name="c16" type="radio" data-x="0.625" data-y="0">强烈同意<br></li><li>对富人征的税太高了。<br><input name="c17" type="radio" data-x="-0.5" data-y="0" checked>强烈反对<br><input name="c17" type="radio" data-x="-0.25" data-y="0">反对<br><input name="c17" type="radio" data-x="0.375" data-y="0">同意<br><input name="c17" type="radio" data-x="0.5" data-y="0">强烈同意<br></li><li>那些付得起钱的人应该有权获得更好的医疗服务。<br><input name="c18" type="radio" data-x="-0.5" data-y="0" checked>强烈反对<br><input name="c18" type="radio" data-x="-0.25" data-y="0">反对<br><input name="c18" type="radio" data-x="0.25" data-y="0">同意<br><input name="c18" type="radio" data-x="0.5" data-y="0">强烈同意<br></li><li>政府应该惩罚误导公众的商业行为。<br><input name="c19" type="radio" data-x="0.5" data-y="0" checked>强烈反对<br><input name="c19" type="radio" data-x="0.25" data-y="0">反对<br><input name="c19" type="radio" data-x="-0.25" data-y="0">同意<br><input name="c19" type="radio" data-x="-0.375" data-y="0">强烈同意<br></li><li>一个真正的自由市场需要对跨国大公司的垄断进行限制。<br><input name="c20" type="radio" data-x="0" data-y="0" checked>强烈反对<br><input name="c20" type="radio" data-x="0" data-y="0">反对<br><input name="c20" type="radio" data-x="0" data-y="0">同意<br><input name="c20" type="radio" data-x="0" data-y="0">强烈同意<br></li><li>市场越自由，人民越自由。<br><input name="c21" type="radio" data-x="-0.5" data-y="0" checked>强烈反对<br><input name="c21" type="radio" data-x="-0.25" data-y="0">反对<br><input name="c21" type="radio" data-x="0.5" data-y="0">同意<br><input name="c21" type="radio" data-x="0.75" data-y="0">强烈同意<br></li></ol><p><strong>第三部分</strong>：社会价值观。</p><ol><li>除非妇女的生命受到危及，否则总应该禁止堕胎。<br><input name="c22" type="radio" data-x="0" data-y="-0.2" checked>强烈反对<br><input name="c22" type="radio" data-x="0" data-y="-0.1">反对<br><input name="c22" type="radio" data-x="0" data-y="0.11">同意<br><input name="c22" type="radio" data-x="0" data-y="0.21">强烈同意<br></li><li>一切当权者都应该受到质询。<br><input name="c23" type="radio" data-x="0" data-y="0.23" checked>强烈反对<br><input name="c23" type="radio" data-x="0" data-y="0.175">反对<br><input name="c23" type="radio" data-x="0" data-y="-0.13">同意<br><input name="c23" type="radio" data-x="0" data-y="-0.23">强烈同意<br></li><li>以眼还眼，以牙还牙。<br><input name="c24" type="radio" data-x="0" data-y="-0.18" checked>强烈反对<br><input name="c24" type="radio" data-x="0" data-y="-0.125">反对<br><input name="c24" type="radio" data-x="0" data-y="0.08">同意<br><input name="c24" type="radio" data-x="0" data-y="0.18">强烈同意<br></li><li>税收不应该支持那些没法靠商业手段活下去的剧院和博物馆。<br><input name="c25" type="radio" data-x="-0.5" data-y="0" checked>强烈反对<br><input name="c25" type="radio" data-x="-0.25" data-y="0">反对<br><input name="c25" type="radio" data-x="0.5" data-y="0">同意<br><input name="c25" type="radio" data-x="0.625" data-y="0">强烈同意<br></li><li>学校不应该强制学生签到。<br><input name="c26" type="radio" data-x="0" data-y="0.26" checked>强烈反对<br><input name="c26" type="radio" data-x="0" data-y="0.055">反对<br><input name="c26" type="radio" data-x="0" data-y="-0.15">同意<br><input name="c26" type="radio" data-x="0" data-y="-0.255">强烈同意<br></li><li>所有人都有自己的权利，但让不同类型的人保持自己的个性对每个人来说都更好。<br><input name="c27" type="radio" data-x="0" data-y="-0.23" checked>强烈反对<br><input name="c27" type="radio" data-x="0" data-y="-0.13">反对<br><input name="c27" type="radio" data-x="0" data-y="0.13">同意<br><input name="c27" type="radio" data-x="0" data-y="0.23">强烈同意<br></li><li>好父母有时候也不得不打孩子。<br><input name="c28" type="radio" data-x="0" data-y="-0.26" checked>强烈反对<br><input name="c28" type="radio" data-x="0" data-y="-0.155">反对<br><input name="c28" type="radio" data-x="0" data-y="0.1">同意<br><input name="c28" type="radio" data-x="0" data-y="0.255">强烈同意<br></li><li>孩子对父母有秘密很正常。<br><input name="c29" type="radio" data-x="0" data-y="0.23" checked>强烈反对<br><input name="c29" type="radio" data-x="0" data-y="0.13">反对<br><input name="c29" type="radio" data-x="0" data-y="-0.08">同意<br><input name="c29" type="radio" data-x="0" data-y="-0.23">强烈同意<br></li><li>大麻应该合法。<br><input name="c30" type="radio" data-x="0" data-y="0.2" checked>强烈反对<br><input name="c30" type="radio" data-x="0" data-y="0.045">反对<br><input name="c30" type="radio" data-x="0" data-y="-0.11">同意<br><input name="c30" type="radio" data-x="0" data-y="-0.21">强烈同意<br></li><li>学校的首要职能是让下一代人能找到工作。<br><input name="c31" type="radio" data-x="0" data-y="-0.26" checked>强烈反对<br><input name="c31" type="radio" data-x="0" data-y="-0.155">反对<br><input name="c31" type="radio" data-x="0" data-y="0.1">同意<br><input name="c31" type="radio" data-x="0" data-y="0.255">强烈同意<br></li><li>应当不允许有严重遗传疾病的残疾人生育。<br><input name="c32" type="radio" data-x="0" data-y="-0.29" checked>强烈反对<br><input name="c32" type="radio" data-x="0" data-y="-0.185">反对<br><input name="c32" type="radio" data-x="0" data-y="0.17">同意<br><input name="c32" type="radio" data-x="0" data-y="0.275">强烈同意<br></li><li>孩子最重要的事是学会遵守纪律。<br><input name="c33" type="radio" data-x="0" data-y="-0.26" checked>强烈反对<br><input name="c33" type="radio" data-x="0" data-y="-0.155">反对<br><input name="c33" type="radio" data-x="0" data-y="0.15">同意<br><input name="c33" type="radio" data-x="0" data-y="0.255">强烈同意<br></li><li>没有野蛮人和文明人，只有不同的文化。<br><input name="c34" type="radio" data-x="0" data-y="0.23" checked>强烈反对<br><input name="c34" type="radio" data-x="0" data-y="0.175">反对<br><input name="c34" type="radio" data-x="0" data-y="-0.13">同意<br><input name="c34" type="radio" data-x="0" data-y="-0.23">强烈同意<br></li><li>那些有能力工作却拒绝工作机会的人，不应该接受社会的资助。<br><input name="c35" type="radio" data-x="0" data-y="-0.23" checked>强烈反对<br><input name="c35" type="radio" data-x="0" data-y="-0.13">反对<br><input name="c35" type="radio" data-x="0" data-y="0.13">同意<br><input name="c35" type="radio" data-x="0" data-y="0.23">强烈同意<br></li><li>当你遇到困难时，最好不要去想它，而是不断地做令人高兴的事。<br><input name="c36" type="radio" data-x="0" data-y="-0.2" checked>强烈反对<br><input name="c36" type="radio" data-x="0" data-y="-0.1">反对<br><input name="c36" type="radio" data-x="0" data-y="0.11">同意<br><input name="c36" type="radio" data-x="0" data-y="0.21">强烈同意<br></li><li>第一代移民永远无法完全融入他们的新国家。<br><input name="c37" type="radio" data-x="0" data-y="-0.23" checked>强烈反对<br><input name="c37" type="radio" data-x="0" data-y="-0.075">反对<br><input name="c37" type="radio" data-x="0" data-y="0.13">同意<br><input name="c37" type="radio" data-x="0" data-y="0.23">强烈同意<br></li><li>有利于最成功的企业的事物，最终也总是有利于我们大家的。<br><input name="c38" type="radio" data-x="-0.5" data-y="0" checked>强烈反对<br><input name="c38" type="radio" data-x="-0.25" data-y="0">反对<br><input name="c38" type="radio" data-x="0.75" data-y="0">同意<br><input name="c38" type="radio" data-x="0.875" data-y="0">强烈同意<br></li><li>任何广播电视机构，无论它的内容有多独立，都不应该接受公共资金的支持。<br><input name="c39" type="radio" data-x="-0.5" data-y="0" checked>强烈反对<br><input name="c39" type="radio" data-x="-0.375" data-y="0">反对<br><input name="c39" type="radio" data-x="0.125" data-y="0">同意<br><input name="c39" type="radio" data-x="0.25" data-y="0">强烈同意<br></li></ol><p><strong>第四部分</strong>：你如何看待更广阔的社会。</p><p><ol><li>在反恐的名义下，公民自由被过度限制了。<br><input name="c40" type="radio" data-x="0" data-y="0.26" checked>强烈反对<br><input name="c40" type="radio" data-x="0" data-y="0.155">反对<br><input name="c40" type="radio" data-x="0" data-y="-0.1">同意<br><input name="c40" type="radio" data-x="0" data-y="-0.255">强烈同意<br></li><li>一党制国家的一个显著优点是它避免了在民主政体中耽误发展的所有那些争论。<br><input name="c41" type="radio" data-x="0" data-y="-0.29" checked>强烈反对<br><input name="c41" type="radio" data-x="0" data-y="-0.135">反对<br><input name="c41" type="radio" data-x="0" data-y="0.17">同意<br><input name="c41" type="radio" data-x="0" data-y="0.275">强烈同意<br></li><li>尽管在电子时代官方的监听更容易了，但只有坏人才需要对此担忧。<br><input name="c42" type="radio" data-x="0" data-y="-0.26" checked>强烈反对<br><input name="c42" type="radio" data-x="0" data-y="-0.155">反对<br><input name="c42" type="radio" data-x="0" data-y="0.15">同意<br><input name="c42" type="radio" data-x="0" data-y="0.255">强烈同意<br></li><li>对罪大恶极的犯罪分子，死刑不失为一种选项。<br><input name="c43" type="radio" data-x="0" data-y="-0.26" checked>强烈反对<br><input name="c43" type="radio" data-x="0" data-y="-0.155">反对<br><input name="c43" type="radio" data-x="0" data-y="0.15">同意<br><input name="c43" type="radio" data-x="0" data-y="0.255">强烈同意<br></li><li>在一个文明社会，一个人必须遵从上级、命令下级。<br><input name="c44" type="radio" data-x="0" data-y="-0.2" checked>强烈反对<br><input name="c44" type="radio" data-x="0" data-y="-0.1">反对<br><input name="c44" type="radio" data-x="0" data-y="0.11">同意<br><input name="c44" type="radio" data-x="0" data-y="0.21">强烈同意<br></li><li>那些什么也没有表达的抽象艺术根本就不应该被称为艺术。<br><input name="c45" type="radio" data-x="0" data-y="-0.26" checked>强烈反对<br><input name="c45" type="radio" data-x="0" data-y="-0.155">反对<br><input name="c45" type="radio" data-x="0" data-y="0.15">同意<br><input name="c45" type="radio" data-x="0" data-y="0.255">强烈同意<br></li><li>在刑事审判中，惩罚比改造更重要。<br><input name="c46" type="radio" data-x="0" data-y="-0.23" checked>强烈反对<br><input name="c46" type="radio" data-x="0" data-y="-0.13">反对<br><input name="c46" type="radio" data-x="0" data-y="0.13">同意<br><input name="c46" type="radio" data-x="0" data-y="0.23">强烈同意<br></li><li>改造有些犯罪分子就是浪费时间。<br><input name="c47" type="radio" data-x="0" data-y="-0.26" checked>强烈反对<br><input name="c47" type="radio" data-x="0" data-y="-0.155">反对<br><input name="c47" type="radio" data-x="0" data-y="0.15">同意<br><input name="c47" type="radio" data-x="0" data-y="0.255">强烈同意<br></li><li>商人和制造业者比作家和艺术家更重要。<br><input name="c48" type="radio" data-x="0" data-y="-0.18" checked>强烈反对<br><input name="c48" type="radio" data-x="0" data-y="-0.08">反对<br><input name="c48" type="radio" data-x="0" data-y="0.08">同意<br><input name="c48" type="radio" data-x="0" data-y="0.18">强烈同意<br></li><li>母亲们可以有职业，但她们的首要职责是家庭主妇。<br><input name="c49" type="radio" data-x="0" data-y="-0.23" checked>强烈反对<br><input name="c49" type="radio" data-x="0" data-y="-0.13">反对<br><input name="c49" type="radio" data-x="0" data-y="0.13">同意<br><input name="c49" type="radio" data-x="0" data-y="0.23">强烈同意<br></li><li>跨国公司正在不道德地开发发展中国家的植物基因资源。<br><input name="c50" type="radio" data-x="0" data-y="0.23" checked>强烈反对<br><input name="c50" type="radio" data-x="0" data-y="0.13">反对<br><input name="c50" type="radio" data-x="0" data-y="-0.13">同意<br><input name="c50" type="radio" data-x="0" data-y="-0.23">强烈同意<br></li><li>同现有体制和谐相处是成熟的重要一方面。<br><input name="c51" type="radio" data-x="0" data-y="-0.2" checked>强烈反对<br><input name="c51" type="radio" data-x="0" data-y="-0.1">反对<br><input name="c51" type="radio" data-x="0" data-y="0.11">同意<br><input name="c51" type="radio" data-x="0" data-y="0.21">强烈同意<br></li></ol></p><p><strong>第五部分</strong>：关于宗教。</p><p><ol><li>占星术精确地解释了很多东西。<br><input name="c52" type="radio" data-x="0" data-y="-0.23" checked>强烈反对<br><input name="c52" type="radio" data-x="0" data-y="-0.13">反对<br><input name="c52" type="radio" data-x="0" data-y="0.13">同意<br><input name="c52" type="radio" data-x="0" data-y="0.23">强烈同意<br></li><li>你如果不信宗教就不可能道德。<br><input name="c53" type="radio" data-x="0" data-y="-0.2" checked>强烈反对<br><input name="c53" type="radio" data-x="0" data-y="-0.1">反对<br><input name="c53" type="radio" data-x="0" data-y="0.11">同意<br><input name="c53" type="radio" data-x="0" data-y="0.21">强烈同意<br></li><li>慈善捐助在帮助真正的弱势群体时做得比社会保障要好。<br><input name="c54" type="radio" data-x="-0.5" data-y="0" checked>强烈反对<br><input name="c54" type="radio" data-x="-0.375" data-y="0">反对<br><input name="c54" type="radio" data-x="0.625" data-y="0">同意<br><input name="c54" type="radio" data-x="0.75" data-y="0">强烈同意<br></li><li>有些人天生不走运。<br><input name="c55" type="radio" data-x="0" data-y="-0.23" checked>强烈反对<br><input name="c55" type="radio" data-x="0" data-y="-0.13">反对<br><input name="c55" type="radio" data-x="0" data-y="0.13">同意<br><input name="c55" type="radio" data-x="0" data-y="0.23">强烈同意<br></li><li>我孩子的学校向他传授宗教价值观，这点非常重要。<br><input name="c56" type="radio" data-x="0" data-y="-0.2" checked>强烈反对<br><input name="c56" type="radio" data-x="0" data-y="-0.1">反对<br><input name="c56" type="radio" data-x="0" data-y="0.11">同意<br><input name="c56" type="radio" data-x="0" data-y="0.21">强烈同意<br></li></ol></p><p><strong>第六部分</strong>：关于性。</p><ol><li>婚姻之外的性是不道德的。<br><input name="c57" type="radio" data-x="0" data-y="-0.23" checked>强烈反对<br><input name="c57" type="radio" data-x="0" data-y="-0.175">反对<br><input name="c57" type="radio" data-x="0" data-y="0.13">同意<br><input name="c57" type="radio" data-x="0" data-y="0.23">强烈同意<br></li><li>一对稳定、相爱的同性伴侣，应有收养孩子的权利。<br><input name="c58" type="radio" data-x="0" data-y="0.23" checked>强烈反对<br><input name="c58" type="radio" data-x="0" data-y="0.175">反对<br><input name="c58" type="radio" data-x="0" data-y="-0.13">同意<br><input name="c58" type="radio" data-x="0" data-y="-0.23">强烈同意<br></li><li>由成年人自愿演出的色情影视应该对成人合法化。<br><input name="c59" type="radio" data-x="0" data-y="0.23" checked>强烈反对<br><input name="c59" type="radio" data-x="0" data-y="0.13">反对<br><input name="c59" type="radio" data-x="0" data-y="-0.13">同意<br><input name="c59" type="radio" data-x="0" data-y="-0.23">强烈同意<br></li><li>在私人卧室里两个成年人只见不管做什么，只要是自愿的，国家就管不着。<br><input name="c60" type="radio" data-x="0" data-y="0.26" checked>强烈反对<br><input name="c60" type="radio" data-x="0" data-y="0.155">反对<br><input name="c60" type="radio" data-x="0" data-y="-0.15">同意<br><input name="c60" type="radio" data-x="0" data-y="-0.255">强烈同意<br></li><li>没有人会天生同性恋。<br><input name="c61" type="radio" data-x="0" data-y="-0.26" checked>强烈反对<br><input name="c61" type="radio" data-x="0" data-y="-0.155">反对<br><input name="c61" type="radio" data-x="0" data-y="0.15">同意<br><input name="c61" type="radio" data-x="0" data-y="0.255">强烈同意<br></li><li>社会对性开放并没错，但现在已经开放的过分了。<br><input name="c62" type="radio" data-x="0" data-y="-0.2" checked>强烈反对<br><input name="c62" type="radio" data-x="0" data-y="-0.1">反对<br><input name="c62" type="radio" data-x="0" data-y="0.11">同意<br><input name="c62" type="radio" data-x="0" data-y="0.21">强烈同意<br></li></ol></form><div id="wrapper"><button id="submit" type="button" class="button button-inverse button-rounded">提交</button><br><span id="answer" class="red"></span></div><hr><p>横坐标反映经济观念，负值为左(<a href="https://en.wikipedia.org/wiki/Communism" target="_blank" rel="external">共产主义</a>, <a href="https://en.wikipedia.org/wiki/Collectivism" target="_blank" rel="external">集体主义</a>)，正值为右(<a href="https://en.wikipedia.org/wiki/Neoliberalism" target="_blank" rel="external">新自由主义</a>, <a href="https://en.wikipedia.org/wiki/Libertarianism" target="_blank" rel="external">自由意志主义</a>)。<br>纵坐标反映政治社会观念，负值为自由(<a href="https://en.wikipedia.org/wiki/Anarchism" target="_blank" rel="external">无政府主义</a>, 自由意志论者)，正值为专制或保守(<a href="https://en.wikipedia.org/wiki/Fascism" target="_blank" rel="external">法西斯主义</a>, <a href="https://en.wikipedia.org/wiki/Authoritarianism" target="_blank" rel="external">独裁主义</a>)。</p><p>本测试系统建立于西方政治价值体系基础之上，某些问题强烈的依赖于具体的西方社会环境，未必能够充分反映中国国情。根据周围人群的实验结果，中国人的测试结果普遍位于第三象限（即两坐标均为负值），平均值位于<span class="red">(-2,-2)</span>附近。为了区分中国人习惯意义上的「左与右」，可以以<span class="red">(-2,-2)</span>为坐标原点重新划分坐标平面，即经济坐标小于<span class="red">-2</span>为左，反之为右。政治坐标小于<span class="red">-2</span>为自由，反之为保守或专制。</p><p>下面是著名政治人物的坐标位置以供参考：<br>第一象限（经济右，政治保守）：希特勒，撒切尔夫人，布什，布莱尔，希拉克。<br>第二象限（经济左，政治保守）：斯大林，萨达姆，教皇本笃十四世。<br>第三象限（经济左，政治自由）：甘地，达赖喇嘛，曼德拉。<br>第四象限（经济右，政治自由）：弗里德曼，哈耶克。</p>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 标签用法]]></title>
      <url>/2016-01-06-Hexo-%E6%A0%87%E7%AD%BE%E7%94%A8%E6%B3%95.html</url>
      <content type="html"><![CDATA[<p>搬运自 <a href="http://Hexo.io" target="_blank" rel="external">Hexo.io</a> 的标签插件使用样例，以及我自己添加的一部分</p><p>UPDATE 2016/3/9: 添加内容“Github标签”</p><a id="more"></a><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><h2 id="引用块">引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。</p><p><strong>别号：</strong> quote</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</div><div class="line">content</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure><h3 id="样例">样例</h3><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote %&#125;</div><div class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><p><strong>引用书上的句子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</div><div class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><p><strong>引用 Twitter</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;</div><div class="line">NEW: DevDocs now comes with syntax highlighting. http://devdocs.io</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="external">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="external">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote><p><strong>引用网络上的文章</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</div><div class="line">Every interaction is both precious and an opportunity to delight.</div><div class="line">&#123;% endblockquote %&#125;</div></pre></td></tr></table></figure><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="external">Welcome to Island Marketing</a></cite></footer></blockquote><h2 id="代码块">代码块</h2><p>在文章中插入代码。</p><p><strong>别名：</strong> code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</div><div class="line">code snippet</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure><h3 id="样例-v2">样例</h3><p><strong>普通的代码块</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock %&#125;</div><div class="line">alert(&apos;Hello World!&apos;);</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(&apos;Hello World!&apos;);</div></pre></td></tr></table></figure><p><strong>指定语言</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock lang:objc %&#125;</div><div class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</div></pre></td></tr></table></figure><p><strong>附加说明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock Array.map %&#125;</div><div class="line">array.map(callback[, thisArg])</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">array.map(callback[, thisArg])</div></pre></td></tr></table></figure><p><strong>附加说明和网址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js %&#125;</div><div class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</div><div class="line">=&gt; [1, 2, 3]</div><div class="line">&#123;% endcodeblock %&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact" target="_blank" rel="external">Underscore.js</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_.compact([0, 1, false, 2, &apos;&apos;, 3]);</div><div class="line">=&gt; [1, 2, 3]</div></pre></td></tr></table></figure><h2 id="反引号代码块">反引号代码块</h2><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">``` [language] [title] [url] [link text]</div><div class="line">code snippet</div><div class="line">```</div></pre></td></tr></table></figure><h2 id="pull-quote">Pull Quote</h2><p>在文章中插入 Pull quote。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% pullquote [class] %&#125;</div><div class="line">content</div><div class="line">&#123;% endpullquote %&#125;</div></pre></td></tr></table></figure><h2 id="jsfiddle">jsFiddle</h2><p>在文章中嵌入 jsFiddle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</div></pre></td></tr></table></figure><h2 id="gist">Gist</h2><p>在文章中嵌入 Gist。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% gist gist_id [filename] %&#125;</div></pre></td></tr></table></figure><h2 id="iframe">iframe</h2><p>在文章中插入 iframe。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% iframe url [width] [height] %&#125;</div></pre></td></tr></table></figure><h2 id="image">Image</h2><p>在文章中插入指定大小的图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</div></pre></td></tr></table></figure><h2 id="link">Link</h2><p>在文章中插入链接，并自动给外部链接添加 <code>target=&quot;_blank&quot;</code> 属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% link text url [external] [title] %&#125;</div></pre></td></tr></table></figure><h2 id="include-code">Include Code</h2><p>插入 <code>source</code> 文件夹内的代码文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% include_code [title] [lang:language] path/to/file %&#125;</div></pre></td></tr></table></figure><h2 id="youtube">Youtube</h2><p>在文章中插入 Youtube 视频。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% youtube video_id %&#125;</div></pre></td></tr></table></figure><h2 id="vimeo">Vimeo</h2><p>在文章中插入 Vimeo 视频。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% vimeo video_id %&#125;</div></pre></td></tr></table></figure><h2 id="引用文章">引用文章</h2><p>引用其他文章的链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;% post_path slug %&#125;</div><div class="line">&#123;% post_link slug [title] %&#125;</div></pre></td></tr></table></figure><h2 id="引用资源">引用资源</h2><p>引用文章的资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% asset_path slug %&#125;</div><div class="line">&#123;% asset_img slug [title] %&#125;</div><div class="line">&#123;% asset_link slug [title] %&#125;</div></pre></td></tr></table></figure><h2 id="raw">Raw</h2><p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">content</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure><hr><p>以上内容搬运自<a href="https://raw.githubusercontent.com/hexojs/site/master/source/zh-cn/docs/tag-plugins.md" target="_blank" rel="external">hexo官方文档</a></p><hr><h2 id="mathjax">MathJax</h2><p>插入利用MathJax显示的数学公式，需要安装<code>hexo-math</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;% math %&#125;</div><div class="line">\begin&#123;aligned&#125;</div><div class="line">\dot&#123;x&#125; &amp; = \sigma(y-x) \\</div><div class="line">\dot&#123;y&#125; &amp; = \rho x - y - xz \\</div><div class="line">\dot&#123;z&#125; &amp; = -\beta z + xy</div><div class="line">\end&#123;aligned&#125;</div><div class="line">&#123;% endmath %&#125;</div></pre></td></tr></table></figure><p>$$ \begin{aligned} \dot{x} &amp; = \sigma(y-x) \ \dot{y} &amp; = \rho x - y - xz \ \dot{z} &amp; = -\beta z + xy \end{aligned} $$</p><h2 id="github标签">Github标签</h2><p>插入Github repo的内容，需要安装<code>hexo-github</code>.</p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% github user repo referenced_commit [auto_expand = true | false] [width = 100%] %&#125;</div></pre></td></tr></table></figure><p>解释：</p><table><thead><tr><th style="text-align:center">参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">user</td><td>Github用户名</td></tr><tr><td style="text-align:center">repo</td><td>该用户的repo名</td></tr><tr><td style="text-align:center">commit</td><td>commit的sha1码值</td></tr><tr><td style="text-align:center">auto_expand</td><td>（可选，默认为false）同步后更新timeline</td></tr><tr><td style="text-align:center">width</td><td>（可选，默认100%）控件的宽度，应为一个合法的CSS宽度值</td></tr></tbody></table><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% github akfish hexo-math b82e65 %&#125;</div></pre></td></tr></table></figure><div id="badge-container-akfish-hexo-math-b82e65" class="hexo-github" style="width:100%"></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">loadStyle("/hexo-github/style.css"),loadStyle("/hexo-github/octicons/octicons.css"),new Badge("#badge-container-akfish-hexo-math-b82e65","akfish","hexo-math","b82e65",!1)</script><h2 id="bilibili-视频">Bilibili 视频</h2><p>插入来自bilibili的视频，需要安装<code>hexo-tag-bilibili</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% bilibili [av_id] %&#125;</div><div class="line">or</div><div class="line">&#123;% bilibili [av_id] [page] %&#125;</div></pre></td></tr></table></figure><h2 id="ruby-character-tag">Ruby character tag</h2><p>Ruby标签，需要安装<code>hexo-ruby-character</code>.</p><p><strong>英文</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% ruby Base|top %&#125;</div></pre></td></tr></table></figure><ruby>Base<rp>(</rp><rt>top</rt><rp>)</rp></ruby><p><strong>中文+拼音</strong></p><p>在top域里写中文会被自动转换成拼音。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% ruby 佐天泪子|掀裙狂魔 %&#125;</div></pre></td></tr></table></figure><ruby>佐天泪子<rp>(</rp><rt>xiān qún kuáng mó</rt><rp>)</rp></ruby><p><strong>其他CJK字符</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% ruby 超電磁砲|レールガン %&#125;</div></pre></td></tr></table></figure><ruby>超電磁砲<rp>(</rp><rt>レールガン</rt><rp>)</rp></ruby>]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[DnD非官方版阵营测试]]></title>
      <url>/2016-01-05-DnD%E9%9D%9E%E5%AE%98%E6%96%B9%E7%89%88%E9%98%B5%E8%90%A5%E6%B5%8B%E8%AF%95.html</url>
      <content type="html"><![CDATA[<p>由于<a href="http://www.wizards.com/default.asp?x=dnd%2Fdnd%2F20001222b" target="_blank" rel="external">官方版</a>的测试规则我还不清楚，因此只能退而求其次找了个替代版，至少我测试起来在官方版和这个版本里是一样的结果。同时，我也是第一次使用JavaScript(之前完全没摸过……)，因此效果会有点渣，希望各位不要介意。</p><p>UPDATE 2016/06/23: 参考<a href="http://maokwen.tk/2016/06/23/mbti/" target="_blank" rel="external">此处</a>更改了结果显示的方式，告别了alert</p><p>UPDATE 2016/06/28: 使用jQuery大幅改进了脚本</p><a id="more"></a><p>测试转载自<a href="http://www.360doc.com/content/13/0511/22/175820_284689475.shtml" target="_blank" rel="external">此</a>，不代表本人任何观点。</p><hr><p>回答下面的问题时，最好把自己代入，然后凭自己的第一感觉去回答，不要想当然地就认为自己会怎么怎么样，有好多事情，我告诉你，你其实做不来滴。嘻嘻……</p><form id="questions"><script type="text/javascript">$(document).ready(function(){$("#submit").click(function(){var p=0,a=0;$("#questions input[name^='q']:checked").each(function(){p+=parseInt($(this).val())}),$("#questions input[name^='p']:checked").each(function(){a+=parseInt($(this).val())}),p=p<8?3:p>16?1:2,a=a<11?3:a>15?1:2;var e="<hr><h3>您的测试结果为：";switch(10*p+a){case 11:e+="Lawful Good 守序善良</h3><p>守序善良的人按照一个好人应该或必须遵循的方式行动。他致力于与邪恶斗争，惩罚邪恶决不宽容。他说真话，守承诺，帮助需要帮助的人，伸张正义直言不公。守序善良的人不喜欢看见有罪者不受惩罚。例如一位面对罪恶挺身而出的圣骑士就是守序善良的代表人物。守序善良是结合了荣誉感和同情心的阵营。已经不能用善良来形容阁下了，也许正义才是最好的形容词，您就是生活在现在的骑士，正气十足，疾恶如仇。可以认真的执行每一件事，可靠，值得信任。</p><p>忠告：不过～您知道吗，骑士在古代是死亡率相当高的一种职业！如果您对很多东西过于较真，会失去很多生活的乐趣，而且水至清则无鱼，多和朋友沟通一下，随和一些，让自己多放松一下，您的预期寿命会大大地延长的。</p>";break;case 21:e+="Neutral Good 中立善良</h3><p>中立善良者尽其所能做着一个好人能做的事情。他致力于帮助别人。他配合国王和大臣们的工作，但并不感到蒙恩于其。中立善良的寻常称谓是“真正善良”。一位根据他人需要施以援助的牧师就是中立善良的代表。中立善良是不带偏见或不违反信念去行善的阵营。<p>同志啊～～表误会，港湾只是想说我们是一个阵营的而已！尽自己的能力帮助他人，是令这个阵营的人显得可爱的一大特点。当然，和LG那些家伙们不同的是，当我们力不能及的时候，我们一般不会干出牺牲自己的蠢事。我们也很少考虑什么社会的进步之类的大问题，我们就帮助身边随手可及的，简单而快乐地活着，顺便作着“好人有好报”的白日梦！</p><p>忠告：帮助别人之前要稍微谨慎一些，这个阵营上当受骗的比率是所有阵营之最，虽然真正被骗得很惨的都是LE的家伙们。</p>";break;case 31:e+="Chaotic Good 混乱善良</h3><p>混乱善良的人按照自己的良心行动，极少考虑别人对他的规范和要求。他以自己的方式处事，但却善良友好且乐善好施。他相信善良及正义，不过认为法律和规章没什么用处，并且憎恨那些胁迫并命令别人的人。他尊序自己的道德准则，这些准则虽然是良善的，但却可能与社会上的准则不相一致。一位劫富济贫的侠盗就属于混乱善良阵营。混乱善良是结合了善良心灵和自由精神的阵营。美丽心灵和令人头疼的个性的结合体。十足的性格令他们不会那么老实地循规蹈矩。说话也常常是一点也不留口德，有的时候也会捉弄一下自己的朋友，总之是充满了创意和活力的一群人。</p><p>忠告：虽然有一颗豆腐心，但是刀子嘴有的时候还是挺可怕的。还有，有的时候还是要稍微尊重一下权威的……</p>";break;case 12:e+="Lawful Neutral 守序中立</h3><p>守序中立的人行动时遵从法律、传统或个人信条的指导。秩序和组织对他来说至关重要。他也许信仰某些私人法则，并按某种信条或道德标准生活；他也可能信仰适用于所有人的秩序，并且喜欢稳固强大有组织的政府。一位按照命令毫不留情地拷问罪犯的狱卒就属于守序中立阵营。守序中立的寻常称谓是“真正守序”，是注重荣誉却不狂热盲目的阵营。《80天环绕地球》里面的主人公一开始就是那样的人，还有那些特别遵从纪律和法令的人。你相信总结出规矩并让大多数人都遵守的规矩可以使你的生活更加的轻松，即使这些规矩对你带来的些许的不便，你也认为与他们相比带来的好处可以忽略不及。</p><p>忠告：大哥，军队的生活最适合你这种人了。不过个性这种东西还是最好发扬一下，要是淹没到了人群中，有的时候也不是那么理想呢。当然如果你只是想做“革命机器上的一颗螺丝钉”我也不好说什么了，不过还是建议你看看梦工厂的《A.NT Z》</p>";break;case 22:e+="True Neutral 绝对中立</h3><p>大部分绝对中立者是因其没有特别的坚信和偏爱而成中立。在善良与邪恶、秩序与混乱之间他们并不特别遵循其中某一者，但他们并不致力于维持事物中立的状态。这样的人认为善良比邪恶要好，他们也更愿意有善良而非邪恶的邻居和统治者。尽管如此，他却并不承诺在任何情况或全体方式中亲身支援良善。另一方面，某些绝对中立的人物委身于中庸的哲学观点。他们认为善良、邪恶、秩序、混乱都是偏见和危险的极端观点。他们提倡中立之路，认为从长远看它是最好最平衡的道路。绝对中立是行动自然不持偏见强迫的阵营。其实绝对中立不是TN，不过反正你也不在乎，处在这个阵营的，不是随风飘舞的墙头草，就是超然世外的高人。走自己的路，让别人去说吧。唉，反正人数非常的少……</p><p>忠告：这种阵营的人一般不需要什么忠告，他们可以很自由地转换到其他的阵营去！</p>";break;case 32:e+="Chaotic Neutral 混乱中立</h3><p>混乱中立的人按自己一时的兴致行动。他是一个完全的个人主义者。他重视自己的自由权利，但并不致力于保护别人的自由。他蔑视权威，愤恨约束并且挑战传统，但他不会向无政府运动那样有意瓦解组织。如果这么做，他必须把自己的阵营转成善良(希望解放他人)或是邪恶(使异己受苦)。不过，混乱中立者的行为也许很难预测，但他的举止并非完全随机的，他从桥上走过去的可能性和从桥上跳下去的可能性大小并不相等。一位靠着自己的小聪明来谋生的吟游诗人就属于混乱中立阵营。混乱中立的寻常称谓是“真正无序”，是真正自由于社会约束和对改良社会有着空想的阵营，追求自由，奔放。毕竟人生到这个世界上不是为了受苦的，而是为了享受和创造的。相信这是这个阵营绝大多数人的心声吧？不会循规蹈矩，也不会束缚自己，挺好的生活方式呢！</p><p>忠告：多练练怎么与人配合吧，现在的社会对合作要求比较高的，还有就是别干太出格的事。</p>";break;case 13:e+="Lawful Evil 守序邪恶</h3><p>守序邪恶的人有计划地谋求他想要的东西，此行为受到他行为准则的限制，但并不顾忌受其伤害的人。他关心传统、忠诚和秩序，但不关心自由、尊严和生命。他按规则行动，但没有怜悯和同情。他觉得待在统治阶层里很舒服，愿意支配别人，但也乐意为别人服务。他处罚谴责别人并不是根据他们的行为而是根据种族、信仰、祖国或社会阶层。他不愿违反法律或承诺，这种不愿部分是因为他的天性，部分是因为他需要秩序来保护他免受道德上的反对。某些守序邪恶者有特别的禁忌，比如不冷血嗜杀(但让属下去做)或不伤害儿童(如果可能的话)。他们认为这些良心上的原则使自己比一般不合人道的恶人水准高。像一个诡计多端扩展自己势力并压迫领土内平民的贵族就是守序邪恶的绝好代表。某些守序邪恶的人或生物狂热的效忠于邪恶，就好像十字军效忠于良善一样。伤害别人是他们这么做的目的，传播邪恶本身也是他们乐于如此的原因。他们也可能认为行恶是对某种邪恶神明或主人的责任的一部分。守序邪恶是一个有方法有意图并且能常常有所成就的邪恶阵营，为提高自己的地位而不断地努力着，当我有一个朋友告诉我她是LE的时候，真的吓了我一跳，不过后来想想，也没有什么的，挺正常的，毕竟还是遵纪守法的好公民，除了没有什么同情心，稍微冷漠了一点，有一点贪小便宜，也没什么大的毛病了。</p><p>忠告：法律这种东西，不仅仅建立在“合理”的基础上，而且最早地建立在“合情”的基础之上。这个社会的竞争绝对没有你想象的那样残酷，温情还是居多的，好好享受吧！</p>";break;case 23:e+="Neutral Evil 中立邪恶</h3><p>中立邪恶者做任何可能不受或逃脱惩罚的事。他完全为自己着想，眼里只有自身的利益，纯粹而简单。他不在乎被他杀死的人，无论是因为利益、消遣还是便利。他对秩序并无偏爱，但如果遵从法律会使他得利，他就会照做；但如果撕毁协议能使他获得更大的利益，他也会毫不犹豫地背约。那些情报贩子，以及通过抢掠和凶杀来得到他想要的东西的罪犯就是中立邪恶的代表人物。中立邪恶代表着无关对象的邪恶，因此又被称为是“真正邪恶”。价值观其实也没什么的，人类本来就是一个社会性和个体性并存的生物，注重个体的发展也没什么不好的。</p><p>忠告：不过，老大，有的时候也要稍微考虑一下别人的立场吧。忘掉生活中的一些不快，把心放宽，和我一起大声地念：HA.KUNA. MA.TA.TA.</p>";break;case 33:e+="Chaotic Evil 混乱邪恶</h3><p>混乱邪恶的人做任何他的欲望、恨意和破坏欲所驱使他做的事。他性情暴躁、恶毒，独断专行、手段粗暴并且行为无常。他无情残忍，肆无忌惮地夺取任何他可以夺取的东西。这样的人被视作社会的毒瘤。值得庆幸的是，他毫无计划，所有他参加的和形成的群体都组织极差。一般而言，唯有强迫和暴力才能使混乱邪恶的人在一起工作，只有真正的强者才能居于首领地位。而他一旦露出衰弱的迹象，就会被取而代之。一个疯狂追求复仇和破坏的法师就是混乱邪恶的代表人物。混乱邪恶所毁灭的，不仅仅是美丽和生命，而且还有维持着美丽和生命的秩序。老大，有个性，真的非常有个性，你们是所有人中最有创意的一种人了，从某种角度来说，社会是你们所推动的！</p><p>忠告：你们也是不需要忠告的一类人……不过，也许你们再重新认识一下这个社会会比较好一点……</p>"}$("#result").html(e)})})</script><p><strong>第一卷</strong></p><ol><li>当年，苏格拉底因为他的学说太那个了，被指控为“异端”和“误导年轻人”。长老会审判的结果是让他服毒。其实他当时是可以逃亡的，正如几十年后他的弟子柏拉图所作的那样，那个时候柏拉图面对指控就跑路了。可惜当时苏格拉底认为——遵从法律是一个国家公民应尽的职责和义务，哪怕这个法律现在还有缺陷。所以这个家伙就biu~的一声死掉了。这就是哲学上著名的“苏格拉底之死”。你认为这个家伙：<br><input checked name="q1" type="radio" value="2"> A. 为信念而死，值得敬佩。<br><input name="q1" type="radio" value="1"> B. 信念正确，行为可笑，理想主义得过了头！<br><input name="q1" type="radio" value="0"> C. 他……大脑进水了吗？看来他的学说确实够那个的啦……<br></li><br><li>在法国大革命期间，由于社会的动荡，雅各宾派政权颁发了一条法令，叫《惩治嫌疑犯条例》。这个条例和先进大多数的法律不同的地方是它采用的是“有罪推定”，就是说，如果一个嫌疑人无法证明他是无罪的，那么他就被认定有罪——和现金的“无罪推定”正好相反。结果是在条例的作用之下，社会治安迅速地好转，当然也死了不少无辜的人。所以你认为，在社会状况非常恶化的情况之下，是否应该使用“有罪推定”来改善治安状况？<br><input checked name="q2" type="radio" value="2"> A. 呵呵！有杀错，无放过。保证大多数人的利益最正确！<br><input name="q2" type="radio" value="1"> B. 视情况而定吧，如果情况真的不可收拾，我不反对……<br><input name="q2" type="radio" value="0"> C. 绝对不应以无辜者的鲜血来换来这种恐怖的安宁！<br></li><br><li>“少数服从多数”是现今常用的规则，你认为这样的规则：<br><input checked name="q3" type="radio" value="2"> A. 很好，保障大多数人的利益是非常重要的……<br><input name="q3" type="radio" value="1"> B. 还可以吧，反正我会尽量站在大多数人一边……<br><input name="q3" type="radio" value="0"> C. 不公平！少数人的利益和个性被忽视和掩盖了，而且最糟糕的是，“真理往往在少数人手中”……<br></li><br><li>“伟人之所以伟大，是因为我们都是跪着看他们”……<br><input checked name="q4" type="radio" value="2"> A. 并不是这样，伟人们确实有他们值得敬仰的地方。<br><input name="q4" type="radio" value="1"> B. 不太清楚，这句话有一定的道理吧？<br><input name="q4" type="radio" value="0"> C. 我也可以成为伟人的，其实成功并不是那么的遥不可及……<br></li><br><li>“二战中犯下战争罪行的德军士兵辩解说，是命令让他那么作的，如果他不执行命令，就会被军法处置，你认为这些士兵："<br><input checked name="q5" type="radio" value="2"> A. 情有可原，身为小兵其实挺无奈的。但是下命令的那个混蛋真他妈的该死。<br><input name="q5" type="radio" value="1"> B. 我也不太清楚，也不想体会那种情景<br><input name="q5" type="radio" value="0"> C. 任何有独立思想的成年人都不能以命令为借口为自己的行为进行推脱。（这也是国际法中明确说明的！）<br></li><br><li>“当你处在一个十字路口，面前是红灯，但是你前面却没有一辆车通行，你是否会穿越红灯呢？"<br><input checked name="q6" type="radio" value="2"> A. 绝对不会！我会严格遵守交通规则！<br><input name="q6" type="radio" value="1"> B. 有急事的时候会过去。<br><input name="q6" type="radio" value="0"> C. 规矩是死的，人是活的……<br></li><br><li>“当病人生不如死的时候，他提出安乐死，如果你是医生，你是否会帮助他？"<br><input checked name="q7" type="radio" value="2"> A. 这是犯罪！我不会杀人的！<br><input name="q7" type="radio" value="1"> B. 说不好……<br><input name="q7" type="radio" value="0"> C. 我会尽可能地帮助他。<br></li><br><li>“当你的好朋友沉浸在一项不好的生活，比如说网络游戏中，你想要劝她，你会怎么样？"<br><input checked name="q8" type="radio" value="2"> A. 好言相劝，毕竟是朋友。<br><input name="q8" type="radio" value="1"> B. 不知道！<br><input name="q8" type="radio" value="0"> C. 狠狠地骂她一顿，好好地刺激她一下，要不就打醒她！喝！<br></li><br><li>“你和你的朋友之间有了某个误会，如果你把真相说出来，她一定会非常的自责，但是如果你不说出真相，你自己又觉得非常的委屈："<br><input checked name="q9" type="radio" value="2"> A. 我忍，习惯了就好了！<br><input name="q9" type="radio" value="1"> B. 随遇而安，有可能真相被别人先说出来呢！<br><input name="q9" type="radio" value="0"> C. 绝不能让自己受到委屈，让她内疚而死吧……<br></li><br><li>“当你发现你和其他人的意见都不大相同的时候，你会："<br><input checked name="q10" type="radio" value="2"> A. 反复检查自己的意见，看看自己的意见是不是有什么问题。<br><input name="q10" type="radio" value="1"> B. 当作什么也没有发生好了<br><input name="q10" type="radio" value="0"> C. 他们全都错了，我是正确的！<br></li><br><li>““只要动机是好的，手段无所谓。”你是否赞同这句话？"<br><input checked name="q11" type="radio" value="2"> A. 你疯了吗，那样子会天下大乱的！<br><input name="q11" type="radio" value="1"> B. 有的时候稍微地犯规一下也没有什么的。<br><input name="q11" type="radio" value="0"> C. 本来就是这个样子的嘛！<br></li><br><li>“发生雪崩了，有两个人被困在了山上，发动n多人去搜救，可是这个时候，山上仍然有危险，可能会让更多的人遇险。如果你是总指挥，你可以接受多少人因为营救这两个人而送命？"<br><input checked name="q12" type="radio" value="2"> A. 嗯，你们安息吧，我不能因为两个人，而把几百号人置于危险之中。<br><input name="q12" type="radio" value="1"> B. 大家小心点，注意自己的安全，如果有人出现伤亡，马上就闪……<br><input name="q12" type="radio" value="0"> C. 每一个人的生命都是无价的，要不惜一切的代价……（美国大片里面的常见台词）<br></li><br><li>“城管和联合执法的在驱除道边上卖红薯的小贩，你会认为："<br><input checked name="q13" type="radio" value="2"> A. 维护市容，就应该这样！<br><input name="q13" type="radio" value="1"> B. 与我无关！<br><input name="q13" type="radio" value="0"> C. 人家也要糊口啊，挺可怜的呢！<br></li></ol><p><strong>第二卷</strong></p><ol><li>“你是否曾经无缘无故地欺负过小动物？（男生请从十岁之后开始计算。）"<br><input checked name="p1" type="radio" value="2"> A. 决不，我从来没有这么干过。<br><input name="p1" type="radio" value="1"> B. 有的时候心情不好，就会……不过一般我还是反对这么干的……<br><input name="p1" type="radio" value="0"> C. 我擅长用放大镜烧死蚂蚁，捕捉蜻蜓，走到道边看见狗都想踢两脚，当然不是太大的那种！<br></li><br><li>“曹操著名的那句“宁可我负天下人，不教天下人负我。”<br><input checked name="p2" type="radio" value="2"> A. 太偏激了<br><input name="p2" type="radio" value="1"> B. 有的时候，为了自保，也无可厚非，但是把这个东西当成信念就有点太那个啦……<br><input name="p2" type="radio" value="0"> C. 哼哼，这个世界本来就是那样的，人不为己，天诛地灭。<br></li><br><li>“你认为复仇和宽恕哪一个更加合适？"<br><input checked name="p3" type="radio" value="2"> A. 宽恕是美德，怨怨向报何时了<br><input name="p3" type="radio" value="1"> B. 不知道，希望不会发生这种事情<br><input name="p3" type="radio" value="0"> C. 宽恕是纵容，正是因为有了这么多虚伪的家伙，才会有越来越多的无法无天的家伙，敢惹我的，我十倍与之！<br></li><br><li>“当你因为某种原因陷入重大失败，进入人生的低潮时，你会怎么想："<br><input checked name="p4" type="radio" value="2"> A. 是我的实力还不够强，基本上是我自己的责任。<br><input name="p4" type="radio" value="1"> B. 非吾不能，天亡吾也！<br><input name="p4" type="radio" value="0"> C. 都是他们这些小人，处处算计于我，真该死～～～～～～～～～～～～～～～<br></li><br><li>“如果你以前被乞丐（假）骗过钱，你是否还会再看见乞丐，或者有人向你寻求帮助（要几块钱什么的，现在挺常见的），你是否会给予帮助？"<br><input checked name="p5" type="radio" value="2"> A. 万一那个人确实需要帮助呢？我不能因为以前别人骗了我就拒绝帮助一个困境中的人！<br><input name="p5" type="radio" value="1"> B. 我不知道，如果那个人看上去真的非常可怜的话，我可能会给钱的，但我认为他可能是骗子！<br><input name="p5" type="radio" value="0"> C. 滚！你这样的家伙我见得太多了！找民政部门去！<br></li><br><li>“卓别林的戏剧，欧亨利的小说，王尔德的童话，你的感觉是……（别和我说你一个都不知道！）"<br><input checked name="p6" type="radio" value="2"> A. 流泪<br><input name="p6" type="radio" value="1"> B. 大笑<br><input name="p6" type="radio" value="0"> C. 无聊<br></li><br><li>“我们在小学接受的教育都是在公共汽车上要让座，当车上有不应该站着的人站着的时候，如老人，而你是坐着的，你的反映是："<br><input checked name="p7" type="radio" value="2"> A. 假装下车，站起来，用身子挡着座，让该坐的人坐下！<br><input name="p7" type="radio" value="1"> B. 站起来，大声招呼对方坐下，然后虚伪地笑一笑……<br><input name="p7" type="radio" value="0"> C. 象大多数的年轻人一样，让小学的教育被素质教育所代替吧……<br></li><br><li>“当你为一个目标而努力了很久，但是却失败了，而这是你的最好的朋友却成功的时候，你心里酸酸的感觉能持续多久呢？"<br><input checked name="p8" type="radio" value="2"> A. 5分钟，然后真心地为朋友而高兴。<br><input name="p8" type="radio" value="1"> B. 一天，然后和她心存芥蒂。<br><input name="p8" type="radio" value="0"> C. 你们的友谊可能会就此而冲淡！<br></li><br><li>“你给朋友送礼物的时候，一般会："<br><input checked name="p9" type="radio" value="2"> A. 买两份，因为我只送我自己最喜欢的东西，所以自己都忍不住要留一份！<br><input name="p9" type="radio" value="1"> B. 例行公事，没好好考虑过。<br><input name="p9" type="radio" value="0"> C. 把用不到的东西送给别人吧～～～<br></li><br><li>“一个浑身是血而且赃兮兮的人向你求助，你能忍住恶心帮助这个人吗？（学医的话请以自己从医之前的行为做参考。）"<br><input checked name="p10" type="radio" value="2"> A. 义不容辞<br><input name="p10" type="radio" value="1"> B. 有点恶心<br><input name="p10" type="radio" value="0"> C. ～～～～～～～～滚！找别人去！<br></li><br><li>“神灯精灵在你的面前献身，满足你三个愿望。你可能会想到（注意，不是许愿，仅仅是想到）不为你自己的愿望吗？"<br><input checked name="p11" type="radio" value="2"> A. 世界和平？我所关心的人？<br><input name="p11" type="radio" value="1"> B. 在巨大的惊喜面前，大脑一片空白！<br><input name="p11" type="radio" value="0"> C. 正在阐心竭虑计算如何许愿才能让自己的利益最大化！<br></li><br><li>“你认为有可能在人类中消除犯罪吗？"<br><input checked name="p12" type="radio" value="2"> A. 总有一天的，等到……<br><input name="p12" type="radio" value="1"> B. 不知道，谁也所不清，也许有一天“犯罪”这个词的意义会发生改变？<br><input name="p12" type="radio" value="0"> C. 你睡醒了没，是不是有一点发烧？<br></li><br><li>“道边上有一健康成年男子在乞讨，对此你的看法是："<br><input checked name="p13" type="radio" value="2"> A. 是不是有什么迫不得已的情况？<br><input name="p13" type="radio" value="1"> B. 哀其不幸，怒其不争，这是社会的问题，与我无关！<br><input name="p13" type="radio" value="0"> C. 人渣，垃圾，怎么警察也不管一下？<br></li><br><li>“如果三天后就是世界末日，且只有你一个人知道人类世界会在三天之后灭绝了，你会怎么样？"<br><input checked name="p14" type="radio" value="2"> A. 尽自己的可能拯救这个世界，包括让应该知道这个信息的人知道。<br><input name="p14" type="radio" value="1"> B. 用不打扰其他人的方式尽情享受这几天，也一定要结束自己的处女（男）生涯，当然是在不伤害别人的基础上……<br><input name="p14" type="radio" value="0"> C. 哼哼哼哼，别人我管不了了，三天，我要做到无憾的三天，哼哼……（睁着充血的眼睛出去了……）<br></li><br></ol><div align="center"><br><button id="submit" class="button button-inverse button-rounded" type="button">提交</button></div><div id="result"></div></form>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> DnD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[随笔杂谈]]></title>
      <url>/2015-12-23-%E9%9A%8F%E7%AC%94%E6%9D%82%E8%B0%88.html</url>
      <content type="html"><![CDATA[<p>曾经多次，在夜深人静适合一个人思考钻死胡同的时候，酝酿过写这么个东西的想法；可惜这种想法往往不能留存过夜。第二天一觉起来神清气爽，似乎所有烦恼与抑郁症状都不翼而飞了，这种想法也就随之消散在脑海里，化作飞灰。但大量飞灰也有沉积起来形成星体的时候，于是你们现在看到了这份鬼话连篇的随笔杂谈。</p><a id="more"></a><p>在夜里，一个人独自思考，比较容易钻死胡同，积聚大量的负面情绪。此时只有你一个人独自徜徉在精神的海洋里，无论是捕捞到了五彩缤纷的海洋特产还是抽筋溺水一命呜呼都只有你一个人知道，所有的收获与损失都只能压积在心底，除非你精神分裂有另一个你和你一同嬉戏。但这是打发睡前漫长时间的方法，我乐此不疲。</p><p>说了这么多，就是想说这些东西堆积在我脑海里很久了，久到不吐不快的地步。自认优雅乃是行为准则的我自然不好去叨扰别人向他/她/它倾倒我积累起来的苦水，现在还没有谁能让我放心对其倾诉的地步，因为我觉得我肯定会在对方那里获得一个“你丫谁啊”的评价（在此诚征女朋友一名）。既然如此我就放在这里罢，当做是一次我自己对自己的谈话。</p><p>事情要从高考那时候说起：当时因为奇怪过敏病症躺在医院里的我，拿起手机向教育机构发起了查询请求，然后获得了一个令人心痛的590. 虽然我自己并不清楚自己能爬到什么样的高度，但我觉得590是不能够描述它的。看到590的我，感到浑身一麻：完了。</p><p>其实对这样的结果我早有预感：我没能评析诗经，语文自然不会好好评析我；我因为带有绝对值的数列递推而手忙脚乱，数学自然也不会给我好脸色看。怎么样呢？590，咎由自取。</p><p>但过去就是过去；你远大于普朗克长度的体型自然不能展示量子特性，你当然不能像光子一样搞个延迟选择改变历史路径。590就是590, 除非我愿意去像那谁一样读个高四高五高六去刷分。然而当时已经心灰意冷，“我才懒得去想这么多！该怎样就怎样吧！”</p><p>于是就报了一个糊里糊涂的志愿，度过了一个莫名其妙的大一。报志愿的时候十分的淡漠，好像黄文睿那不是我的名字一样。填了5个志愿进了第二个，填了5个专业没有一个要我的，哪怕是物理系也没有。进了一个我始料未及的专业，打了我个猝不及防。</p><p>这样的结果就是，高考完的暑假被拖着去走亲访友报个“喜”，重复着一遍又一遍对他们来说陌生的大学的名字，复述着一遍又一遍我打心底里不愿意去的专业，偏偏他们认为这就是我竭尽全力跳龙门的高度，嘴里“不错不错有前途”地说着。哼哼。</p><p>连带着陪同三位学神的帝都游我也是不能尽兴。人家秒解的题我不能秒解，人家随口而出的定理公式我听不懂，人家的随手取得的校荐我拿不到。结果就是人家搞出来的大新闻我要老老实实坐在下面学习一个。当时的我充斥着对自己的怀疑：我真的配得上和这样人均630+的人一起去玩耍？他们三位一路上对各种学校名人趣闻了如指掌，一路上带着的都是他们应得的“我是明日之星”的自豪与傲气。我呢？我能干啥？我只能听听，笑笑，表示我来了。</p><p>曾经是怎样期盼着大学的呢？一个知识的海洋，名师益友共同前行。但真正踏入之后就发现远远不是那么回事。强行建立的认同感，MOBA玩到傻的同学，依然像高中一样的授课方式，没事拉着你强行出观众的学校活动。我非常，非常，非常的失望，不论是对同学，对老师，对舍友，对学校，对教材，对生活环境，最重要的，对自己。当时哪怕是考再好一点，是不是就能进入到一个更高的平台，去和更好的人一起谈笑风生呢？</p><p>“母校”的地位并不能被拿来当挡箭牌，更何况我心中并没有把这里当做母校。课程水就是水，不能因为有几个上课精彩的老师就说好，正如不能因为有几个老师讲课烂就说烂一样。高等数学仿佛是择人而噬的恶魔，工程图学是吃人吐X光的黑洞，线性代数就是挥之不去减命折寿的梦魇，老师上课的精彩也不能掩盖学生们对知识本身的惧怕。至于其他的就更加糟糕，英语课如同玩耍（也许正应如此？），C语言课程简直是浪费生命。这是大学？这是985？简直是纸老虎。</p><p>大一就这么混过去了。我一直是以常态而学习，但他们却说着“学霸”调笑，仿佛有一条深沟横亘在我和他之间，仿佛我们就不是同一个物种。也许他们没办法理解我，就像我没办法理解为什么LoL有那么大的吸引力一样。更可怕的是，有那么一个糟糕的室友。我对他已经远远超出“不满”的程度，要是杀人不犯法的话我早就……</p><p>幸而我能够“脱颖而出”，走出了那个在我看来是一个深坑神坑的地方。我来到了曾经是我志愿的专业，又一次将其填在志愿表上。我当时想着，不肯录取我的地方，至少平均水平也得比我高上那么一点吧？</p><p>可惜，现实击碎了我的想法，它狠狠地打了我的脸，生疼。又一次感到了失望，心累。同样的内容在不同的地方上演。我感觉，是我错了？广受嘲笑的晋惠帝也许就是我，我想让所有人都吃的上肉糜，时间地点内容人物不同而已，其内核分毫不差。 俗话说不吐不快。吐了，也没能快了多少。火气易去，郁气难消。努力吧。</p>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 情感叙事 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C与C++的不同]]></title>
      <url>/2015-12-19-C%E4%B8%8EC-%E7%9A%84%E4%B8%8D%E5%90%8C.html</url>
      <content type="html"><![CDATA[<p>UPDATE 2017/03/10: 填了一部分</p><a id="more"></a><p>由于本人才疏学浅造成的错误希望各位在评论中<strong>心平气和</strong>地指正。</p><hr><h2 id="auto-关键字">auto 关键字</h2><p>在C语言中，这个关键字用于声明变量的生存期为自动，即将不在任何类、结构、枚举、联合和函数中定义的变量视为全局变量，而在函数中定义的变量视为局部变量。这个关键字不怎么多写，因为函数内局部变量默认就是<code>auto</code>的，与程序员预期相符合。C++98标准中<code>auto</code>关键字与C语言中的相同；而自C++11以来，<code>auto</code>的语义被修改，原来代表 “automatic” 的语义被废弃，该关键字转而用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p><p>C++ <code>auto</code>用法举例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> <span class="title">U</span>&gt;</span></div><div class="line"><span class="title">auto</span> <span class="title">add</span>(<span class="title">T</span> <span class="title">t</span>, <span class="title">U</span> <span class="title">u</span>) -&gt; <span class="title">decltype</span>(<span class="title">t</span> + <span class="title">u</span>) // <span class="title">add</span>的返回类型与<span class="title">operator</span>+(<span class="title">T</span>, <span class="title">U</span>)的相同</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> t + u;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;type&gt; func()&#123;</div><div class="line">    <span class="comment">//something here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">auto</span> a = func();  <span class="comment">// a的类型与func的返回值类型相同</span></div></pre></td></tr></table></figure><p>之所以上面返回类型需要使用<code>auto</code>占位，是因为你的类型推导式用到了函数参数<code>t</code>和<code>u</code>，而编译器读到返回类型推导式<code>decltype(t + u)</code>的时候<code>t</code>和<code>u</code>还没声明，也就用不了，形成了循环依赖。除了这种格式，还可以使用<code>decltype(*(T*)0 + *(U*)0)</code>这样的格式，虽然更难看。</p><h2 id="类型别名">类型别名</h2><p>类型别名用于避免又臭又长的变量声明（比如函数指针），以及保证可移植性（比如<code>stdint.h</code>里的<code>int32_t</code>保证是32位带符号整型）等等情况下。</p><p>C和C++均支持<code>typedef</code>的类型别名，并且都不允许<code>typedef</code>类型别名声明中出现<code>static</code>. <code>typedef</code>声明的作用域如同一个变量声明，在C++中多了类从而类中的<code>typedef</code>声明也多了访问权限控制。</p><p>在C++中多出了模板，而<code>typedef</code>不支持模板，定义的类型别名只能是模板实例化之后的类型。若要对模板进行类型别名声明新的模板，就要使用<code>using</code>关键字。</p><p><code>using</code>的使用方式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Simple using alias</span></div><div class="line"><span class="keyword">using</span> alias_name = type_id;</div><div class="line"></div><div class="line"><span class="comment">// For template alias</span></div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">template</span>-parameter-<span class="built_in">list</span>&gt;</div><div class="line"><span class="keyword">using</span> alias_name = type_id;</div></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="title">struct</span> <span class="title">Alloc</span> &#123; &#125;;</div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></div><div class="line"><span class="title">using</span> <span class="title">Vec</span> = <span class="title">vector</span>&lt;T, Alloc&lt;T&gt;&gt;; <span class="comment">// type-id is vector&lt;T, Alloc&lt;T&gt;&gt;</span></div><div class="line"></div><div class="line">Vec&lt;<span class="keyword">int</span>&gt; v; <span class="comment">// Vec&lt;int&gt; is the same as vector&lt;int, Alloc&lt;int&gt;&gt;</span></div></pre></td></tr></table></figure><h2 id="布尔类型">布尔类型</h2><p>C在C99标准之前没有内置布尔类型，因此只能通过<code>typedef int bool</code>的方式模拟；C99及以后在C语言中引入了布尔类型，其关键字是<code>_Bool</code>. 如果想要像C++那样使用布尔类型的话，包含头文件<code>stdbool.h</code>.</p><p>C++自带布尔类型，关键字是<code>bool</code>.</p><h2 id="数组">数组</h2><p>就定长数组（编译期可确定其长度）而言，C和C++毫无区别。而C99引入了变长数组(<a href="https://en.wikipedia.org/wiki/Variable-length_array" target="_blank" rel="external">Variadic Length Array</a>, VLA)之后，一切就变得不一样了。</p><p>就行为上来说，VLA相当于自动帮你使用了<code>malloc</code>和<code>free</code>, 只是开辟的空间在栈上罢了。同时对数组引入了新的语法（一般用在函数声明的参数列表里面），来描述新引入的VLA. 比如<code>int[*]</code>代表这是一个<code>int</code>的VLA, <code>int[static 10]</code>代表这是一个至少有10个<code>int</code>的VLA(该语法有利于优化).</p><p>C++中没有VLA, 如果一定要长度可变的数组那么使用<code>std::vector</code>; 要封装原生数组使用C++11引入的<code>std::array</code>.</p><h2 id="泛型">泛型</h2><p>这里的泛型是针对C11引入的<code>_Generic</code>的直译。</p><p>在C11之前，我们无法在C语言中写一个针对所有数据类型都可用的算法（比如针对任何类型的数组都可用的排序函数），所能做的只有全部转换成<code>void*</code>然后提供一个自定义的处理函数，通过这样拐弯抹角的方式来实现泛型。一个典型的例子就是<code>stdlib.h</code>里的<code>qsort</code>, 其原型定义如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void qsort( void *ptr, size_t count, size_t size,</div><div class="line">            int (*comp)(const void *, const void *) );</div></pre></td></tr></table></figure><p>在C11中提供了<code>_Generic</code>的功能，它能根据传入参数的类型来决定对应的操作。如下就是一个<code>_Generic</code>的例子，可以根据传入的参数到底是<code>long double</code>还是<code>float</code>来决定调用的函数到底是<code>cbrtl</code>还是<code>cbrtf</code>. 如果提供的类型无一满足，那么会使用<code>default</code>条目定义的规则。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> cbrt(X) _Generic((X), \</span></div><div class="line">                         long double: cbrtl, \</div><div class="line">                         default: cbrt, \</div><div class="line">                         float: cbrtf \</div><div class="line">                        )(X)</div></pre></td></tr></table></figure><p>在C++中，语言自带的重载和模板特性就不知道比C高到哪里去了，虽然会有<a href="https://en.wikipedia.org/wiki/Name_mangling" target="_blank" rel="external">Name Mangling</a>使ABI不稳定这种副作用。</p><h2 id="struct">struct</h2><p>在C中，<code>struct</code>只能内含数据类型，不能包有函数和<code>static</code>成员。但C99之后也有一些C++没有的特性，比如<a href="https://en.wikipedia.org/wiki/Flexible_array_member" target="_blank" rel="external">Flexible array member</a>（其实这个特性在进标准之前就有很多类似手法了），<a href="http://en.cppreference.com/w/c/language/compound_literal" target="_blank" rel="external">compound literal</a>和<a href="http://en.cppreference.com/w/c/language/struct_initialization" target="_blank" rel="external">designated initialization</a>（这两个不光可用于<code>struct</code>）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">test</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">char</span> c;</div><div class="line">&#125; test;</div><div class="line"><span class="comment">// compound literal</span></div><div class="line">test t1 = (test)&#123;<span class="number">0</span>, <span class="string">'0'</span>&#125;;</div><div class="line"><span class="comment">// designated initialization</span></div><div class="line">test t2 = &#123;.c = <span class="string">'0'</span>, .i = <span class="number">0</span>&#125;;</div></pre></td></tr></table></figure><p>这种缺乏导致C不能很方便地写出很“面向对象”的代码。成员函数和<a href="https://en.wikipedia.org/wiki/Virtual_method_table" target="_blank" rel="external">vtable</a>可以手动添加<code>struct</code>的函数指针成员来实现，<a href="http://stackoverflow.com/a/351745" target="_blank" rel="external">假装自己有OOP的样子</a>；而OOP中的继承特性就不太好写了。方法、成员的继承可以通过复制粘贴来实现，但基类可以指向子类，虚函数这些语义怎么办呢？</p><p>为了保持与C的兼容，C++让<a href="http://en.cppreference.com/w/cpp/concept/PODType" target="_blank" rel="external">简单的</a><code>struct</code>, <code>class</code>, <code>union</code>保持C风格，让它们能够与C传统的<code>malloc</code>, <code>memmove</code>等函数交互。</p><p>此外，在C中<code>struct</code>, <code>union</code>, <code>enum</code>的类型名称和变量名、函数名等等是区别对待的，即使二者重名也是可以的。因此<code>typedef struct tag tag</code>这样的语句很有必要，如果不写那么声明一个<code>tag</code>结构体一定要使用<code>struct tag var</code>而不是<code>tag var</code>. 在C++中你可以认为是自动插入了这样的<code>typedef</code>语句。</p><h2 id="空指针">空指针</h2><p>C语言中，任何类型的两个空指针值相等。宏定义<code>NULL</code>的值具体取决于实现。C99中规定<code>NULL</code>应该是从整数类型的<code>0</code>显式或隐式地转换而来。</p><p>C++出于兼容C的考虑保留了<code>NULL</code>, 其内容可能是：</p><ul><li>整数类型的右值(rvalue)常量表达式，该值为0 (C++11之前)</li><li>整数类型的纯右值(prvalue)常量表达式，该值为0; 或是<code>std::nullptr_t</code>类型的纯右值 (C++11到C++14)</li><li>值为0的整型字面值，或是或是<code>std::nullptr_t</code>类型的纯右值 (C++14起)</li></ul><p>C++引入新的关键字<code>nullptr</code>来代表空指针，来解决之前<code>0</code>同时具有整数0和空指针语义的问题。例如如下的程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">F</span>, <span class="title">class</span> <span class="title">A</span>&gt;</span></div><div class="line"><span class="title">void</span> <span class="title">Fwd</span>(<span class="title">F</span> <span class="title">f</span>, <span class="title">A</span> <span class="title">a</span>)</div><div class="line">&#123;</div><div class="line">    f(a);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span>* i)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Function g called\n"</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    g(<span class="literal">NULL</span>);           <span class="comment">// Fine</span></div><div class="line">    g(<span class="number">0</span>);              <span class="comment">// Fine</span></div><div class="line"> </div><div class="line">    Fwd(g, <span class="literal">nullptr</span>);   <span class="comment">// Fine</span></div><div class="line"><span class="comment">//  Fwd(g, NULL);  // ERROR: No function g(int)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在上面的程序中，<code>Fwd(g,NULL)</code>并不是如想象中一般地调用了<code>g(int*)</code>，反而去寻找<code>g(int)</code>的重载。使用<code>nullptr</code>就不会出现这样的问题。</p><p>二者<code>NULL</code>最原始的宏定义都在<code>stddef.h</code>(或<code>cstddef</code>)里。</p><h2 id="类型转换">类型转换</h2><p>C支持隐式和显式的两种转换，隐式的由编译器自动完成，显式的只有<code>(type)expression</code>这一种方式。</p><p>C++兼容C的类型转换方式，但它引入了对象机制后更加复杂。首先为了与C兼容保留了上面的转换方式，同时引入了等价的<code>type(expression)</code>方式。除此之外，还存在<code>static_cast</code>, <code>const_cast</code>, <code>dynamic_cast</code>, <code>reinterpret_cast</code>这四种。从理论上来说，<code>(type) expression</code>和<code>type(expression)</code>都是以上几种<code>XXXX_cast</code>的组合。在C++中，类型转换推荐使用<code>XXXX_cast</code>的形式。</p><p>由于C++里面的构造函数和自定义转换函数，隐式转换可能会发生在各种意想不到的地方。关于类型转换的知识十分繁杂，具体详见<a href="http://en.cppreference.com/w/cpp/language/implicit_cast" target="_blank" rel="external">C++隐式类型转换</a>、<a href="http://en.cppreference.com/w/c/language/conversion" target="_blank" rel="external">C隐式类型转换</a>。</p><h2 id="指针和内存管理">指针和内存管理</h2><p>这部分主要就是体现出C++强于C的地方了。涉及到动态内存管理，大家都只能向操作系统申请空间，到时候都得释放，但是C++能够玩出花来。利用类封装加上<a href="https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization" target="_blank" rel="external">RAII</a>机制，C++标准库实现了智能指针，一个是基于引用计数的<a href="http://en.cppreference.com/w/cpp/memory/shared_ptr" target="_blank" rel="external"><code>shared_ptr</code></a>, 另一个是独享资源所有权的<a href="http://en.cppreference.com/w/cpp/memory/unique_ptr" target="_blank" rel="external"><code>unique_ptr</code></a>, 利用这两样工具，基本能摆脱手动<code>delete</code>的烦恼。</p><h2 id="异常处理">异常处理</h2><p>C语言没有什么方便的异常处理机制，一般是在每个可能出异常的地方套上个if-else, 异常来临时<code>exit</code>, 申请的资源通过在<code>atexit</code>注册的函数来处理。或者使用<code>setjmp</code>和<code>longjmp</code>.</p><p>在C++中有现在满地都是的 try-catch 流，使用这个的时候需要时刻留心，保证代码的异常安全性。同时，在异常发生时使用原生指针管理的内存如果不在catch块处理那么内存就这么泄露了。</p><h2 id="参考资料">参考资料</h2><p>auto部分：</p><ol><li><p><a href="http://en.cppreference.com/w/cpp/language/auto" target="_blank" rel="external">http://en.cppreference.com/w/cpp/language/auto</a></p></li><li><p><a href="http://en.cppreference.com/w/cpp/keyword" target="_blank" rel="external">http://en.cppreference.com/w/cpp/keyword</a></p></li></ol><p>类型别名部分：</p><ol><li><p><a href="http://en.cppreference.com/w/cpp/language/typedef" target="_blank" rel="external">http://en.cppreference.com/w/cpp/language/typedef</a></p></li><li><p><a href="http://en.cppreference.com/w/c/language/typedef" target="_blank" rel="external">http://en.cppreference.com/w/c/language/typedef</a></p></li><li><p><a href="http://en.cppreference.com/w/cpp/language/type_alias" target="_blank" rel="external">http://en.cppreference.com/w/cpp/language/type_alias</a></p></li></ol><p>布尔类型部分：</p><ol><li><a href="https://en.wikipedia.org/wiki/C99" target="_blank" rel="external">https://en.wikipedia.org/wiki/C99</a></li></ol><p>泛型部分：</p><ol><li><a href="http://en.cppreference.com/w/c/language/generic" target="_blank" rel="external">http://en.cppreference.com/w/c/language/generic</a></li></ol><p>空指针部分：</p><ol><li><p><a href="https://en.wikipedia.org/wiki/Null_pointer" target="_blank" rel="external">https://en.wikipedia.org/wiki/Null_pointer</a></p></li><li><p><a href="http://en.cppreference.com/w/cpp/language/nullptr" target="_blank" rel="external">http://en.cppreference.com/w/cpp/language/nullptr</a></p></li><li><p><a href="http://en.cppreference.com/w/cpp/types/NULL" target="_blank" rel="external">http://en.cppreference.com/w/cpp/types/NULL</a></p></li></ol><p>类型转换部分：</p><ol><li><a href="http://stackoverflow.com/a/332086" target="_blank" rel="external">http://stackoverflow.com/a/332086</a></li></ol>]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 8 String to Integer(atoi)]]></title>
      <url>/2015-12-06-Leetcode-8-String-to-Integer-atoi.html</url>
      <content type="html"><![CDATA[<p>一个不难但是坑的题的题解——《论健壮性》</p><a id="more"></a><p>题目如下：</p><blockquote><p>Implement atoi to convert a string to an integer.</p><p><strong>Hint</strong>: Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p><p><strong>Notes</strong>: It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p></blockquote><hr><p>本题让我们实现标准库<code>stdlib.h</code>里的<code>atoi</code>函数。</p><p>收录这个题的解法并不是因为它有多么难，而是给大家展示一下要满足算法健壮性是多么地不容易。</p><p>首先，由于我以前写过一个简单版本的<code>atoi</code>, 因此第一版轻车熟路地就出来了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sign=<span class="number">1</span>,l=<span class="built_in">strlen</span>(str),res=<span class="number">0</span>;    <span class="comment">//使用l记录长度然后用 i&lt;l 能够比使用 s[i]!='\0' 要快</span></div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>]==<span class="string">'-'</span>)</div><div class="line">        sign=<span class="number">-1</span>,i=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(;i&lt;l;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="string">'0'</span>&lt;=str[i]&amp;&amp;str[i]&lt;=<span class="string">'9'</span>)&#123;</div><div class="line">            res*=<span class="number">10</span>;</div><div class="line">            res+=str[i]-<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sign*res;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在这个版本里，考虑了各种因素：首位的符号可能是数字也可能是负号；<code>str</code>字符串里一些可能的乱七八糟非数字的字符，这种情况下我们只处理前面合法的数字部分。我信心满满地提交了，然后它告诉我：</p><p><code>myAtoi(&quot;+1&quot;)==1</code></p><p>…于是修改成了这个版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sign=<span class="number">1</span>,l=<span class="built_in">strlen</span>(str),res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">switch</span>(str[<span class="number">0</span>])&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:sign=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:i=<span class="number">1</span>;<span class="keyword">break</span>;    <span class="comment">//无论str[0]是'+'还是'-' i都是1,就让case穿透吧，我少写一句</span></div><div class="line">        <span class="keyword">default</span>:<span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(;i&lt;l;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="string">'0'</span>&lt;=str[i]&amp;&amp;str[i]&lt;=<span class="string">'9'</span>)&#123;</div><div class="line">            res*=<span class="number">10</span>;</div><div class="line">            res+=str[i]-<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sign*res;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后它告诉我：</p><p><code>myAtoi(&quot; 123&quot;)==123</code></p><p>我之后做了个测试，发现数字之后的空格视为非法字符，比如<code>myAtoi(&quot; 1 2 3 &quot;)==1</code>. ……于是修改成了这个版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sign=<span class="number">1</span>,l=<span class="built_in">strlen</span>(str),res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">switch</span>(str[<span class="number">0</span>])&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:sign=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:i=<span class="number">1</span>;<span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">' '</span>:</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l<span class="number">-1</span>;i++)&#123;</div><div class="line">                <span class="keyword">if</span>(str[i+<span class="number">1</span>]!=<span class="string">' '</span>)</div><div class="line">                    <span class="keyword">return</span> myAtoi(str+i+<span class="number">1</span>);    <span class="comment">//跳过开头所有的空格，然后递归处理</span></div><div class="line">            &#125;</div><div class="line">        <span class="keyword">default</span>:<span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(;i&lt;l;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="string">'0'</span>&lt;=str[i]&amp;&amp;str[i]&lt;=<span class="string">'9'</span>)&#123;</div><div class="line">            res*=<span class="number">10</span>;</div><div class="line">            res+=str[i]-<span class="string">'0'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sign*res;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后它告诉我：</p><p><code>myAtoi(&quot;2147483648&quot;)==2147483647</code></p><p>也就是说，如果正数溢出返回<code>INT_MAX</code>; 负数溢出返回<code>INT_MIN</code>.</p><p>………于是改成了下面这个最终版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAtoi</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sign=<span class="number">1</span>,l=<span class="built_in">strlen</span>(str),res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</div><div class="line">    <span class="keyword">switch</span>(str[<span class="number">0</span>])&#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'-'</span>:sign=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'+'</span>:i=<span class="number">1</span>;<span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">' '</span>:</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;l<span class="number">-1</span>;i++)&#123;</div><div class="line">                <span class="keyword">if</span>(str[i+<span class="number">1</span>]!=<span class="string">' '</span>)</div><div class="line">                    <span class="keyword">return</span> myAtoi(str+i+<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">default</span>:<span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(;i&lt;l;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="string">'0'</span>&lt;=str[i]&amp;&amp;str[i]&lt;=<span class="string">'9'</span>)&#123;</div><div class="line">            <span class="comment">/* In case that res*=10 overflows */</span></div><div class="line">            <span class="keyword">if</span>(res&gt;INT_MAX/<span class="number">10</span>&amp;&amp;res&gt;<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> sign==<span class="number">1</span>?INT_MAX:INT_MIN;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                res*=<span class="number">10</span>;</div><div class="line">            <span class="comment">/* In case that res+=str[i]-'0' overflows */</span></div><div class="line">            <span class="keyword">int</span> digit=str[i]-<span class="string">'0'</span>;<span class="comment">//避免反复计算str[i]-'0'</span></div><div class="line">            <span class="keyword">if</span>(res&gt;INT_MAX-digit&amp;&amp;res&gt;<span class="number">0</span>)</div><div class="line">                <span class="keyword">return</span> sign==<span class="number">1</span>?INT_MAX:INT_MIN;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                res+=digit;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sign*res;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后，提交，判断——终于通过了，不容易啊。</p>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 102 Binary Tree Level Order Traversal]]></title>
      <url>/2015-12-05-Leetcode-102-Binary-Tree-Level-Order-Traversal.html</url>
      <content type="html"><![CDATA[<p>Leetcode 102 的题解</p><a id="more"></a><p>题目如下：</p><blockquote><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example: Given binary tree <code>{3,9,20,#,#,15,7}</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  3</div><div class="line"> / \</div><div class="line">9  20</div><div class="line">  /  \</div><div class="line"> 15   7</div></pre></td></tr></table></figure>return its level order traversal as:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [3],</div><div class="line">  [9,20],</div><div class="line">  [15,7]</div><div class="line">]</div></pre></td></tr></table></figure></blockquote><hr><p>由于C语言写出来更加复杂，需要开辟动态数组存放结果，所以我选用了C++, 因为它有<code>std::vector</code>.</p><p>如果只是涉及到树的层次遍历，那我还是会的；但本题不光涉及到层次遍历，还要在输出里面包含“层次”的信息，这就有点麻烦了。刚开始，我想到的是设计一个计数变量<code>i</code>, 如果$2^{n-1}-1 \lt i \le 2^n-1$, 那么就位于第$n$层（尽管不一定是满二叉树，但让<code>i</code>把空指针数也记录进去就可以了），但这样显然把问题弄得更复杂了。</p><p>后来，考虑到层次遍历入队的时候，当前层的节点数等于队列中的节点数，那么这个问题就好办了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 树节点是这样的：</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">vector</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">queue</span>;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; levelOrder(TreeNode* root) &#123;</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;<span class="built_in">queue</span>&lt;TreeNode*&gt; q;</div><div class="line">        <span class="keyword">if</span>(root==<span class="literal">NULL</span>)</div><div class="line">            <span class="keyword">return</span> res;</div><div class="line">        q.push(root);</div><div class="line">        <span class="keyword">while</span>(!q.empty())&#123;</div><div class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lvl;<span class="keyword">int</span> size=q.size();</div><div class="line">            <span class="keyword">for</span>(;size&gt;<span class="number">0</span>;size--)&#123;</div><div class="line">                root=q.front();</div><div class="line">                lvl.push_back(root-&gt;val);</div><div class="line">                q.pop();</div><div class="line">                <span class="keyword">if</span>(root-&gt;left!=<span class="literal">NULL</span>)</div><div class="line">                    q.push(root-&gt;left);</div><div class="line">                <span class="keyword">if</span>(root-&gt;right!=<span class="literal">NULL</span>)</div><div class="line">                    q.push(root-&gt;right);</div><div class="line">            &#125;</div><div class="line">            res.push_back(lvl);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>Over.</p>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 26 Remove Duplicates from Sorted Array]]></title>
      <url>/2015-12-05-Leetcode-26-Remove-Duplicates-from-Sorted-Array.html</url>
      <content type="html"><![CDATA[<p>Leetcode 26 的题解</p><a id="more"></a><p>题目如下：</p><blockquote><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.</p><p>Do not allocate extra space for another array, you must do this in place with constant memory.</p><p>For example, Given input array <code>nums = [1,1,2]</code>,</p><p>Your function should return <code>length = 2</code>, with the first two elements of nums being 1 and 2 respectively. It doesn’t matter what you leave beyond the new length.</p></blockquote><hr><p>最直接的做法是（如果能忽略掉不允许额外空间的题目要求的话）将每个独一无二的元素放入新数组中，然后将这些元素放回：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(numsSize&lt;=<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> numsSize;</div><div class="line">    <span class="keyword">int</span> unique[numsSize];</div><div class="line">    unique[<span class="number">0</span>]=nums[<span class="number">0</span>];</div><div class="line">    <span class="keyword">int</span> index=<span class="number">1</span>;    <span class="comment">//表示下标，但同时我们也发现它表示unique数组的有效长度</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(nums[index]==nums[i])</div><div class="line">            contiune;</div><div class="line">        unique[index++]=nums[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)</div><div class="line">        nums[i]=unique[i];</div><div class="line">    <span class="keyword">return</span> index;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>虽然这是个时间$O(n)$的算法，但我们同时也用了$O(n)$的空间。能不能不使用额外空间？</p><p>考虑到独一无二的元素个数总是不多于总元素个数，因此我们在<code>nums</code>里循环遍历的时候，把<code>nums</code>的前半部分当做这里的<code>unique</code>数组是可行的。修改如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(numsSize &lt;= <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> numsSize;</div><div class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;              <span class="comment">//表示下标，但同时也表示有效长度</span></div><div class="line">    <span class="keyword">int</span> temp = nums[<span class="number">0</span>] - <span class="number">1</span>;     <span class="comment">//为保证nums[0]不被跳过处理</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numsSize ; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(temp == nums[i])&#123;</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        temp = nums[i];</div><div class="line">        nums[index++] = nums[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> index;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>于是，我们满足了题目的要求，未使用额外空间。</p>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[位运算技巧]]></title>
      <url>/2015-12-04-%E4%BD%8D%E8%BF%90%E7%AE%97%E6%8A%80%E5%B7%A7.html</url>
      <content type="html"><![CDATA[<p><strong>深坑待填！</strong></p><p>本文翻译自<a href="https://graphics.stanford.edu/~seander/bithacks.html" target="_blank" rel="external">这篇文章</a>，原作者Sean Eron Anderson. 如果有翻译错误的地方，欢迎指正。另外，由于年代久远，文中给出的链接可能已经失效。</p><p>UPDATE 2016/09/30: 继续翻译，并改进已翻译文本</p><a id="more"></a><h2 id="开头语">开头语</h2><p>本文所有代码片段皆属公有（除非特别指明）——您想怎么用就怎么用。所有的文本皆属Sean Eron Anderson版权所有（1997-2005）。本着希望帮助他人的想法，我将代码及其解释公之于众，但若要这些代码用于特定目的，请记住我并未明显或隐含地保证其可用和适用性。截止于2005年五月5日，所有代码均经过了完整的测试，并经上千人阅览。此外，卡内基·梅隆大学计算机学院院长<a href="http://www-2.cs.cmu.edu/~bryant/" target="_blank" rel="external">Randal Bryant教授</a>使用他的轮子<a href="http://www-2.cs.cmu.edu/~uclid/" target="_blank" rel="external">uclid代码测试系统</a>进行了测试，测试内容几乎涵盖了所有方面。他没有覆盖到的情况，我已经在32位机器上针对所有可能输入补充测试了一遍。<strong>对于第一个找到我代码里正当bug的人，我将给予他10美元的奖金（通过支票或PayPal）。如果将这笔钱转交慈善机构的话，增至20美元。</strong></p><h2 id="关于操作统计的说明">关于操作统计的说明</h2><p>统计本文算法中操作数量的时候，所有C语言运算符皆看做是一次操作。不涉及写入内存的中间过程，不在统计范围内。当然，这种统计方式只能是对真实的机器指令和CPU时间的一个近似。在此假定所有的操作耗费相同的时间。这虽然与真实情况不符，但的确是CPU发展努力的方向。一个代码样本在不同系统上运行时间会有很多细微的差别，可能是缓存大小、内存带宽、指令集等等因素造成的。总之，拿去跑一跑是确定方法之间快慢的最好方法，所以在实际机器上测试的时候，我所说的仅供参考。</p><h2 id="获取一个整数的正负号">获取一个整数的正负号</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> v;        <span class="comment">//我们想知道v的符号</span></div><div class="line"><span class="keyword">int</span> sign;     <span class="comment">//用来存放结果</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CHAR_BIT 代表一字节(byte)是多少位(bit)（一般是8）</span></div><div class="line">sign = -(v &lt; <span class="number">0</span>);  <span class="comment">//如果v&lt;0，得到-1，否则是0</span></div><div class="line"><span class="comment">// 或者，为了避免在用标记寄存器的CPU (IA32) 上使用转移指令：</span></div><div class="line">sign = -(<span class="keyword">int</span>)((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">int</span>)v) &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>));</div><div class="line"><span class="comment">// 或者，这样可以少一个机器指令（但牺牲了可移植性）：</span></div><div class="line">sign = v &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>);</div></pre></td></tr></table></figure><p>最后一个表达式，对于32位整数求得<code>sign = v &gt;&gt; 31</code>，这比直接求法<code>sign = -(v &lt; 0)</code>少了一个操作。该方法之所以可行，是因为当我们把有符号整数向右移位时，最左边一位的值被复制到了其他位上。对一个有符号整数来说，最左边一位是1表示是负数，其他情况是0；所有位上全是1代表<code>-1</code>. 可惜的是，上述行为是与架构相关的。（译注：带符号数负数的左移在C99标准中属于未定义行为）</p><p>另外，如果你希望<code>sign</code>的结果是<code>1</code>或<code>-1</code>的话：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sign = +<span class="number">1</span> | (v &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>));  <span class="comment">// v &lt; 0得到 -1, 其余情况是 +1</span></div></pre></td></tr></table></figure><p>其次，你希望结果是<code>-1</code>, <code>0</code>或<code>1</code>的话：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sign = (v != <span class="number">0</span>) | -(<span class="keyword">int</span>)((<span class="keyword">unsigned</span> <span class="keyword">int</span>)((<span class="keyword">int</span>)v) &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>));</div><div class="line"><span class="comment">// 或者使用速度更快但移植性差的：</span></div><div class="line">sign = (v != <span class="number">0</span>) | (v &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>));  <span class="comment">// -1, 0, or +1</span></div><div class="line"><span class="comment">// 或者使用可移植的，简洁的，（也许）更快的：</span></div><div class="line">sign = (v &gt; <span class="number">0</span>) - (v &lt; <span class="number">0</span>); <span class="comment">// -1, 0, or +1</span></div></pre></td></tr></table></figure><p>此外，如果你想知道一个数是不是非负的，返回结果是<code>+1</code>或者<code>0</code>, 使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sign = <span class="number">1</span> ^ ((<span class="keyword">unsigned</span> <span class="keyword">int</span>)v &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>)); <span class="comment">// v &lt; 0得到0, 其余是1</span></div></pre></td></tr></table></figure><p>作者注：</p><ul><li>2003年3月7日，Angus Duggan指出1989 ANSI C标准规定有符号整型的右移运算结果取决于具体实现，因此在某些系统上靠右移的方法可能失效。</li><li>为了使代码可移植性更好，2005年9月28日，Toby Speight建议我使用 CHAR_BIT 而不是指定一个字节8位长。2006年3月4日，Angus推荐了上面的使用了类型转换的方法，它可移植性更好。</li><li>2009年9月12日，Rohit Garg给出了检测非负数的方法。</li></ul><h2 id="检测两个整数是否异号">检测两个整数是否异号</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x, y;               <span class="comment">// 待检测的两个数</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> f = ((x ^ y) &lt; <span class="number">0</span>); <span class="comment">// 当且仅当x与y符号相反的时候为真</span></div></pre></td></tr></table></figure><p>作者注：</p><ul><li>2009年11月26日的时候Manfred Weis建议我加上这个条目。</li></ul><h2 id="不利用分支来计算整数的绝对值">不利用分支来计算整数的绝对值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> v;           <span class="comment">// 我们现在要求v的绝对值</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> r;  <span class="comment">// 输出结果</span></div><div class="line"><span class="keyword">int</span> <span class="keyword">const</span> mask = v &gt;&gt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>;</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = (v + mask) ^ mask;</div></pre></td></tr></table></figure><p>另一个专利所有的变体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = (v ^ mask) - mask;</div></pre></td></tr></table></figure><p>某些CPU没有绝对值指令（或者编译器未能使用到它）。在分支指令开销很大的机器上，上面的表达式能够比直接求法<code>r = (v &lt; 0) ? -(unsigned)v : v</code>快很多，尽管操作的数量一样。</p><p>作者注：</p><ul><li>2003年3月7日，Angus Duggan指出1989 ANSI C标准规定有符号整型的右移运算结果取决于具体实现，因此在某些系统上靠右移的方法可能失效。我拜读了ANSI C, 其中并没有要求将数值表示为补码，所以说这也可能是方法失效的原因（在那些逐渐退出历史舞台的老爷机上仍然采用反码表示）。</li><li>2004年3月14日，Keith H. Duggar告诉了我上面的变体，比我刚开始想出来的那个<code>r=(+1|(v&gt;&gt;(sizeof(int)*CHAR_BIT-1)))*v</code>要好，因为少用了个乘法。不幸的是，那个方法于2000年6月6日由Vladimir Yu Volkonsky在美国申请了专利，归属于Sun Microsystems.</li><li>2006年8月13日，Yuriy Kaminskiy告诉我专利可能失效因为在专利申请之前它就已经被发布出去了，比如早在1996年11月9日Agner Fog就已经发表的<a href="http://www.goof.com/pcg/doc/pentopt.txt" target="_blank" rel="external">How to Optimize for the Pentium Processor</a>. Yuriy还告诉我那篇文档在1997年翻译成了俄文，而Vladimir可能读过。此外，互联网档案也有个指向它的<a href="http://web.archive.org/web/19961201174141/www.x86.org/ftp/articles/pentopt/PENTOPT.TXT" target="_blank" rel="external">旧链接</a>。</li><li>2007年1月30日，Peter Kankowski对我分享了他受Microsoft Visual C++编译器输出启发而想到的<a href="http://smallcode.weblogs.us/2007/01/31/microsoft-probably-uses-the-abs-function-patented-by-sun/" target="_blank" rel="external">绝对值版本</a>。该方法被拿来作为本题的主要解决方案。</li><li>2007年12月6日，Hai Jin抱怨说结果是有符号的，所以计算大多数负数绝对值的时候结果还是负的。</li><li>2008年4月15日，Andrew Shapira指出那个直接求法可能会溢出，因为缺少一个<code>(unsigned)</code>的类型转换。为了尽可能满足移植性要求，他给我的改进求法是<code>(v &lt; 0) ? (1 + ((unsigned)(-1-v))) : (unsigned)v</code>.</li><li>2008年7月9日，Vincent Lefèvre引用ISO C99标准说服了我，让把上面那个删掉，因为即使不是使用补码的机器<code>-(unsigned)v</code>也能得到正确的结果。计算<code>-(unsigned)v</code>的时候，首先加上<code>2**N</code>来将负值<code>v</code>转化成无符号值，得到<code>v</code>的补码表示（记做<code>U</code>）。然后，取<code>U</code>的相反数，得到结果：<code>-U = 0 - U = 2**N - U = 2**N - (v + 2**N) = -v = abs(v)</code>.</li></ul><p>译注：2**N 表示 $2^N$.</p><h2 id="不利用分支来计算两个整数的最大-max-最小-min-值">不利用分支来计算两个整数的最大(max)最小(min)值</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x;</div><div class="line"><span class="keyword">int</span> y;  <span class="comment">// 我们要计算x, y的最大最小值</span></div><div class="line"><span class="keyword">int</span> r;  <span class="comment">// 存放结果</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = y ^ ((x ^ y) &amp; -(x &lt; y)); <span class="comment">// min(x, y)</span></div></pre></td></tr></table></figure><p>这个世界上还有使用条件分支非常耗费时间的老爷机，而且没有条件移动指令。在这些机器上上面的方法可能会比直接求法<code>r = (x &lt; y) ? x : y</code>要快，尽管位运算解法涉及了两个以上的指令（虽然一般说来，直接解法是最好的）。 解法证明如下：如果<code>x &lt; y</code>, 那么<code>-(x &lt; y)</code>的各二进制位就全是1, 所以<code>r = y ^ ((x ^ y) &amp; -(x &lt; y)) = y ^ ((x ^ y) &amp; ~0 = y ^ x ^ y = x</code>. 另外，如果<code>x &gt;= y</code>, 那么<code>-(x &lt; y)</code>就全是0, 所以<code>r = y ^ ((x ^ y) &amp; 0) = y</code>. 在某些机器上，计算<code>(x &lt; y)</code>要得到0或1的话需要分支指令，因此该解法不具备任何优势。</p><p>求最大值的话，使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = x ^ ((x ^ y) &amp; -(x &lt; y)); <span class="comment">// max(x, y)</span></div></pre></td></tr></table></figure><h3 id="快而脏的解法">快而脏的解法</h3><p>如果你知道<code>INT_MIN &lt;= x - y &lt;= INT_MAX</code>的话，那你就可以用下面这种解法，由于它只需要计算一次<code>(x - y)</code>所以会快一点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">r = y + ((x - y) &amp; ((x - y) &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>))); <span class="comment">// min(x, y)</span></div><div class="line">r = x - ((x - y) &amp; ((x - y) &gt;&gt; (<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * CHAR_BIT - <span class="number">1</span>))); <span class="comment">// max(x, y)</span></div></pre></td></tr></table></figure><p>由于1989 ANSI C未规定有符号数右移的结果，所以该解法不可移植。如果溢出时抛出异常，那么减法时<code>x</code>与<code>y</code>的值就是无符号型或者被转换成无符号型来防止不必要的异常抛出。然而这里右移运算需要一个有符号的操作数，使得右移负数时填充1，所以这里转换成有符号整型。</p><p>作者注：</p><ul><li>2003年3月7日，Angus Duggan指出右移的可移植性问题。</li><li>2005年5月3日，Randal E. Bryant警告我说需要一个<code>INT_MIN &lt;= x - y &lt;= INT_MAX</code>的前提条件，并给出了一个慢而脏的修改版本。以上只在这个快而脏的解法里考虑了。</li><li>2005年7月6日，Nigel Horspoon观察到在奔腾上，由于gcc对<code>(x &lt; y)</code>的求值问题，它生成了和直接解法一样的代码。</li><li>2008年7月9日，Vincent Lefèvre指出<code>r = y + ((x - y) &amp; -(x &lt; y))</code>里的减法有潜在的溢出风险(这是我前一版的代码)。</li><li>2009年6月2日，Timothy B. Terriberry建议我使用异或而不是加减来避免溢出的危险。</li></ul><h2 id="检测一个数是不是2的次幂">检测一个数是不是2的次幂</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v; <span class="comment">// 要检测的数是v</span></div><div class="line"><span class="keyword">bool</span> f;         <span class="comment">// 存放结果</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f = (v &amp; (v - <span class="number">1</span>)) == <span class="number">0</span>;</div></pre></td></tr></table></figure><p>注意<code>0</code>并不是2的多少次幂，因此做如下修改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f = v &amp;&amp; !(v &amp; (v - <span class="number">1</span>));</div></pre></td></tr></table></figure><h2 id="符号扩展">符号扩展</h2><h3 id="从给定位宽扩展">从给定位宽扩展</h3><p>符号扩展对于内建类型来说是自动的，比如从<code>char</code>到<code>int</code>. 但是，假设你有一个以<code>b</code>位补码表示的有符号整数<code>x</code>, 你想把<code>x</code>转换成<code>int</code>型的，此时存储空间大于<code>b</code>位。只是简单地复制的话，当<code>x</code>是正数的时候还可以，是负数的时候就不对了，必须进行符号扩展。例如，假设我们只用4位来存储数字，那么<code>-3</code>表示成二进制就是<code>1101</code>. 如果用8位来存，那么就是<code>11111101</code>. 当扩展一个负数的时候需要将扩展的高位全赋为1， 这就是符号扩展。在C语言里，符号扩展就是小事一桩，因为可以在<code>struct</code>或<code>union</code>里使用位域。例如，要将5位长整数扩展到<code>int</code>型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> x; <span class="comment">// 将它从5位长转换到int</span></div><div class="line"><span class="keyword">int</span> r; <span class="comment">// 存放结果</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span><span class="keyword">signed</span> <span class="keyword">int</span> x:<span class="number">5</span>;&#125; s;</div><div class="line">r = s.x = x;</div></pre></td></tr></table></figure><p>下面是一个使用了相同语言特性的C++模板函数，仅用一个操作，就能从b位长扩展（尽管编译器生成的肯定不止这么点）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">unsigned</span> B&gt;</div><div class="line"><span class="function"><span class="keyword">inline</span> T <span class="title">signextend</span><span class="params">(<span class="keyword">const</span> T x)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span>T x:B;&#125; s;</div><div class="line">  <span class="keyword">return</span> s.x = x;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> r = signextend&lt;<span class="keyword">signed</span> <span class="keyword">int</span>,<span class="number">5</span>&gt;(x);  <span class="comment">// 从5位长的x扩展到int型的r</span></div></pre></td></tr></table></figure><p>作者注：</p><ul><li>2005年5月2日，John Byrd发现了代码里一处拼写错误（都是HTML的锅）。</li><li>2006年3月4日，Pat Wood指出ANSI C标准要求位域需要关键字<code>signed</code>来表示有符号数，否则其符号未定义。</li></ul><h3 id="从不定长位宽扩展">从不定长位宽扩展</h3><p>有时我们需要扩展的数并不知道它的位长<code>b</code>. 或者我们用的是一门没有位域特性的语言，比如 Java.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> b; <span class="comment">// 表示x的位长</span></div><div class="line"><span class="keyword">int</span> x;      <span class="comment">// 扩展这个b位长的数x</span></div><div class="line"><span class="keyword">int</span> r;      <span class="comment">// 存放结果</span></div><div class="line"><span class="keyword">int</span> <span class="keyword">const</span> m = <span class="number">1U</span> &lt;&lt; (b - <span class="number">1</span>); <span class="comment">// 如果给出b的话，位掩码可以提前算出来</span></div><div class="line"></div><div class="line">x = x &amp; ((<span class="number">1U</span> &lt;&lt; b) - <span class="number">1</span>);  <span class="comment">// 如果x的b位以上已经是0的话，跳过这一步</span></div><div class="line">r = (x ^ m) - m;</div></pre></td></tr></table></figure><p>上面的代码需要四次操作，但如果位宽给定的话，我们就只需要两个高效率的操作（假设高位已经全是0）。</p><p>一个牺牲了可移植性的稍快点的方法如下，这种方法并不要求<code>x</code>的<code>b</code>位以上的数字是0:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> <span class="keyword">const</span> m = CHAR_BIT * <span class="keyword">sizeof</span>(x) - b;</div><div class="line">r = (x &lt;&lt; m) &gt;&gt; m;</div></pre></td></tr></table></figure><p>作者注：</p><ul><li>2004年6月13日，Sean A. Irvine希望我能在本页加上这些符号扩展的方法。他给了我最初的版本<code>m = (1 &lt;&lt; (b - 1)) - 1; r = -(x &amp; ~m) | x</code>, 后来被我优化成了<code>m = 1U &lt;&lt; (b - 1); r = -(x &amp; m) | x</code>.</li><li>然而2007年5月11日，Shay Green给了我上面解法里的版本，比我的还少一次操作。</li><li>2008年10月15日，Vipin Sharma给我改进建议，考虑到了<code>x</code>的高位可能有<code>1</code>的情况。</li><li>2009年12月31日，Chris Pirazzi, 建议我加上下面要讲的那种解法。</li></ul><h3 id="从不定长位宽扩展-3次操作">从不定长位宽扩展，3次操作</h3><p>下面讲的这个解法可能在某些机器上较慢，因为它需要乘除法。该版本需要4次操作。如果你知道位宽<code>b</code>比1大，请使用<code>r = (x * multipliers[b]) / multipliers[b]</code>完成这种类型的符号扩展，它仅需3次操作，一次查表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> b; <span class="comment">// 表示x的位长</span></div><div class="line"><span class="keyword">int</span> x;      <span class="comment">// 扩展这个b位长的数x</span></div><div class="line"><span class="keyword">int</span> r;      <span class="comment">// 存放结果</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M(B) (1U &lt;&lt; ((sizeof(x) * CHAR_BIT) - B)) <span class="comment">// CHAR_BIT=bits/byte</span></span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">const</span> multipliers[] = </div><div class="line">&#123;</div><div class="line">  <span class="number">0</span>,     M(<span class="number">1</span>),  M(<span class="number">2</span>),  M(<span class="number">3</span>),  M(<span class="number">4</span>),  M(<span class="number">5</span>),  M(<span class="number">6</span>),  M(<span class="number">7</span>),</div><div class="line">  M(<span class="number">8</span>),  M(<span class="number">9</span>),  M(<span class="number">10</span>), M(<span class="number">11</span>), M(<span class="number">12</span>), M(<span class="number">13</span>), M(<span class="number">14</span>), M(<span class="number">15</span>),</div><div class="line">  M(<span class="number">16</span>), M(<span class="number">17</span>), M(<span class="number">18</span>), M(<span class="number">19</span>), M(<span class="number">20</span>), M(<span class="number">21</span>), M(<span class="number">22</span>), M(<span class="number">23</span>),</div><div class="line">  M(<span class="number">24</span>), M(<span class="number">25</span>), M(<span class="number">26</span>), M(<span class="number">27</span>), M(<span class="number">28</span>), M(<span class="number">29</span>), M(<span class="number">30</span>), M(<span class="number">31</span>),</div><div class="line">  M(<span class="number">32</span>)</div><div class="line">&#125;; <span class="comment">// (如果大于64位，继续添加)</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> <span class="keyword">const</span> divisors[] = </div><div class="line">&#123;</div><div class="line">  <span class="number">1</span>,    ~M(<span class="number">1</span>),  M(<span class="number">2</span>),  M(<span class="number">3</span>),  M(<span class="number">4</span>),  M(<span class="number">5</span>),  M(<span class="number">6</span>),  M(<span class="number">7</span>),</div><div class="line">  M(<span class="number">8</span>),  M(<span class="number">9</span>),  M(<span class="number">10</span>), M(<span class="number">11</span>), M(<span class="number">12</span>), M(<span class="number">13</span>), M(<span class="number">14</span>), M(<span class="number">15</span>),</div><div class="line">  M(<span class="number">16</span>), M(<span class="number">17</span>), M(<span class="number">18</span>), M(<span class="number">19</span>), M(<span class="number">20</span>), M(<span class="number">21</span>), M(<span class="number">22</span>), M(<span class="number">23</span>),</div><div class="line">  M(<span class="number">24</span>), M(<span class="number">25</span>), M(<span class="number">26</span>), M(<span class="number">27</span>), M(<span class="number">28</span>), M(<span class="number">29</span>), M(<span class="number">30</span>), M(<span class="number">31</span>),</div><div class="line">  M(<span class="number">32</span>)</div><div class="line">&#125;; <span class="comment">// (同上)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">undef</span> M</span></div><div class="line"></div><div class="line">r = (x * multipliers[b]) / divisors[b];</div></pre></td></tr></table></figure><p>下面的这个变体并不可移植，但在使用算数右移的架构上，能保留符号，应该能快一点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> s = -b; <span class="comment">// 或者:  sizeof(x) * CHAR_BIT - b;</span></div><div class="line">r = (x &lt;&lt; s) &gt;&gt; s;</div></pre></td></tr></table></figure><p>作者注：</p><ul><li>2005年5月3日Randal E. Bryant发现了早期版本里的一个bug(把<code>multipliers[]</code>用作了<code>divisors[]</code>)，导致了当<code>x=1,b=1</code>的时候出错。</li></ul><h2 id="选择性地置位清零-不利用分支">选择性地置位清零，不利用分支</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> f;         <span class="comment">// 表示条件</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> m; <span class="comment">// 位掩码</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> w; <span class="comment">// 待修改的输入：if (f) w |= m; else w &amp;= ~m;</span></div><div class="line"></div><div class="line">w ^= (-f ^ w) &amp; m;</div><div class="line"></div><div class="line"><span class="comment">// 或，针对超标量CPU架构：</span></div><div class="line">w = (w &amp; ~m) | (-f &amp; m);</div></pre></td></tr></table></figure><p>作者注：</p><ul><li>在某些架构上，没有条件分支要强于使用多两倍的操作数量来计算分支。例如，据非正式测试显示，在AMD Athlon™ XP 2100+上能快上5-10%. Intel Core 2 Duo运行超标量版比普通版快了约16%.</li><li>2003年12月11日，Glenn Slayden告诉了我第一个版本。</li><li>2007年4月3日，Marco Yu告诉了我超标量版并于两天后指出了两个拼写错误。</li></ul><h2 id="选择性地取负-不利用分支">选择性地取负，不利用分支</h2><p>如果你希望仅当条件为假的时候取负，下面是不涉及条件分支的版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> fDontNegate;  <span class="comment">// 标识我们什么时候不对v取反</span></div><div class="line"><span class="keyword">int</span> v;             <span class="comment">// 待操作的数v</span></div><div class="line"><span class="keyword">int</span> r;             <span class="comment">// result = fDontNegate ? v : -v;</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = (fDontNegate ^ (fDontNegate - <span class="number">1</span>)) * v;</div></pre></td></tr></table></figure><p>如果你希望当条件为真时操作：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool</span> fNegate;  <span class="comment">// 标识我们什么时候对v取反</span></div><div class="line"><span class="keyword">int</span> v;         <span class="comment">// 待操作的数v</span></div><div class="line"><span class="keyword">int</span> r;         <span class="comment">// result = fNegate ? -v : v;</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = (v ^ -fNegate) + fNegate;</div></pre></td></tr></table></figure><p>作者注：</p><ul><li>2009年6月2日，Avraham Plotnitzky建议我加上第一个版本。</li><li>我又想避免使用乘法，因此在2009年6月8日想出了第二个版本。</li><li>2009年11月26日，Alfonso De Gregorio指出我丢了几个括号，并收到了bug奖励。</li></ul><h2 id="根据掩码合并两个数">根据掩码合并两个数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a;    <span class="comment">// 合并未屏蔽位</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> b;    <span class="comment">// 合并屏蔽位</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> mask; <span class="comment">// 1表示要合并b的对应位; 0针对a.</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> r;    <span class="comment">// (a &amp; ~mask) | (b &amp; mask) 的结果</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r = a ^ ((a ^ b) &amp; mask);</div></pre></td></tr></table></figure><p>相比合并两个数的直接解法，我的比它少了一个操作。如果掩码是常量的话，这种方法不占任何优势。</p><p>作者注：</p><ul><li>2006年2月9日，Ron Jeffery给了我这个。</li></ul><h2 id="统计数位中1的个数">统计数位中1的个数</h2><h3 id="简单粗暴的解法">简单粗暴的解法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v; <span class="comment">// 待统计的数</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> c; <span class="comment">// 用来累加计数</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (c = <span class="number">0</span>; v; v &gt;&gt;= <span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">  c += v &amp; <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种解法每一位一次循环，直到没有<code>1</code>. 所以对一个只有最高位是<code>1</code>的32位数来说，它会循环32次。</p><h3 id="查表法">查表法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> BitsSetTable256[<span class="number">256</span>] = </div><div class="line">&#123;</div><div class="line">#   define B2(n) n,     n+<span class="number">1</span>,     n+<span class="number">1</span>,     n+<span class="number">2</span></div><div class="line">#   define B4(n) B2(n), B2(n+<span class="number">1</span>), B2(n+<span class="number">1</span>), B2(n+<span class="number">2</span>)</div><div class="line">#   define B6(n) B4(n), B4(n+<span class="number">1</span>), B4(n+<span class="number">1</span>), B4(n+<span class="number">2</span>)</div><div class="line">    B6(<span class="number">0</span>), B6(<span class="number">1</span>), B6(<span class="number">1</span>), B6(<span class="number">2</span>)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v; <span class="comment">// 待统计的数</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> c; <span class="comment">// 统计1的个数</span></div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">c = BitsSetTable256[v &amp; <span class="number">0xff</span>] + </div><div class="line">    BitsSetTable256[(v &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>] + </div><div class="line">    BitsSetTable256[(v &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] + </div><div class="line">    BitsSetTable256[v &gt;&gt; <span class="number">24</span>];</div></pre></td></tr></table></figure><p>或者:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> * p = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) &amp;v;</div><div class="line">c = BitsSetTable256[p[<span class="number">0</span>]] + </div><div class="line">    BitsSetTable256[p[<span class="number">1</span>]] + </div><div class="line">    BitsSetTable256[p[<span class="number">2</span>]] +</div><div class="line">    BitsSetTable256[p[<span class="number">3</span>]];</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 用算法来初始化数组</span></div><div class="line">BitsSetTable256[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</div><div class="line">&#123;</div><div class="line">  BitsSetTable256[i] = (i &amp; <span class="number">1</span>) + BitsSetTable256[i / <span class="number">2</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>作者注：</p><ul><li>2009年7月14日Hallvard Furuseth建议我使用宏来生成表。</li></ul><h3 id="brian-kernighan的方法">Brian Kernighan的方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> c;</div><div class="line"><span class="keyword">for</span> (c = <span class="number">0</span>; v; c++)</div><div class="line">&#123;</div><div class="line">  v &amp;= v - <span class="number">1</span>; <span class="comment">// 清除最低非0位</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种方法的循环次数和<code>1</code>的个数一样多。所以如果有一个只有最高位是<code>1</code>的数，只会循环一次。</p><p>作者注：</p><ul><li>该方法发表于1988, <em>the C Programming Language 2nd Ed</em> (作者Brian W. Kernighan和Dennis M. Ritchie). 书中练习2-9提到了这种方法。</li><li>2006年4月19日，Don Knuth指出这种方法是由Peter Wegner在 <em>CACM 3</em> (1960), 322第一次发表。（同时也由Derrick Lehmer指出该方法在1964年Beckenbach编过的一本书里发表过。）</li></ul><h3 id="针对14-24-或32位长数字-使用64位指令集">针对14, 24, 或32位长数字，使用64位指令集</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> c;</div><div class="line"></div><div class="line"><span class="comment">// 针对至多14位长的v:</span></div><div class="line">c = (v * <span class="number">0x200040008001</span>ULL &amp; <span class="number">0x111111111111111</span>ULL) % <span class="number">0xf</span>;</div><div class="line"></div><div class="line"><span class="comment">// 针对至多24位长的v:</span></div><div class="line">c =  ((v &amp; <span class="number">0xfff</span>) * <span class="number">0x1001001001001</span>ULL &amp; <span class="number">0x84210842108421</span>ULL) % <span class="number">0x1f</span>;</div><div class="line">c += (((v &amp; <span class="number">0xfff000</span>) &gt;&gt; <span class="number">12</span>) * <span class="number">0x1001001001001</span>ULL &amp; <span class="number">0x84210842108421</span>ULL) </div><div class="line">     % <span class="number">0x1f</span>;</div><div class="line"></div><div class="line"><span class="comment">// 针对至多32位长的v:</span></div><div class="line">c =  ((v &amp; <span class="number">0xfff</span>) * <span class="number">0x1001001001001</span>ULL &amp; <span class="number">0x84210842108421</span>ULL) % <span class="number">0x1f</span>;</div><div class="line">c += (((v &amp; <span class="number">0xfff000</span>) &gt;&gt; <span class="number">12</span>) * <span class="number">0x1001001001001</span>ULL &amp; <span class="number">0x84210842108421</span>ULL) % </div><div class="line">     <span class="number">0x1f</span>;</div><div class="line">c += ((v &gt;&gt; <span class="number">24</span>) * <span class="number">0x1001001001001</span>ULL &amp; <span class="number">0x84210842108421</span>ULL) % <span class="number">0x1f</span>;</div></pre></td></tr></table></figure><p>该方法需要能快速求余的64位CPU才能高效率。14位长的只需要3次操作；24位的需要10次；32位15次。</p><p>作者注：</p><ul><li>Rich Schroeppel最初原创了针对9位的求法，类似于我这里的14位的方法；详见<a href="http://www.inwap.com/pdp10/hbaker/hakmem/hakmem.html" target="_blank" rel="external">Beeler, M., Gosper, R. W., and Schroeppel, R. HAKMEM. MIT AI Memo 239, Feb. 29, 1972.</a>的Programming Hacks部分。它启发了Sean Anderson(译注：作者自己), 并想出了上面的几种方法。</li><li>2005年5月3日，Randal E. Bryant找出了一堆bug.</li><li>2007年2月1日，Bruce Dawson对12位方法做了微调，使之变成了现在的14位版本。</li></ul><h3 id="并行方法">并行方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v; <span class="comment">// 要统计v(32位数值)</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> c; <span class="comment">// 存放结果</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> S[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>&#125;; <span class="comment">// 二进制魔法数字</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> B[] = &#123;<span class="number">0x55555555</span>, <span class="number">0x33333333</span>, <span class="number">0x0F0F0F0F</span>, <span class="number">0x00FF00FF</span>, <span class="number">0x0000FFFF</span>&#125;;</div><div class="line"></div><div class="line">c = v - ((v &gt;&gt; <span class="number">1</span>) &amp; B[<span class="number">0</span>]);</div><div class="line">c = ((c &gt;&gt; S[<span class="number">1</span>]) &amp; B[<span class="number">1</span>]) + (c &amp; B[<span class="number">1</span>]);</div><div class="line">c = ((c &gt;&gt; S[<span class="number">2</span>]) + c) &amp; B[<span class="number">2</span>];</div><div class="line">c = ((c &gt;&gt; S[<span class="number">3</span>]) + c) &amp; B[<span class="number">3</span>];</div><div class="line">c = ((c &gt;&gt; S[<span class="number">4</span>]) + c) &amp; B[<span class="number">4</span>];</div></pre></td></tr></table></figure><p>数组<code>B</code>表示为二进制，就是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">B[0] = 0x55555555 = 01010101 01010101 01010101 01010101</div><div class="line">B[1] = 0x33333333 = 00110011 00110011 00110011 00110011</div><div class="line">B[2] = 0x0F0F0F0F = 00001111 00001111 00001111 00001111</div><div class="line">B[3] = 0x00FF00FF = 00000000 11111111 00000000 11111111</div><div class="line">B[4] = 0x0000FFFF = 00000000 00000000 11111111 11111111</div></pre></td></tr></table></figure><p>对于大点的数据，我们可以延长魔法数字<code>B</code>和<code>S</code>来适配。如果数字有<code>k</code>位，数组<code>S</code>和<code>B</code>就应该有$\lceil \lg(k) \rceil$个元素，而且我们要写出关于<code>c</code>的同样多个数的表达式。对于一个32位长的<code>v</code>, 进行了16次操作。</p><p>对于一个32位整数<code>v</code>的最佳解法是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">v = v - ((v &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);                    <span class="comment">// 用v来存储中间值</span></div><div class="line">v = (v &amp; <span class="number">0x33333333</span>) + ((v &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);     <span class="comment">// 同上</span></div><div class="line">c = ((v + (v &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF0F0F0F</span>) * <span class="number">0x1010101</span>) &gt;&gt; <span class="number">24</span>; <span class="comment">// 计数</span></div></pre></td></tr></table></figure><p>该解法只用了12次操作，与查表法的相同，并避免使用额外内存和缓存未命中表的情况。该解法混合了上面并行法和更前面的使用乘法的解法（使用64位指令集的那个解法），然而它并没有用到64位指令集。统计在并行部分完成，计数求和由乘以<code>0x1010101</code>并右移24位完成。</p><p>一个最佳通用解法如下，它最多支持到128位（参数化表示为<code>T</code>）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">v = v - ((v &gt;&gt; <span class="number">1</span>) &amp; (T)~(T)<span class="number">0</span>/<span class="number">3</span>);                           <span class="comment">// 中间值</span></div><div class="line">v = (v &amp; (T)~(T)<span class="number">0</span>/<span class="number">15</span>*<span class="number">3</span>) + ((v &gt;&gt; <span class="number">2</span>) &amp; (T)~(T)<span class="number">0</span>/<span class="number">15</span>*<span class="number">3</span>);      <span class="comment">// 同上</span></div><div class="line">v = (v + (v &gt;&gt; <span class="number">4</span>)) &amp; (T)~(T)<span class="number">0</span>/<span class="number">255</span>*<span class="number">15</span>;                      <span class="comment">// 同上</span></div><div class="line">c = (T)(v * ((T)~(T)<span class="number">0</span>/<span class="number">255</span>)) &gt;&gt; (<span class="keyword">sizeof</span>(T) - <span class="number">1</span>) * CHAR_BIT; <span class="comment">// 计数</span></div></pre></td></tr></table></figure><p>作者注：</p><ul><li>更多信息见Ian Ashdown的<a href="http://groups.google.com/groups?q=reverse+bits&amp;num=100&amp;hl=en&amp;group=comp.graphics.algorithms&amp;imgsafe=off&amp;safe=off&amp;rnum=2&amp;ic=1&amp;selm=4fulhm%248dn%40atlas.uniserve.com" target="_blank" rel="external">贴子</a>。</li><li>最佳解法是2005年10月5日由Andrew Shapira告诉我的；他在<a href="http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/25112.PDF" target="_blank" rel="external">Software Optimization Guide for AMD Athlon™ 64 and Opteron™ Processors</a>的187-188页找到了它。</li><li>2005年12月14日Charlie Gordon给了我一个能优化掉一次操作的建议。</li><li>2005年12月30日Don Clugston从中整理出了三种方法。</li><li>我接受了建议后又犯了几个拼写错误，于2006年1月8日由Eric Cole指出。此后，他给了上面那个通用解法的建议。</li><li>2007年4月5日，Al Williams告知我在最开始的方法里有一句冗余代码。</li></ul><h3 id="从最高位到指定位">从最高位到指定位</h3><p>下面给出求从最高位到指定位<code>1</code>的个数（rank）的解法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">uint64_t</span> v;       <span class="comment">// 待计算的数v</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> pos; <span class="comment">// 指定的位置</span></div><div class="line"><span class="keyword">uint64_t</span> r;       <span class="comment">// 存放结果</span></div><div class="line"></div><div class="line"><span class="comment">// 将给定位置以下的数字删除.</span></div><div class="line">r = v &gt;&gt; (<span class="keyword">sizeof</span>(v) * CHAR_BIT - pos);</div><div class="line"><span class="comment">// 并行计算</span></div><div class="line"><span class="comment">// r = (r &amp; 0x5555...) + ((r &gt;&gt; 1) &amp; 0x5555...);</span></div><div class="line">r = r - ((r &gt;&gt; <span class="number">1</span>) &amp; ~<span class="number">0U</span>L/<span class="number">3</span>);</div><div class="line"><span class="comment">// r = (r &amp; 0x3333...) + ((r &gt;&gt; 2) &amp; 0x3333...);</span></div><div class="line">r = (r &amp; ~<span class="number">0U</span>L/<span class="number">5</span>) + ((r &gt;&gt; <span class="number">2</span>) &amp; ~<span class="number">0U</span>L/<span class="number">5</span>);</div><div class="line"><span class="comment">// r = (r &amp; 0x0f0f...) + ((r &gt;&gt; 4) &amp; 0x0f0f...);</span></div><div class="line">r = (r + (r &gt;&gt; <span class="number">4</span>)) &amp; ~<span class="number">0U</span>L/<span class="number">17</span>;</div><div class="line"><span class="comment">// r = r % 255;</span></div><div class="line">r = (r * (~<span class="number">0U</span>L/<span class="number">255</span>)) &gt;&gt; ((<span class="keyword">sizeof</span>(v) - <span class="number">1</span>) * CHAR_BIT);</div></pre></td></tr></table></figure><p>作者注：</p><ul><li>2009年11月21日，Juha Järvi给了我这个下面问题的镜像问题。</li></ul><h3 id="已知rank求出位数">已知rank求出位数</h3><p>下面的64位代码计算出从左至右第<code>r</code>个<code>1</code>. 也就是说，从最高位向右统计1的个数，直到得到rank<code>r</code>, 返回对应的这个位。如果给出的rank超出了范围，返回<code>64</code>. 代码可以针对32位或者从左往右计算做出修改。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">uint64_t</span> v;          <span class="comment">// 待计算的数v</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> r;      <span class="comment">// 输入rank, 范围是1~64.</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> s;      <span class="comment">// 输出rank对应的位数</span></div><div class="line"><span class="keyword">uint64_t</span> a, b, c, d; <span class="comment">// 中间变量</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> t;      <span class="comment">// 位数统计</span></div><div class="line"></div><div class="line"><span class="comment">// 对64位整数做并行处理，中间结果都存储起来</span></div><div class="line"><span class="comment">// a = (v &amp; 0x5555...) + ((v &gt;&gt; 1) &amp; 0x5555...);</span></div><div class="line">a =  v - ((v &gt;&gt; <span class="number">1</span>) &amp; ~<span class="number">0U</span>L/<span class="number">3</span>);</div><div class="line"><span class="comment">// b = (a &amp; 0x3333...) + ((a &gt;&gt; 2) &amp; 0x3333...);</span></div><div class="line">b = (a &amp; ~<span class="number">0U</span>L/<span class="number">5</span>) + ((a &gt;&gt; <span class="number">2</span>) &amp; ~<span class="number">0U</span>L/<span class="number">5</span>);</div><div class="line"><span class="comment">// c = (b &amp; 0x0f0f...) + ((b &gt;&gt; 4) &amp; 0x0f0f...);</span></div><div class="line">c = (b + (b &gt;&gt; <span class="number">4</span>)) &amp; ~<span class="number">0U</span>L/<span class="number">0x11</span>;</div><div class="line"><span class="comment">// d = (c &amp; 0x00ff...) + ((c &gt;&gt; 8) &amp; 0x00ff...);</span></div><div class="line">d = (c + (c &gt;&gt; <span class="number">8</span>)) &amp; ~<span class="number">0U</span>L/<span class="number">0x101</span>;</div><div class="line">t = (d &gt;&gt; <span class="number">32</span>) + (d &gt;&gt; <span class="number">48</span>);</div><div class="line"><span class="comment">// 开始不使用条件分支的计算</span></div><div class="line">s  = <span class="number">64</span>;</div><div class="line"><span class="comment">// if (r &gt; t) &#123;s -= 32; r -= t;&#125;</span></div><div class="line">s -= ((t - r) &amp; <span class="number">256</span>) &gt;&gt; <span class="number">3</span>; r -= (t &amp; ((t - r) &gt;&gt; <span class="number">8</span>));</div><div class="line">t  = (d &gt;&gt; (s - <span class="number">16</span>)) &amp; <span class="number">0xff</span>;</div><div class="line"><span class="comment">// if (r &gt; t) &#123;s -= 16; r -= t;&#125;</span></div><div class="line">s -= ((t - r) &amp; <span class="number">256</span>) &gt;&gt; <span class="number">4</span>; r -= (t &amp; ((t - r) &gt;&gt; <span class="number">8</span>));</div><div class="line">t  = (c &gt;&gt; (s - <span class="number">8</span>)) &amp; <span class="number">0xf</span>;</div><div class="line"><span class="comment">// if (r &gt; t) &#123;s -= 8; r -= t;&#125;</span></div><div class="line">s -= ((t - r) &amp; <span class="number">256</span>) &gt;&gt; <span class="number">5</span>; r -= (t &amp; ((t - r) &gt;&gt; <span class="number">8</span>));</div><div class="line">t  = (b &gt;&gt; (s - <span class="number">4</span>)) &amp; <span class="number">0x7</span>;</div><div class="line"><span class="comment">// if (r &gt; t) &#123;s -= 4; r -= t;&#125;</span></div><div class="line">s -= ((t - r) &amp; <span class="number">256</span>) &gt;&gt; <span class="number">6</span>; r -= (t &amp; ((t - r) &gt;&gt; <span class="number">8</span>));</div><div class="line">t  = (a &gt;&gt; (s - <span class="number">2</span>)) &amp; <span class="number">0x3</span>;</div><div class="line"><span class="comment">// if (r &gt; t) &#123;s -= 2; r -= t;&#125;</span></div><div class="line">s -= ((t - r) &amp; <span class="number">256</span>) &gt;&gt; <span class="number">7</span>; r -= (t &amp; ((t - r) &gt;&gt; <span class="number">8</span>));</div><div class="line">t  = (v &gt;&gt; (s - <span class="number">1</span>)) &amp; <span class="number">0x1</span>;</div><div class="line"><span class="comment">// if (r &gt; t) s--;</span></div><div class="line">s -= ((t - r) &amp; <span class="number">256</span>) &gt;&gt; <span class="number">8</span>;</div><div class="line">s = <span class="number">65</span> - s;</div></pre></td></tr></table></figure><p>如果分支在你的CPU上速度很快的话，取消使用注释里的条件语句进行替换。</p><h2 id="奇偶校验">奇偶校验</h2><p>译注：信息是以比特流的方式传输的，类似<code>01000001</code>. 在传输过程中，有可能会发生错误，比如，我们存储了<code>01000001</code>，但是取出来却是<code>01000000</code>，即低位由0变成了1。为了检测到这种错误，我们可以通过“奇偶校验”来实现。假如，我们存储的数据是一个字节，8个比特位，那我们就可以计算每个字节比特位是<code>1</code>的个数，如果是偶数个<code>1</code>，那么，我们就把第九个位设为<code>1</code>，如果是奇数个<code>1</code>，那么就把第九个位设为<code>0</code>，这样连续9个字节比特位为<code>1</code>的位数肯定是奇数。这种方法叫做“奇校验”，“偶校验”和此类似。当然，在实际应用中，也可以把一个字节的前7位作为数据位，最后一个为作为校验位。</p><h3 id="简单粗暴的解法-v2">简单粗暴的解法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v;       <span class="comment">// 待检验的数v</span></div><div class="line"><span class="keyword">bool</span> parity = <span class="literal">false</span>;  <span class="comment">// 存放结果，奇数个为true</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> (v)</div><div class="line">&#123;</div><div class="line">  parity = !parity;</div><div class="line">  v = v &amp; (v - <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该解法使用了类似于前述Brian Kernigan解法的思路，消耗时间与二进制<code>1</code>的数量成正比。</p><h3 id="查表法-v2">查表法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">bool</span> ParityTable256[<span class="number">256</span>] = </div><div class="line">&#123;</div><div class="line">#   define P2(n) n, n^<span class="number">1</span>, n^<span class="number">1</span>, n</div><div class="line">#   define P4(n) P2(n), P2(n^<span class="number">1</span>), P2(n^<span class="number">1</span>), P2(n)</div><div class="line">#   define P6(n) P4(n), P4(n^<span class="number">1</span>), P4(n^<span class="number">1</span>), P4(n)</div><div class="line">    P6(<span class="number">0</span>), P6(<span class="number">1</span>), P6(<span class="number">1</span>), P6(<span class="number">0</span>)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b;  <span class="comment">// 待计算的数b</span></div><div class="line"><span class="keyword">bool</span> parity = ParityTable256[b];</div><div class="line"></div><div class="line"><span class="comment">// 针对32位长的数：</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v;</div><div class="line">v ^= v &gt;&gt; <span class="number">16</span>;</div><div class="line">v ^= v &gt;&gt; <span class="number">8</span>;</div><div class="line"><span class="keyword">bool</span> parity = ParityTable256[v &amp; <span class="number">0xff</span>];</div><div class="line"></div><div class="line"><span class="comment">// 变体：</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> * p = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) &amp;v;</div><div class="line">parity = ParityTable256[p[<span class="number">0</span>] ^ p[<span class="number">1</span>] ^ p[<span class="number">2</span>] ^ p[<span class="number">3</span>]];</div></pre></td></tr></table></figure><p>作者注：</p><ul><li>2005年5月3日Randal E. Bryant支持我加上那个很直接的解法（最后那个变体）。</li><li>2005年9月27日，Bruce Rawles找到了几个表名的拼写错误，并因此收到了$10的找bug奖金。</li><li>2006年10月9日，Fabrice Bellard给了我上面的32位长的版本，它只需一次查表，原来的版本需要4次查表，更慢。</li><li>2009年7月14日Hallvard Furuseth建议我使用宏来生成表。</li></ul><h3 id="使用64位指令集的乘法和求余">使用64位指令集的乘法和求余</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b;  <span class="comment">// 待计算的数b</span></div><div class="line"><span class="keyword">bool</span> parity = (((b * <span class="number">0x0101010101010101</span>ULL) &amp; <span class="number">0x8040201008040201</span>ULL) % <span class="number">0x1FF</span>) &amp; <span class="number">1</span>;</div></pre></td></tr></table></figure><p>上面的方法大概需要4次操作，但只对整字节有效。</p><h3 id="使用一次乘法">使用一次乘法</h3><p>以下方法能仅用8次操作处理一个32位长的数值，而且只用了一次乘法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v; <span class="comment">// 32-bit word</span></div><div class="line">v ^= v &gt;&gt; <span class="number">1</span>;</div><div class="line">v ^= v &gt;&gt; <span class="number">2</span>;</div><div class="line">v = (v &amp; <span class="number">0x11111111</span>U) * <span class="number">0x11111111</span>U;</div><div class="line"><span class="keyword">return</span> (v &gt;&gt; <span class="number">28</span>) &amp; <span class="number">1</span>;</div></pre></td></tr></table></figure><p>对于64位长的，8次操作也足够：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> v; <span class="comment">// 64-bit word</span></div><div class="line">v ^= v &gt;&gt; <span class="number">1</span>;</div><div class="line">v ^= v &gt;&gt; <span class="number">2</span>;</div><div class="line">v = (v &amp; <span class="number">0x1111111111111111</span>UL) * <span class="number">0x1111111111111111</span>UL;</div><div class="line"><span class="keyword">return</span> (v &gt;&gt; <span class="number">60</span>) &amp; <span class="number">1</span>;</div></pre></td></tr></table></figure><p>作者注：</p><ul><li>Andrew Shapira想出了这个方法并于2007年9月2日给了我。</li></ul><h3 id="并行法">并行法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v;</div><div class="line">v ^= v &gt;&gt; <span class="number">16</span>;</div><div class="line">v ^= v &gt;&gt; <span class="number">8</span>;</div><div class="line">v ^= v &gt;&gt; <span class="number">4</span>;</div><div class="line">v &amp;= <span class="number">0xf</span>;</div><div class="line"><span class="keyword">return</span> (<span class="number">0x6996</span> &gt;&gt; v) &amp; <span class="number">1</span>;</div></pre></td></tr></table></figure><p>以上方法需要大概9次操作，对32位的有效。对于整字节也可以删掉<code>unsigned int v</code>后面的两行来优化到只用5次操作。该方法首先使用移位和异或对v的每段（每段8bit）进行处理，异或后只取后4个bit, 然后二进制数<code>0110 1001 1001 0110</code>(16进制是<code>0x6996</code>)右移这么多位。这就好像是拿<code>v</code>的后四位去小型的16位奇偶表里去查。<code>v</code>的奇偶结果以二进制<code>1</code>的形式保存并返回。</p><p>作者注：</p><ul><li>感谢Mathew Hendry于2002年12月15日告诉我的移位-查表方法。优化后能少两次操作并且只用了移位和异或。</li></ul><h2 id="交换两个数的值">交换两个数的值</h2><h3 id="使用加减法">使用加减法</h3><p>译注：不要把右值往<code>a</code>, <code>b</code>里代入。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SWAP(a, b) ((&amp;(a) == &amp;(b)) || \</span></div><div class="line">                    (((a) -= (b)), ((b) += (a)), ((a) = (b) - (a))))</div></pre></td></tr></table></figure><p>该方法能不使用额外的临时变量来交换<code>a</code>和<code>b</code>的值。开始的那句是检查<code>a</code>与<code>b</code>是否使用了同一块内存空间，是的话那么该方法结果就不对了（编译器可能会把这个检查优化掉）。如果你开启了溢出异常检测，那么要传递无符号值以避免触发异常。下面的异或方法在某些机器上可能会快一点。不要对浮点数也这么操作，除非你操作的是它们的二进制值。</p><p>作者注：</p><ul><li>2007年6月12日Sanjeev Sivasankaran建议我加上这一条。</li><li>2008年7月9日Vincent Lefèvre指出它有潜在的溢出风险。</li></ul><h3 id="使用异或">使用异或</h3><p>译注：同上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SWAP(a, b) (((a) ^= (b)), ((b) ^= (a)), ((a) ^= (b)))</span></div></pre></td></tr></table></figure><p>这是一种很古老的，不使用额外临时变量的交换技巧。</p><p>作者注：</p><ul><li>2005年1月20日，Iain A. Fleming指出该方法当作用于同一内存空间的时候失效，比如我当<code>i==j</code>的时候<code>SWAP(a[i], a[j])</code>. 所以为避免这种情况的发生，把宏定义改成<code>(((a) == (b)) || (((a) ^= (b)), ((b) ^= (a)), ((a) ^= (b))))</code>.</li><li>2009年7月14日，Hallvard Furuseth告诉我说，在某些机器上<code>(((a) ^ (b)) &amp;&amp; ((b) ^= (a) ^= (b), (a) ^= (b)))</code>会更快一点，因为<code>(a) ^ (b)</code>的值能重复利用。</li></ul><h3 id="交换指定的某几个二进制位">交换指定的某几个二进制位</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> i, j; <span class="comment">// 给定位置</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> n;    <span class="comment">// 想交换多少位</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> b;    <span class="comment">// 被交换数b</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> r;    <span class="comment">// 交换结果</span></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> x = ((b &gt;&gt; i) ^ (b &gt;&gt; j)) &amp; ((<span class="number">1U</span> &lt;&lt; n) - <span class="number">1</span>); <span class="comment">// 中间变量</span></div><div class="line">r = b ^ ((x &lt;&lt; i) | (x &lt;&lt; j));</div></pre></td></tr></table></figure><p>举个例子，假如我们有个数<code>b = 00101111</code>(二进制表示)，我们想把它里面从<code>i = 1</code>开始的连续<code>n = 3</code>位与从<code>j = 5</code>开始的连续<code>n</code>位交换，其结果应该是<code>r = 11100011</code>(二进制表示)。</p><p>该方法的思路与异或法相似。<code>x</code>用于保存我们想要交换的那几位，然后这几位的值被赋值为它们自己与<code>x</code>的异或结果。当然，如果序列超出范围其结果未定义。</p><p>作者注：</p><ul><li>2009年7月14日，Hallvard Furuseth建议我把<code>1 &lt;&lt; n</code>改成<code>1U &lt;&lt; n</code>来强行赋值为无符号型来避免对意外地有符号数移位。</li></ul><h2 id="倒置二进制位">倒置二进制位</h2><h3 id="直接解法">直接解法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v;     <span class="comment">// 待处理的数v</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> r = v; <span class="comment">// r存放结果</span></div><div class="line"><span class="keyword">int</span> s = <span class="keyword">sizeof</span>(v) * CHAR_BIT - <span class="number">1</span>; <span class="comment">// 最后一步的额外处理</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (v &gt;&gt;= <span class="number">1</span>; v; v &gt;&gt;= <span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">  r &lt;&lt;= <span class="number">1</span>;</div><div class="line">  r |= v &amp; <span class="number">1</span>;</div><div class="line">  s--;</div><div class="line">&#125;</div><div class="line">r &lt;&lt;= s; <span class="comment">// 当v的最高位是0的时候移位</span></div></pre></td></tr></table></figure><p>作者注：</p><ul><li>2004年10月15日，Michael Hoisie指出最初版本有一个bug.</li><li>2005年5月3日Randal E. Bryant建议我删掉一个冗余操作。2005年5月18日Behdad Esfabod给了我一个小建议，它能减少一次循环。</li><li>2007年2月6日，Liyong Zhou给了我点建议，使得循环只在<code>v</code>不是0的时候运行，而不是对每一位都循环一次。</li></ul><h3 id="查表法-v3">查表法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> BitReverseTable256[<span class="number">256</span>] = </div><div class="line">&#123;</div><div class="line">#   define R2(n)     n,     n + <span class="number">2</span>*<span class="number">64</span>,     n + <span class="number">1</span>*<span class="number">64</span>,     n + <span class="number">3</span>*<span class="number">64</span></div><div class="line">#   define R4(n) R2(n), R2(n + <span class="number">2</span>*<span class="number">16</span>), R2(n + <span class="number">1</span>*<span class="number">16</span>), R2(n + <span class="number">3</span>*<span class="number">16</span>)</div><div class="line">#   define R6(n) R4(n), R4(n + <span class="number">2</span>*<span class="number">4</span> ), R4(n + <span class="number">1</span>*<span class="number">4</span> ), R4(n + <span class="number">3</span>*<span class="number">4</span> )</div><div class="line">    R6(<span class="number">0</span>), R6(<span class="number">2</span>), R6(<span class="number">1</span>), R6(<span class="number">3</span>)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v; <span class="comment">// 32位值，每次倒置8位</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> c; <span class="comment">// v倒置的结果</span></div><div class="line"></div><div class="line"><span class="comment">// Option 1:</span></div><div class="line">c = (BitReverseTable256[v &amp; <span class="number">0xff</span>] &lt;&lt; <span class="number">24</span>) | </div><div class="line">    (BitReverseTable256[(v &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>] &lt;&lt; <span class="number">16</span>) | </div><div class="line">    (BitReverseTable256[(v &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] &lt;&lt; <span class="number">8</span>) |</div><div class="line">    (BitReverseTable256[(v &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>]);</div><div class="line"></div><div class="line"><span class="comment">// Option 2:</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> * p = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) &amp;v;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> * q = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) &amp;c;</div><div class="line">q[<span class="number">3</span>] = BitReverseTable256[p[<span class="number">0</span>]]; </div><div class="line">q[<span class="number">2</span>] = BitReverseTable256[p[<span class="number">1</span>]]; </div><div class="line">q[<span class="number">1</span>] = BitReverseTable256[p[<span class="number">2</span>]]; </div><div class="line">q[<span class="number">0</span>] = BitReverseTable256[p[<span class="number">3</span>]];</div></pre></td></tr></table></figure><p>第一个方法要用17次操作，第二种需要12次，如果你的CPU能够快速读取和存储数据的话。</p><p>作者注：</p><ul><li>2009年7月14日Hallvard Furuseth建议我使用宏来生成表。</li></ul><h3 id="倒置一比特-仅用3次操作-使用64位的乘法和求余">倒置一比特，仅用3次操作（使用64位的乘法和求余）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b; <span class="comment">// reverse this (8-bit) byte</span></div><div class="line"> </div><div class="line">b = (b * <span class="number">0x0202020202</span>ULL &amp; <span class="number">0x010884422010</span>ULL) % <span class="number">1023</span>;</div></pre></td></tr></table></figure><p>乘法操作生成了五分相互独立的拷贝，每份8位，并合并成一个64位值。将该值分为每十位一组，与操作选出哪些位在组中正确的（倒置）位上。乘法和与运算从原数据拷贝到这里来，所以每个组中一定会有一个原数据。比特位的倒置位置与它们在组中的相对位置相同。最后，求得模<code>2^10 - 1</code>的余数，即能把每组中的选中的比特位聚合到一起。它们相互不会覆盖，所以求余操作的底层操作就像逻辑或操作一样。</p><p>该方法见于<a href="http://www.inwap.com/pdp10/hbaker/hakmem/hakmem.html" target="_blank" rel="external">Beeler, M., Gosper, R. W., and Schroeppel, R. HAKMEM. MIT AI Memo 239, Feb. 29, 1972.</a>的Programming Hacks部分。</p><h3 id="倒置一比特-仅用4次操作-使用64位的乘法-不使用除法">倒置一比特，仅用4次操作（使用64位的乘法，不使用除法）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> b; <span class="comment">// reverse this byte</span></div><div class="line"> </div><div class="line">b = ((b * <span class="number">0x80200802</span>ULL) &amp; <span class="number">0x0884422110</span>ULL) * <span class="number">0x0101010101</span>ULL &gt;&gt; <span class="number">32</span>;</div></pre></td></tr></table></figure><p>下面就是该方法的原理展示，使用<code>a</code>,<code>b</code>,<code>c</code>,<code>d</code>,<code>e</code>,<code>f</code>,<code>g</code>,<code>h</code>来表示该比特的各个位。注意第一次乘法是如何将这个数拷贝多份的。以及最后一次乘法是如何将这几个位合并到从右往左数第五个比特中去的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">                                                                                        abcd efgh (-&gt; hgfe dcba)</div><div class="line">*                                                      1000 0000  0010 0000  0000 1000  0000 0010 (0x80200802)</div><div class="line">-------------------------------------------------------------------------------------------------</div><div class="line">                                            0abc defg  h00a bcde  fgh0 0abc  defg h00a  bcde fgh0</div><div class="line">&amp;                                           0000 1000  1000 0100  0100 0010  0010 0001  0001 0000 (0x0884422110)</div><div class="line">-------------------------------------------------------------------------------------------------</div><div class="line">                                            0000 d000  h000 0c00  0g00 00b0  00f0 000a  000e 0000</div><div class="line">*                                           0000 0001  0000 0001  0000 0001  0000 0001  0000 0001 (0x0101010101)</div><div class="line">-------------------------------------------------------------------------------------------------</div><div class="line">                                            0000 d000  h000 0c00  0g00 00b0  00f0 000a  000e 0000</div><div class="line">                                 0000 d000  h000 0c00  0g00 00b0  00f0 000a  000e 0000</div><div class="line">                      0000 d000  h000 0c00  0g00 00b0  00f0 000a  000e 0000</div><div class="line">           0000 d000  h000 0c00  0g00 00b0  00f0 000a  000e 0000</div><div class="line">0000 d000  h000 0c00  0g00 00b0  00f0 000a  000e 0000</div><div class="line">-------------------------------------------------------------------------------------------------</div><div class="line">0000 d000  h000 dc00  hg00 dcb0  hgf0 dcba  hgfe dcba  hgfe 0cba  0gfe 00ba  00fe 000a  000e 0000</div><div class="line">&gt;&gt; 32</div><div class="line">-------------------------------------------------------------------------------------------------</div><div class="line">                                            0000 d000  h000 dc00  hg00 dcb0  hgf0 dcba  hgfe dcba</div><div class="line">&amp;                                                                                       1111 1111</div><div class="line">-------------------------------------------------------------------------------------------------</div><div class="line">                                                                                        hgfe dcba</div></pre></td></tr></table></figure><p>最后两步可以合并，因为某些处理器的寄存器可以按照字节来读写；只用乘法，然后寄存器存储高位的32位，再取低八位，这样就只要6次操作。</p><p>该方法于2001年7月13日由Sean Anderson创造而出。</p><h3 id="倒置一比特-仅用7次操作-不使用64位">倒置一比特，仅用7次操作（不使用64位）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">b = ((b * <span class="number">0x0802</span>LU &amp; <span class="number">0x22110</span>LU) | (b * <span class="number">0x8020</span>LU &amp; <span class="number">0x88440</span>LU)) * <span class="number">0x10101</span>LU &gt;&gt; <span class="number">16</span>;</div></pre></td></tr></table></figure><p>注意要把结果赋值给或转换到<code>unsigned char</code>以去除不需要的垃圾位。</p><p>作者注：</p><ul><li>2001年7月13日，该方法由Sean Anderson创造而出。</li><li>2002年1月3日，Mike Keith指出并修正了拼写错误。</li></ul><h3 id="倒置n位-并行法-使用-5-lg-n-次操作">倒置N位，并行法，使用 5*lg(N) 次操作</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> v; <span class="comment">// 32-bit word to reverse bit order</span></div><div class="line"></div><div class="line"><span class="comment">// swap odd and even bits</span></div><div class="line">v = ((v &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>) | ((v &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span>);</div><div class="line"><span class="comment">// swap consecutive pairs</span></div><div class="line">v = ((v &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>) | ((v &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>);</div><div class="line"><span class="comment">// swap nibbles ... </span></div><div class="line">v = ((v &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F0F0F0F</span>) | ((v &amp; <span class="number">0x0F0F0F0F</span>) &lt;&lt; <span class="number">4</span>);</div><div class="line"><span class="comment">// swap bytes</span></div><div class="line">v = ((v &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x00FF00FF</span>) | ((v &amp; <span class="number">0x00FF00FF</span>) &lt;&lt; <span class="number">8</span>);</div><div class="line"><span class="comment">// swap 2-byte long pairs</span></div><div class="line">v = ( v &gt;&gt; <span class="number">16</span>             ) | ( v               &lt;&lt; <span class="number">16</span>);</div></pre></td></tr></table></figure><p>下面的变体依然是$O(\lg N)$的，不过它需要更多次操作来倒置<code>v</code>. 它好在即时计算常量来减少内存使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> s = <span class="keyword">sizeof</span>(v) * CHAR_BIT; <span class="comment">// bit位数，必须是2的次幂</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> mask = ~<span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> ((s &gt;&gt;= <span class="number">1</span>) &gt; <span class="number">0</span>) </div><div class="line">&#123;</div><div class="line">  mask ^= (mask &lt;&lt; s);</div><div class="line">  v = ((v &gt;&gt; s) &amp; mask) | ((v &lt;&lt; s) &amp; ~mask);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>以上方法非常适合于N很大的情形。对于64位或以上的整数，还得按照套路加几行，否则只有低32位被倒置。</p><p>作者注：</p><ul><li>更多内容详见Dr. Dobb’s Journal 1983, Edwin Freed关于Binary Magic Numbers的文章。</li><li>2005年9月13日，Ken Raeburn推荐给我第二种变体。</li><li>2006年3月19日，Veldmeijer提出第一种方法的最后一行可以不使用与运算。</li></ul><h2 id="求余除法">求余除法</h2><h3 id="不使用除法-计算关于-1-s-的余数">不使用除法，计算关于 1&lt;&lt;s 的余数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> n;          <span class="comment">// 被除数</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> s;</div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> d = <span class="number">1U</span> &lt;&lt; s; <span class="comment">// So d will be one of: 1, 2, 4, 8, 16, 32, ...</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> m;                <span class="comment">// m will be n % d</span></div><div class="line">m = n &amp; (d - <span class="number">1</span>);</div></pre></td></tr></table></figure><p>大部分程序员很早就知道这个技巧了，为了完整性我将其添加进来。</p><h3 id="不使用除法-计算关于-1-s-1-的余数">不使用除法，计算关于 (1&lt;&lt;s) - 1 的余数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> n;                      <span class="comment">// 被除数</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> s;                <span class="comment">// s &gt; 0</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> d = (<span class="number">1</span> &lt;&lt; s) - <span class="number">1</span>; <span class="comment">// so d is either 1, 3, 7, 15, 31, ...).</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> m;                      <span class="comment">// n % d goes here.</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (m = n; n &gt; d; n = m)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">for</span> (m = <span class="number">0</span>; n; n &gt;&gt;= s)</div><div class="line">  &#123;</div><div class="line">    m += n &amp; d;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// m值域为[0,d], 但m是余数所以m为d时赋值为0</span></div><div class="line">m = m == d ? <span class="number">0</span> : m;</div></pre></td></tr></table></figure><p>求关于 $2^N-1$ 的余数需要 $5 + (4 + 5 \lceil {N \over s} \rceil) \cdot \lceil \lg{N \over s} \rceil$ 次操作，其中<code>N</code>是被除数的位数。也就是说，时间复杂度为$O(\lg N)$.</p><p>作者注：</p><ul><li>该方法于2001年8月15日由Sean Anderson想出。</li><li>在2004年6月17日Sean A. Irvine指正之前，我错误地评论说可以在最末尾使用<code>m = ((m + 1) &amp; d) - 1;</code>.</li><li>2005年4月25日，Michael Miller指出代码中一处拼写错误。</li></ul><h3 id="不使用除法-并行计算关于-1-s-1-的余数">不使用除法，并行计算关于 (1&lt;&lt;s) - 1 的余数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The following is for a word size of 32 bits!</span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> M[] = </div><div class="line">&#123;</div><div class="line">  <span class="number">0x00000000</span>, <span class="number">0x55555555</span>, <span class="number">0x33333333</span>, <span class="number">0xc71c71c7</span>,</div><div class="line">  <span class="number">0x0f0f0f0f</span>, <span class="number">0xc1f07c1f</span>, <span class="number">0x3f03f03f</span>, <span class="number">0xf01fc07f</span>, </div><div class="line">  <span class="number">0x00ff00ff</span>, <span class="number">0x07fc01ff</span>, <span class="number">0x3ff003ff</span>, <span class="number">0xffc007ff</span>,</div><div class="line">  <span class="number">0xff000fff</span>, <span class="number">0xfc001fff</span>, <span class="number">0xf0003fff</span>, <span class="number">0xc0007fff</span>,</div><div class="line">  <span class="number">0x0000ffff</span>, <span class="number">0x0001ffff</span>, <span class="number">0x0003ffff</span>, <span class="number">0x0007ffff</span>, </div><div class="line">  <span class="number">0x000fffff</span>, <span class="number">0x001fffff</span>, <span class="number">0x003fffff</span>, <span class="number">0x007fffff</span>,</div><div class="line">  <span class="number">0x00ffffff</span>, <span class="number">0x01ffffff</span>, <span class="number">0x03ffffff</span>, <span class="number">0x07ffffff</span>,</div><div class="line">  <span class="number">0x0fffffff</span>, <span class="number">0x1fffffff</span>, <span class="number">0x3fffffff</span>, <span class="number">0x7fffffff</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> Q[][<span class="number">6</span>] = </div><div class="line">&#123;</div><div class="line">  &#123; <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>,  <span class="number">0</span>&#125;, &#123;<span class="number">16</span>,  <span class="number">8</span>,  <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">1</span>,  <span class="number">1</span>&#125;, &#123;<span class="number">16</span>,  <span class="number">8</span>,  <span class="number">4</span>,  <span class="number">2</span>,  <span class="number">2</span>,  <span class="number">2</span>&#125;,</div><div class="line">  &#123;<span class="number">15</span>,  <span class="number">6</span>,  <span class="number">3</span>,  <span class="number">3</span>,  <span class="number">3</span>,  <span class="number">3</span>&#125;, &#123;<span class="number">16</span>,  <span class="number">8</span>,  <span class="number">4</span>,  <span class="number">4</span>,  <span class="number">4</span>,  <span class="number">4</span>&#125;, &#123;<span class="number">15</span>,  <span class="number">5</span>,  <span class="number">5</span>,  <span class="number">5</span>,  <span class="number">5</span>,  <span class="number">5</span>&#125;,</div><div class="line">  &#123;<span class="number">12</span>,  <span class="number">6</span>,  <span class="number">6</span>,  <span class="number">6</span> , <span class="number">6</span>,  <span class="number">6</span>&#125;, &#123;<span class="number">14</span>,  <span class="number">7</span>,  <span class="number">7</span>,  <span class="number">7</span>,  <span class="number">7</span>,  <span class="number">7</span>&#125;, &#123;<span class="number">16</span>,  <span class="number">8</span>,  <span class="number">8</span>,  <span class="number">8</span>,  <span class="number">8</span>,  <span class="number">8</span>&#125;,</div><div class="line">  &#123; <span class="number">9</span>,  <span class="number">9</span>,  <span class="number">9</span>,  <span class="number">9</span>,  <span class="number">9</span>,  <span class="number">9</span>&#125;, &#123;<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>&#125;, &#123;<span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>&#125;,</div><div class="line">  &#123;<span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>&#125;, &#123;<span class="number">13</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">13</span>, <span class="number">13</span>&#125;, &#123;<span class="number">14</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">14</span>&#125;,</div><div class="line">  &#123;<span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>&#125;, &#123;<span class="number">16</span>, <span class="number">16</span>, <span class="number">16</span>, <span class="number">16</span>, <span class="number">16</span>, <span class="number">16</span>&#125;, &#123;<span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>&#125;,</div><div class="line">  &#123;<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>&#125;, &#123;<span class="number">19</span>, <span class="number">19</span>, <span class="number">19</span>, <span class="number">19</span>, <span class="number">19</span>, <span class="number">19</span>&#125;, &#123;<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>&#125;,</div><div class="line">  &#123;<span class="number">21</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">21</span>, <span class="number">21</span>&#125;, &#123;<span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>&#125;, &#123;<span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>&#125;,</div><div class="line">  &#123;<span class="number">24</span>, <span class="number">24</span>, <span class="number">24</span>, <span class="number">24</span>, <span class="number">24</span>, <span class="number">24</span>&#125;, &#123;<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>&#125;, &#123;<span class="number">26</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">26</span>, <span class="number">26</span>&#125;,</div><div class="line">  &#123;<span class="number">27</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">27</span>, <span class="number">27</span>&#125;, &#123;<span class="number">28</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">28</span>&#125;, &#123;<span class="number">29</span>, <span class="number">29</span>, <span class="number">29</span>, <span class="number">29</span>, <span class="number">29</span>, <span class="number">29</span>&#125;,</div><div class="line">  &#123;<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>&#125;, &#123;<span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> R[][<span class="number">6</span>] = </div><div class="line">&#123;</div><div class="line">  &#123;<span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>&#125;,</div><div class="line">  &#123;<span class="number">0x0000ffff</span>, <span class="number">0x000000ff</span>, <span class="number">0x0000000f</span>, <span class="number">0x00000003</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>&#125;,</div><div class="line">  &#123;<span class="number">0x0000ffff</span>, <span class="number">0x000000ff</span>, <span class="number">0x0000000f</span>, <span class="number">0x00000003</span>, <span class="number">0x00000003</span>, <span class="number">0x00000003</span>&#125;,</div><div class="line">  &#123;<span class="number">0x00007fff</span>, <span class="number">0x0000003f</span>, <span class="number">0x00000007</span>, <span class="number">0x00000007</span>, <span class="number">0x00000007</span>, <span class="number">0x00000007</span>&#125;,</div><div class="line">  &#123;<span class="number">0x0000ffff</span>, <span class="number">0x000000ff</span>, <span class="number">0x0000000f</span>, <span class="number">0x0000000f</span>, <span class="number">0x0000000f</span>, <span class="number">0x0000000f</span>&#125;,</div><div class="line">  &#123;<span class="number">0x00007fff</span>, <span class="number">0x0000001f</span>, <span class="number">0x0000001f</span>, <span class="number">0x0000001f</span>, <span class="number">0x0000001f</span>, <span class="number">0x0000001f</span>&#125;,</div><div class="line">  &#123;<span class="number">0x00000fff</span>, <span class="number">0x0000003f</span>, <span class="number">0x0000003f</span>, <span class="number">0x0000003f</span>, <span class="number">0x0000003f</span>, <span class="number">0x0000003f</span>&#125;,</div><div class="line">  &#123;<span class="number">0x00003fff</span>, <span class="number">0x0000007f</span>, <span class="number">0x0000007f</span>, <span class="number">0x0000007f</span>, <span class="number">0x0000007f</span>, <span class="number">0x0000007f</span>&#125;,</div><div class="line">  &#123;<span class="number">0x0000ffff</span>, <span class="number">0x000000ff</span>, <span class="number">0x000000ff</span>, <span class="number">0x000000ff</span>, <span class="number">0x000000ff</span>, <span class="number">0x000000ff</span>&#125;,</div><div class="line">  &#123;<span class="number">0x000001ff</span>, <span class="number">0x000001ff</span>, <span class="number">0x000001ff</span>, <span class="number">0x000001ff</span>, <span class="number">0x000001ff</span>, <span class="number">0x000001ff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x000003ff</span>, <span class="number">0x000003ff</span>, <span class="number">0x000003ff</span>, <span class="number">0x000003ff</span>, <span class="number">0x000003ff</span>, <span class="number">0x000003ff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x000007ff</span>, <span class="number">0x000007ff</span>, <span class="number">0x000007ff</span>, <span class="number">0x000007ff</span>, <span class="number">0x000007ff</span>, <span class="number">0x000007ff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x00000fff</span>, <span class="number">0x00000fff</span>, <span class="number">0x00000fff</span>, <span class="number">0x00000fff</span>, <span class="number">0x00000fff</span>, <span class="number">0x00000fff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x00001fff</span>, <span class="number">0x00001fff</span>, <span class="number">0x00001fff</span>, <span class="number">0x00001fff</span>, <span class="number">0x00001fff</span>, <span class="number">0x00001fff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x00003fff</span>, <span class="number">0x00003fff</span>, <span class="number">0x00003fff</span>, <span class="number">0x00003fff</span>, <span class="number">0x00003fff</span>, <span class="number">0x00003fff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x00007fff</span>, <span class="number">0x00007fff</span>, <span class="number">0x00007fff</span>, <span class="number">0x00007fff</span>, <span class="number">0x00007fff</span>, <span class="number">0x00007fff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x0000ffff</span>, <span class="number">0x0000ffff</span>, <span class="number">0x0000ffff</span>, <span class="number">0x0000ffff</span>, <span class="number">0x0000ffff</span>, <span class="number">0x0000ffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x0001ffff</span>, <span class="number">0x0001ffff</span>, <span class="number">0x0001ffff</span>, <span class="number">0x0001ffff</span>, <span class="number">0x0001ffff</span>, <span class="number">0x0001ffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x0003ffff</span>, <span class="number">0x0003ffff</span>, <span class="number">0x0003ffff</span>, <span class="number">0x0003ffff</span>, <span class="number">0x0003ffff</span>, <span class="number">0x0003ffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x0007ffff</span>, <span class="number">0x0007ffff</span>, <span class="number">0x0007ffff</span>, <span class="number">0x0007ffff</span>, <span class="number">0x0007ffff</span>, <span class="number">0x0007ffff</span>&#125;,</div><div class="line">  &#123;<span class="number">0x000fffff</span>, <span class="number">0x000fffff</span>, <span class="number">0x000fffff</span>, <span class="number">0x000fffff</span>, <span class="number">0x000fffff</span>, <span class="number">0x000fffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x001fffff</span>, <span class="number">0x001fffff</span>, <span class="number">0x001fffff</span>, <span class="number">0x001fffff</span>, <span class="number">0x001fffff</span>, <span class="number">0x001fffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x003fffff</span>, <span class="number">0x003fffff</span>, <span class="number">0x003fffff</span>, <span class="number">0x003fffff</span>, <span class="number">0x003fffff</span>, <span class="number">0x003fffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x007fffff</span>, <span class="number">0x007fffff</span>, <span class="number">0x007fffff</span>, <span class="number">0x007fffff</span>, <span class="number">0x007fffff</span>, <span class="number">0x007fffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x00ffffff</span>, <span class="number">0x00ffffff</span>, <span class="number">0x00ffffff</span>, <span class="number">0x00ffffff</span>, <span class="number">0x00ffffff</span>, <span class="number">0x00ffffff</span>&#125;,</div><div class="line">  &#123;<span class="number">0x01ffffff</span>, <span class="number">0x01ffffff</span>, <span class="number">0x01ffffff</span>, <span class="number">0x01ffffff</span>, <span class="number">0x01ffffff</span>, <span class="number">0x01ffffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x03ffffff</span>, <span class="number">0x03ffffff</span>, <span class="number">0x03ffffff</span>, <span class="number">0x03ffffff</span>, <span class="number">0x03ffffff</span>, <span class="number">0x03ffffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x07ffffff</span>, <span class="number">0x07ffffff</span>, <span class="number">0x07ffffff</span>, <span class="number">0x07ffffff</span>, <span class="number">0x07ffffff</span>, <span class="number">0x07ffffff</span>&#125;,</div><div class="line">  &#123;<span class="number">0x0fffffff</span>, <span class="number">0x0fffffff</span>, <span class="number">0x0fffffff</span>, <span class="number">0x0fffffff</span>, <span class="number">0x0fffffff</span>, <span class="number">0x0fffffff</span>&#125;,</div><div class="line">  &#123;<span class="number">0x1fffffff</span>, <span class="number">0x1fffffff</span>, <span class="number">0x1fffffff</span>, <span class="number">0x1fffffff</span>, <span class="number">0x1fffffff</span>, <span class="number">0x1fffffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x3fffffff</span>, <span class="number">0x3fffffff</span>, <span class="number">0x3fffffff</span>, <span class="number">0x3fffffff</span>, <span class="number">0x3fffffff</span>, <span class="number">0x3fffffff</span>&#125;, </div><div class="line">  &#123;<span class="number">0x7fffffff</span>, <span class="number">0x7fffffff</span>, <span class="number">0x7fffffff</span>, <span class="number">0x7fffffff</span>, <span class="number">0x7fffffff</span>, <span class="number">0x7fffffff</span>&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> n;       <span class="comment">// numerator</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> s; <span class="comment">// s &gt; 0</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> d = (<span class="number">1</span> &lt;&lt; s) - <span class="number">1</span>; <span class="comment">// so d is either 1, 3, 7, 15, 31, ...).</span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> m;       <span class="comment">// n % d goes here.</span></div><div class="line"></div><div class="line">m = (n &amp; M[s]) + ((n &gt;&gt; s) &amp; M[s]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> * q = &amp;Q[s][<span class="number">0</span>], * r = &amp;R[s][<span class="number">0</span>]; m &gt; d; q++, r++)</div><div class="line">&#123;</div><div class="line">  m = (m &gt;&gt; *q) + (m &amp; *r);</div><div class="line">&#125;</div><div class="line">m = m == d ? <span class="number">0</span> : m; <span class="comment">// OR, less portably: m = m &amp; -((signed)(m - d) &gt;&gt; s);</span></div></pre></td></tr></table></figure><p>该方法求关于 $2^N-1$ 的余数至多需要 $O(\lg N)$ 时间，其中<code>N</code>是被除数位长（以上代码是针对32位的）。所需操作次数至多是 $12 + 9 \lceil \lg N \rceil$. 如果你能在编译器知道除数的话，就能去掉表，只需提取相关条目并做循环展开。该方法很容易能扩展到更长位宽。</p>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 70 Climbing Stairs]]></title>
      <url>/2015-12-03-Leetcode-70-Climbing-Stairs.html</url>
      <content type="html"><![CDATA[<p>Leetcode 70 的题解</p><a id="more"></a><p>题目如下：</p><blockquote><p>You are climbing a stair case. It takes n steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p></blockquote><hr><p>其实这个题以递归的思路来解的话，其实非常简单：</p><p>如果最后还剩下1步登顶的时候，所有可能的登顶方案就是台阶为$n - 1$时所有可能的方案；还剩下2步登顶的时候，所有可能的登顶方案就是台阶为$n - 2$时所有可能的方案。</p><p>因此，我们要求的$\mathrm{climbStairs}(n)=\mathrm{climbStairs}(n-1)+\mathrm{climbStairs}(n-2)$. 很容易求出，$\mathrm{climbStairs}(1)=1$, $\mathrm{climbStairs}(2)=2$. 因此，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</div><div class="line">        c=a+b;</div><div class="line">        a=b;</div><div class="line">        b=c;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话13]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D13.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>把火车售票点改成老虎机形式，摇号出票科学合理</p></li><li><p>心理学家表示当一个人爱上吃饭后有很大几率在以后几十年内天天吃饭</p></li><li><p>化学老师念动咒语一口气将烧杯里的硫酸喝了个底朝天</p></li><li><p>干完这一票大的，老子就金盆洗手！正在掏粪的刘老头狠狠发话。</p></li><li><p>为了听懂诈骗电话我苦学三年福建普通话最终还是未能如愿</p></li><li><p>看着眼前这盘红烧肘子我敢断定这只猪生前经历了残忍的屠杀</p></li><li><p>“猜猜我是谁？”小明拿起绳子一把勒住了老师的脖子</p></li><li><p>躲闪不及的老太太把公交车撞的稀巴烂</p></li><li><p>我告诉医生我有好几个扣扣号他大笔一挥就在诊断书上写了精神分裂</p></li><li><p>专家称引进非洲食人族将彻底解决我国人口问题</p></li><li><p>往自己头上拍砖有一定几率获得包括预知在内的各种不可预测的超能力</p></li><li><p>极度迷恋上武侠电视剧的小明捣毁了家里三粒感冒药进行炼丹</p></li><li><p>嫦娥三号放出玉兔号成功炸毁美国登月国旗圆满完成任务</p></li><li><p>我会颠覆你们的世界观！绑匪把人质倒着吊起来狠狠说到。</p></li><li><p>新官上任三把火，保卫科的赵主任说着亲手点燃了传达室</p></li><li><p>为了治疗面瘫医生给我下载了1GB的表情包。</p></li><li><p>“你再不站住老子就开大了！”王警官对着奔跑的歹徒喊道。</p></li><li><p>百万军队紧急赶往灾区将仅存的粮食全部吃光。</p></li><li><p>在搜救犬灵敏嗅觉的判断下搜救队员刨出两根火腿</p></li><li><p>看着我身边的车祸惨不忍睹车毁人亡哭喊声一片我该捡钱包还是手机？</p></li><li><p>我觉得我老婆住30G大小的房子可能还是有点小</p></li><li><p>自从我买了把玩具手枪后晚上走夜路别人总是主动送钱给我</p></li><li><p>不要帮我打拍子！正在做电击心脏复苏的医生对围观者吼道</p></li><li><p>我给每张钱留了我家地址，希望有一天它们能找到回家的路</p></li><li><p>美国中情局来华挖走众多算命先生实乃我朝一大损失</p></li><li><p>小明在厕所外连过了三道收费口终于还是拉了裤子</p></li><li><p>我们请了一堵水泥墙当守门员。</p></li><li><p>放屁后用手攥住再吸进嘴里通过肺过滤可有效减少雾霾排放</p></li><li><p>我就没见过你这种来店里点个免费锅底把大料捞完汤一喝走人的顾客</p></li><li><p>我要跳楼之际热心推销员把我拉住向我推销墓地。</p></li><li><p>在出租车里疯狂放屁可减少被无良司机兜远路的几率</p></li><li><p>说句实话，马桶里的天气变化是很怪的</p></li><li><p>我院研制出新型轮椅正常人坐上去可立即致残</p></li><li><p>专家建议每天睡眠不能超过24个小时</p></li><li><p>为缓解我高考压力。我爸准备高考前一天晚上带我去网吧通宵</p></li><li><p>被粉笔头砸中的学生都变成了丧尸他们上课不守纪律吃东西还乱嚷嚷</p></li><li><p>为解决北京日益严重的血荒，市长带头捐献已经用了三年的卫生巾</p></li><li><p>孙老汉用刀乱砍路人自称节日限时大放血</p></li><li><p>想到仙人可以吸收自然能量代替食物我便把高压电枪塞进厌食小孩的嘴</p></li><li><p>好心肠卡车司机把老奶奶撞向马路对面</p></li><li><p>不知为何悟净师弟老是怂恿我当回民</p></li><li><p>交警大队在高速上设路障绊倒六辆沙车四辆石车终于填平了公路</p></li><li><p>小明cosplay董存瑞造成20死5伤</p></li><li><p>随着技术的应用发展智能手机将逐步附加痰盂夜壶面纸盒等贴心应用</p></li><li><p>高考考场上老祖宗显灵给求佛多日的后辈送来四书五经</p></li><li><p>H君小时候和我们打泥仗时总输为了报复就偷偷到粪坑制造生化武器</p></li><li><p>我挥舞一个金属棒只要再打倒校长我就可以通关并拿到毕业证书了</p></li><li><p>【小知识】上学迟到是为缓解交通压力而实行的弹性上下学制度</p></li><li><p>过年的时候我们一家人围坐在一起写作业</p></li><li><p>妈妈一直看着我，可我还是趁妈妈不注意时把作业写完了</p></li><li><p>为了安心睡觉我在床上放了数十只蟾蜍我看还有蚊子敢咬我不</p></li><li><p>三叔把语文作业数学作业英语作业一盘盘端上来</p></li><li><p>图书馆人满为患为了占座小明在桌子上工整的摆了一张100元</p></li><li><p>三班的两个同学再操场上打架打着打着就睡着了</p></li><li><p>我的手机不但上网还能煎鸡蛋</p></li><li><p>好消息因经费紧张二炮将所有课程改成玩FC坦克大战</p></li><li><p>为了不让小孩踩脏我刚拖的地板，我把他吊在了天花板</p></li><li><p>看完火影忍者后小明自灭满门并把弟弟改名佐助称仇恨吧</p></li><li><p>爸爸慈爱的对小红说你考试第一名爸爸就带你去肯德基看人吃汉堡</p></li><li><p>他的谈吐之间流露出一股大蒜味</p></li><li><p>许大仙算好风水拿准方位布下法事掏出笔记本登上梦幻开始捉鬼</p></li><li><p>怎么会有风油精这样的滴眼液</p></li><li><p>为了畅游知识海洋我打开图书馆所有水龙头</p></li><li><p>警察与疑犯对峙18个小时后，被告知对方系植物人</p></li><li><p>都说可乐热量高容易胖，傻不傻，我都喝凉的。</p></li><li><p>十岁的我看着比我小两岁的弟弟感慨九年不见你变了</p></li><li><p>诸葛亮的草船刚到曹操立即命令试用火焰喷射器</p></li><li><p>在海上漂流了半个月，八仙已经忘了为什么要去过海了</p></li><li><p>父亲怒斥我不争气，连打起来的手感都不如别人家孩子</p></li><li><p>修了半天这空调终于会喷火了。</p></li><li><p>用打火机点了半天煤气咋没反应</p></li><li><p>手机屏幕上停只苍蝇 赶紧截图给它截下来了</p></li><li><p>坐了这么多次地铁，尼玛从来没堵过车，几十公里的地铁一个红绿灯都没有</p></li><li><p>富豪承诺死后捐献全部遗产后，被当场打死。</p></li><li><p>明天学校组织体检脑部CT扫描，我刚看完苍井空全集会不会被发现</p></li><li><p>上火车遇见一个特没素质的人，不仅大冬天开窗户，还骂我脚臭。</p></li><li><p>我胸部中了一枪感觉胸前的红领巾更鲜艳了。</p></li><li><p>听说专业反跟踪方法是等地铁关门时的一瞬间进入。</p></li><li><p>警方辟谣：六月下雪是因为一群弱智在山上挠头皮所致，并非自然灾害</p></li><li><p>花了半辈子攒钱，就是为了尝尝苹果的味道，竟然告诉我它是手机？</p></li><li><p>领导为了显示自己亲民抓住遛弯老大爷就亲了一口</p></li><li><p>当卡巴斯基把自己删除后电脑病毒终于没有了</p></li><li><p>今天我学雷锋做好事，帮军区门口站岗放哨的叔叔解开了穴道</p></li><li><p>为训练队员，扫黄大队队长在演习中自愿扮演反派</p></li><li><p>这个大日本帝国武士暑假开了个剖腹培训班。</p></li><li><p>据我院专家统计 海洋垃圾99. 9%系精卫填海所致</p></li><li><p>我打算写本关于爱护树木公益环保的书，差不多一万页左右。保护树木，从你我做起。</p></li><li><p>朋友说要尽地主之宜于是我叫来一群红卫兵把他拉出去批斗</p></li><li><p>三号和九号选手很合我胃口，就是咸了点</p></li><li><p>从小我就被教育说，见到警察一定不能说谎。于是我骂他们傻逼被抓起来了。</p></li><li><p>为了显示自己做的蚊帐十分实用王老汉从蚊帐里抓住上千只蚊子掐死</p></li><li><p>双目失明的陈医生因超速驾驶被交警拦下</p></li><li><p>王老汉因为参加自己的葬礼迟到而内疚不已</p></li><li><p>王老汉路边捡到一沓冥币，路边坐等撞死后享福</p></li><li><p>得知自己下体瘫痪的噩耗,我急的直跺脚</p></li><li><p>来新东方吧，就缺你这样的食材！！</p></li><li><p>气息奄奄的女子爬出车祸现场要求记者用美图秀秀把她的照片瘦个脸</p></li><li><p>感谢威猛先生洁厕液治好了我多年的老口臭</p></li><li><p>从遗传学的角度来讲太监的儿子应该也是个太监</p></li><li><p>志愿者们修炼乾坤大挪移帮春节买不到票的旅客返乡</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话12]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D12.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>科技新人类：考古队在木乃伊棺墓里发现撕开的康师傅调味料包</p></li><li><p>无良商家将白纸涂黑公然贩卖称波力海苔</p></li><li><p>王老汉拿起一盒粉笔灰，从此玩起了非主流，一天换一个发色</p></li><li><p>宰相肚子里传来了&quot;让我们荡起双桨~&quot;的欢乐歌声</p></li><li><p>诸葛亮因为借东风不还而被判刑三个月</p></li><li><p>在17世纪的俄国被压迫的农奴们发明了斗地主游戏来发泄不满</p></li><li><p>钟表怎么转得那么慢热死我了哎呦诶</p></li><li><p>李大头每次出门身上带几斤豆腐声称从不占美女便宜</p></li><li><p>船长把最后一个救生圈丢给大副然后用刀在脖子两侧划了几道口子 说你不用担心我有鳃淹不死的就跳进了海里</p></li><li><p>孩子咳嗽老不好，多半是装病不想去上课，抽两巴掌就痊愈了</p></li><li><p>报告教官你这样的擒拿方法不科学来，跟着我念：除你武器</p></li><li><p>绑匪笑着说：一手交钱一手交货，五百万拿来这二十万绝对还你</p></li><li><p>小明有4个苹果，自己吃了一个，送给王老汉一个，请计算出太阳的质量</p></li><li><p>快递晚到两天老李称移动办事不力一气之下给10086狂发垃圾短信</p></li><li><p>我在考试中玩笔，老师过来把我的笔全部没收催我专心考试</p></li><li><p>听说最近常有僵尸出没，于是校长在出门时含了一口硫酸防身</p></li><li><p>小明说要去学绝技大石碎胸口，后来我再也没有见过他。</p></li><li><p>不要得罪他，他会让你死的很难看！他在殡仪馆做仪容师。</p></li><li><p>眼看是来不及了小明灵机一动将高考倒计时的天数延长了365天</p></li><li><p>今天毕业拍了太多照片手机重了好多一塞进裤兜直接把我裤子扯到脚跟</p></li><li><p>经过国际刑警数个小时的劝说，自爆份子拿出了藏在身上的4张A</p></li><li><p>为了解决床位紧张问题,院长说,一个睡正面,一个睡反面</p></li><li><p>佛山无影脚众所周知是广东佛山当地群众喜闻乐见的一种小吃</p></li><li><p>民生：十八层地狱一平米卖两万元</p></li><li><p>王老汉走关系把自己办进学校寒窗苦读十年只为体验高考落榜的乐趣</p></li><li><p>我作文里通假字特别多，高考时保送北大中文系</p></li><li><p>为了验证我老爸是否戒烟，我今早出门时没关煤气</p></li><li><p>半路遇敌超时空矿车 司机急忙把车传送到水里不让敌人靠近</p></li><li><p>小明考卷上每道题的答案都@小红，老师没收其考卷称是高科技作弊</p></li><li><p>考地理时我在南海位置画了一个圈自称邓爷爷再世</p></li><li><p>王老汉第一次参加拳击比赛失利，回家后怒骂教练为什么不给他加血</p></li><li><p>为了检验警察的侦探水平，临死前我用鲜血写了一串乱码，加密五层。</p></li><li><p>刘邦鸿门宴险些丧命只因项羽不满他吃了霸王餐</p></li><li><p>嘎子深入敌营后守口如瓶被敌军拿去盛水了</p></li><li><p>小刘目不转睛盯着咸菜看希望能够看淡点</p></li><li><p>“你再不站住老子就开大了！”王警官对着奔跑的歹徒喊道。</p></li><li><p>丧尸围城了！我一个太阳还没有收集到怎么办！</p></li><li><p>一听死后还可以分财产王老汉再也憋不住了一把掀开棺材板跳了出来</p></li><li><p>正要进考场时监考老师把我身上的马刀、匕首、铁棍搜了出来</p></li><li><p>王老汉近日总是流连于垃圾堆之间称要找回遗失在过去的自己</p></li><li><p>为什么我吃了蘑菇不能变大啊，也不会发射子弹</p></li><li><p>为了高考试卷的保密教育局用加特林扫射了出卷老师</p></li><li><p>日本议会要买钓鱼岛外交部发表声明称低于四千一平米不卖</p></li><li><p>考试途中监考老师睡着了同学们马上停止讨论默默的抄卷子感人肺腑</p></li><li><p>美国大兵看见头顶基诺夫空艇上的雪碧广告纷纷伸手准备接住</p></li><li><p>我大叫着“我是考生来不及了”交警闻迅急忙送我去网吧</p></li><li><p>闻美帝监测中国空气质量建造天气控制器我国立刻大炼钢铁赶造铁幕装置</p></li><li><p>砒霜和敌敌畏已满足不了鹤顶红老人日益膨胀的食欲</p></li><li><p>怎么办就要开考了我钢笔没水了指甲油可以么？</p></li><li><p>以后再也不吃榴莲了，外面的刺好扎我的嘴</p></li><li><p>我一个月没洗澡，僵尸竟然说我过期了！</p></li><li><p>为什么刺客姓条？姓王不可以吗？</p></li><li><p>坚持服用我们厂保健品八十年的人一定会长寿</p></li><li><p>每天洗脚的朋友一定要改掉这个陋习王大爷八十多年都这样结果死了</p></li><li><p>小明刚工作就和总经理的千金一见钟情，半年后他高兴地做了父亲</p></li><li><p>在淘宝上2毛钱买了颗骰子打牌用，卖家死活不给我包邮</p></li><li><p>为了重现使命9的场景老王提着炸弹坐上了开往华尔街的大巴</p></li><li><p>路边的阴井盖薄薄的，吃起来脆脆的，像饼干一样。我正埋怨太薄了</p></li><li><p>实习护士把初生婴儿吊起只为测试引力常数为科学做出贡献</p></li><li><p>小明的数学老师让小明写的期末论文题目是…你为什么不喜欢上数学课</p></li><li><p>你再在我面前拽信不信我用第六套广播体操打死你。</p></li><li><p>看到超市琳琅满目的商品，我终于做了一个决定，就在这里安家立业</p></li><li><p>好激动，要进监狱了，两年哟～大家说带些什么零食跟小说去呢？</p></li><li><p>七旬老汉为做内衣广告冻死街头</p></li><li><p>徐老汉为锻炼臂力每天坚持用拖鞋砸窗户</p></li><li><p>青年小李因办事毛手毛脚被送到美容院激光脱毛</p></li><li><p>他们怎么这么浪费，今天看见他们把我最爱吃的佳洁士和两面针挤在小刷子上，最后还把它用水涮涮吐了出来，现在的人不知道节约吗？</p></li><li><p>他被枪打中之后步行三公里终于找到了电话报警</p></li><li><p>大雨中看见路边一位湿透的少女好心的我立刻拿起铁锹把她埋了起来</p></li><li><p>不知为何悟净师弟老是怂恿我当回民</p></li><li><p>5,4,3,2,1,闹钟提示正常，内衣穿着正常，棉被展开正常 与床板吻合正常，床板受压正常，现在启动主体，主体已床板分离，5cm,10cm,15cm,20cm。推动器燃料耗尽，滴东滴东。操！本次起床失败，稍后重启。</p></li><li><p>H君家是开诊所的，从小被他母亲打抗生素练针搞得他后来百毒不侵</p></li><li><p>小明cosplay董存瑞造成20死5伤</p></li><li><p>随着技术的应用发展智能手机将逐步附加痰盂夜壶面纸盒等贴心应用</p></li><li><p>高考考场上老祖宗显灵给求佛多日的后辈送来四书五经</p></li><li><p>小明不小心吃了狗粮，口吐白沫，是要变身了吗</p></li><li><p>面对数十人的围攻，叶问掏出双枪摆出了咏春的架势</p></li><li><p>面对歹徒尖刀村长毫不退缩坚定不移的磕完了三个响头</p></li><li><p>我挥舞一个金属棒只要再打倒校长我就可以通关并拿到毕业证书了</p></li><li><p>其实我有一部可以预知过去的手机</p></li><li><p>过年的时候我们一家人围坐在一起写作业</p></li><li><p>妈妈一直看着我，可我还是趁妈妈不注意把作业写完了</p></li><li><p>为了安心睡觉我在床上放了数十只青蛙我看还有蚊子敢咬我不</p></li><li><p>三叔把语文作业数学作业英语作业一盘盘端上来</p></li><li><p>昨天玩儿qq堂只用一个泡就炸死了三个队友</p></li><li><p>我的手机不但能上网还能煎鸡蛋</p></li><li><p>天气太热我灵机一动在我的棉袄里面装了个空调</p></li><li><p>看完火影忍者后小明自灭满门并把弟弟改名佐助 称仇恨吧</p></li><li><p>爸爸慈爱的对小红说你考试第一名爸爸就带你去肯德基看人吃汉堡</p></li><li><p>钢铁侠托尼来到中国被正宗铁人王进喜打成小儿麻痹</p></li><li><p>听说有两个小学生打架打着打着就睡着了</p></li><li><p>老板娘,快给我来杯苹果味的橙汁</p></li><li><p>病人一心想要减轻体重，医生收下大红包后从病人腹腔取出六块板砖</p></li><li><p>小明用上了电脑打斗地主，不幸被地主用炸弹炸死</p></li><li><p>这种鱼去死皮，很好的。说完小明跳进了嗷嗷待哺的食人鱼群</p></li><li><p>他的谈吐之间流露出一股大蒜味</p></li><li><p>许大仙算好风水拿准方位布下法事掏出笔记本登上梦幻开始捉鬼</p></li><li><p>我踏着月色从荷塘归来，轻轻推开房门看见在煤气中抽搐的妻子孩子</p></li><li><p>老师拿西瓜刀对着我，我吓坏了立刻交出手中的勃朗宁</p></li><li><p>昨天砍人老大给了我一把枪，我真的不爱用 拿着枪怎么砍都砍不死他们</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话11]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D11.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>妻子鼓励丈夫外出找小三只因家里斗地主总是缺一人。</p></li><li><p>我半夜走在阴森的巷子里由于紧张不小心踩死了一只鬼</p></li><li><p>摩尔根终于在众多的写轮眼果蝇中发现了一只白眼雄果蝇</p></li><li><p>好诡异每次切完菜都会发现自己有一根手指不见了，怎么回事</p></li><li><p>院长的相貌生动形象的说明了人是由猴子进化来的</p></li><li><p>眼看父亲快不行了见状我事先把他的七千万遗产烧了给他</p></li><li><p>中国人民没有种族歧视我们对包大人一向尊敬有佳</p></li><li><p>王老汉因吃西瓜不吐籽现已送往医院抢救</p></li><li><p>为了凑够五吨曹冲将曹操典伟等数十人装上船</p></li><li><p>救援部队空投棺材寿衣等救灾物品受到受灾群众好评</p></li><li><p>弟兄们连夜行军800里为提升士气决战前团长下令每人发一罐王老吉</p></li><li><p>小明真是不卫生大口大口的喝尿桌上不是有吸管嘛</p></li><li><p>小明街头自焚称加速碳排放 企图毁灭世界</p></li><li><p>第一次去敬老院做护工如何才能把老人们打成一片其乐融融</p></li><li><p>为了不让小红作弊小明用自己的试卷与小红调包</p></li><li><p>康师傅一家靠卖大米为生，有时候大米卖不出去，全家都没饭吃。</p></li><li><p>今儿中了5百万，心血来潮去街上扶老太太玩</p></li><li><p>我刚去医院检查了，医生说：没毒</p></li><li><p>机智的匈奴单于看着长城一声冷笑：兵书上说，千里之堤溃于蚁穴，遂命令士兵寻找蚂蚁窝 一统中原指日可待</p></li><li><p>小明为了锤炼演技而入党</p></li><li><p>我手里有把放大镜我随时都可以烧死你们</p></li><li><p>包大人怒喝道：太上老君，助我隐身！ 说罢，随手拉灭了灯</p></li><li><p>带着大包小包的行李打的士，把行李放塞满后座之后自己缩进尾箱</p></li><li><p>小明连续砍死5名舍友称自己已经god like</p></li><li><p>举国入侵日本之际村长拿出了恐怖机器人制造图纸支援我远洋舰队</p></li><li><p>奥特曼在炸弹即将爆炸之际，踩平了整座大楼，将炸弹造成的伤害降到了最低</p></li><li><p>在最高机密会议上 元首耳语警卫把今天参加会议的都灭口防止泄密</p></li><li><p>网管小张在拍坏20台电脑，拍碎7瓶可乐，拍晕4个人后终将苍蝇拍死</p></li><li><p>有人掏出100买了瓶矿泉水我说没零钱把100划掉写了个98还给他</p></li><li><p>小明和小红考试时都交了白卷被老教师怀疑是抄袭引发轩然大波</p></li><li><p>我市干警将小明成残废后早已等候的残疾人慰问团立刻到小明家慰问</p></li><li><p>月黑风高柯震恶黑着个戴着个墨镜对郭靖说，等下看我眼色行事！</p></li><li><p>菩提祖师等到三更还不见人只好睡了谁知孙悟空已经被他打成脑震荡</p></li><li><p>插了一百块钱到ATM机里面它就开始不停的吐银行卡我该怎么办</p></li><li><p>他说我跟着他混吃香的喝辣的，结果我每天都吃康师傅爆椒牛肉面</p></li><li><p>身高一米八卖武大郎烧饼的小贩被投诉欺诈消费者权益</p></li><li><p>小明服食大量摇头丸致死只因听说常动脑子可以变聪明</p></li><li><p>据小卖部发言人称昨晚猝死的男子曾在此处买了1卷卫生纸</p></li><li><p>听说有压力才有动力，王老汉将无心学习的儿子放入高压锅</p></li><li><p>身患低血糖的张大爷被身患糖尿病的王老汉治好了</p></li><li><p>老衲树上打了敌敌畏的苹果被亚当偷走了！</p></li><li><p>武大郎卖馒头怎么赚的二层小楼，让金莲砸了西门庆</p></li><li><p>校规规定男生不许扎辫子女生不许剃光头至今无人违反</p></li><li><p>跟踪了小花一个月后，我终于把跟踪她的变态狂绳之以法了</p></li><li><p>我指着蒸饺。“阿姨，来两个烧卖”食堂阿姨麻利的给了我两个春卷</p></li><li><p>我故意选在艾菲尔塔渡劫就算失败了也能拉一个巴黎的人垫背</p></li><li><p>听说美国的军事卫星能实施任意地点透视侦察那我洗澡不是被他们看光了？</p></li><li><p>“客官，只要你一心向佛，上帝就会保佑你的。”</p></li><li><p>班会课上班委会全票通过用死亡笔记代替班级日志的提案</p></li><li><p>看NBA的老大妈说道快多给他们几个球吧几个SB非抢着玩</p></li><li><p>又没蜡烛了小明点燃书本继续勤学刻苦的读起书来</p></li><li><p>刚才一道闪电下来，把我活生生的劈成了哈利波特</p></li><li><p>为了防止雪崩埋了山脚下的人小明在山顶上拿着喇叭大喊</p></li><li><p>考试途中监考老师鼾声太大吵醒了睡觉的同学们。</p></li><li><p>刹车失灵机车长当机立断下令拆除发动机并双脚蹭地减慢列车速度</p></li><li><p>为了不让鬼子抢走村民的粮食八路带头进村把粮食全部吃光</p></li><li><p>黑心老板一个月才给我23.5元钱，我召集群众拼命给他打工誓要挣光他的所有财产</p></li><li><p>坚持要帮别人提东西的小王最终被ATM旁的保安架走</p></li><li><p>八路军战士们在英勇杀敌浴血奋战前赴后继争先恐后终于分清哪个是己方司令部</p></li><li><p>方丈说他一生也参悟不透为何所有和尚都是光头如来却是非主流</p></li><li><p>四十大盗在阿里巴巴门上画了一个带红圈的拆字</p></li><li><p>李大头寻死买不起农药收集三年烟蒂头煮了一锅大杂烩喝下去 被好心邻居及时发现送医院洗胃醒来被医药费活活吓死令人唏嘘不已</p></li><li><p>领导不远千里为贫困户送几根鹅毛取暖感动中国</p></li><li><p>进步青年小明为印证人舔不到胳膊肘这一说法不惜截肢</p></li><li><p>国税总局：免除1元以下应纳税额 减轻纳税人负担</p></li><li><p>爱子心切的王老汉看着刚出生的儿子马上含在口里怕化了</p></li><li><p>我往店里扔了一百块钱吸引了店主的注意力成功的偷了一条口香糖</p></li><li><p>感动中国十大人物里都是中国人可见华人优越性</p></li><li><p>玩了一局水果忍者后，我收起菜刀含着泪看着四分五裂的手机</p></li><li><p>小明说张良是韩国人，遭爱国青年痛扁</p></li><li><p>抗战中为了保护毛主席的生命安全，大家在主席家里埋满了地雷</p></li><li><p>好消息一男子放跑养猪场所有肥猪自称爱护动物</p></li><li><p>为了培养航天人才，我把儿子扔进了滚筒洗衣机体验失重状态</p></li><li><p>各位病人裸奔晒太阳的行为属非法侵占国有太阳能资源请立即停止</p></li><li><p>玉皇大帝派我把守天宫一号，尔等凡人快快出来受死</p></li><li><p>参考系是光 我把手电筒绑自行车后就可以超光速行驶了！</p></li><li><p>大龄司机刘师傅又迷了路，这次他把火车开到了密西西比</p></li><li><p>劳资买了新手机，哈哈哈哈哈！！！—— 此帖来自小灵通客户端</p></li><li><p>今天打了一会球很渴于是同伴决定去游泳池游泳。</p></li><li><p>买了一台VCD发现不能玩魔兽，当场给我砸了</p></li><li><p>有个瞎子让我给他更新显卡驱动这样他就能重见光明了</p></li><li><p>我把我的孩子们插在土里希望他们茁壮成长他们是祖国未来的花朵啊</p></li><li><p>刚买的葡萄都是酸的我不甘心地吐出来加了白砂糖重新吃了一遍</p></li><li><p>我感觉最近文思泉涌导致局部大脑有漏水</p></li><li><p>考场上他一路过关斩将，巧妙的避过了一个又一个正确答案</p></li><li><p>急！今天晚上就要学生会换届竞选了我却一点准备也没有，怎么办啊！我衣服都洗了没干，现在就剩裤头了在宿舍呢</p></li><li><p>王老汉带着草帽耕地挖到一个烂水果吃了全身发软决定去做海贼王！</p></li><li><p>王局长忍着饥饿坚持战斗在公款吃喝的第一线上</p></li><li><p>第一次玩CS，按哪个键发必杀技啊</p></li><li><p>我来到一个满街都是非主流的城市，后来才知道这里这几天正刮台风</p></li><li><p>上海一男子造谣称自己因在微博造谣被拘留15日而被拘留15日</p></li><li><p>王老汉为了玩植物大战僵尸爬上屋顶不慎跌落</p></li><li><p>夏天太热我要考虑是不是要在冰箱里装个空调了</p></li><li><p>在登上飞机的一霎那我哭了妈妈说到了美国落汤鸡记得吃烧卖</p></li><li><p>电脑太重搬不动，气得我把硬盘里的500g数据全删了！</p></li><li><p>逃学娃嘎子死命挣扎最终还是被龟田太君送回了白洋淀中学</p></li><li><p>王老汉在英语听力开始后，在考场门口放起了二踢脚称喜迎四六级，随即被考生围殴</p></li><li><p>听说小明家八哥会说人话，当时我就提着刀砍死那只妖怪</p></li><li><p>李大头一进加油站就点烟称油价不降宁为玉碎不为瓦全</p></li><li><p>凶手就在你们当中！说完，柯南掏出大头针辣椒水老虎凳</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话10]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D10.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>毛主席打仗那会儿黄金AK还没出不然不会那么被动</p></li><li><p>你看把肠子后半段和食管连起来不就形成了一个完美循环 永动机发明了</p></li><li><p>小明参加射击比赛，射死了冠军后，终于获得了金牌！</p></li><li><p>110米栏现场有紧张的选手兴奋的观众还有在跑道上摆摊的小商小贩</p></li><li><p>老师说傻子都知道1+1等于2，幸亏我不知道不然就成傻子了</p></li><li><p>被查出糖尿病后，机智的王老汉决定卖糖水发家致富。</p></li><li><p>如果把吸毒者吃了会不会染上毒瘾</p></li><li><p>我掏出十块钱被风刮走，我又掏出十块钱看风往哪刮 于是我丢了二十块钱</p></li><li><p>被骗了钱，我拨打受骗者求助热线求助。接下来我只要先转给他们3000元管理费他们就能开始处理我的案子了嗯……</p></li><li><p>为缓解北京洪涝,印方决定空降10名旱区灾民帮助北京。</p></li><li><p>中国游客于北美某丛林随手扔烟头无意炸毁美国最大地下军事基地。</p></li><li><p>朝鲜将军无意间透露10年前向韩国发射1枚导弹至今无音讯</p></li><li><p>为延长生命线，小明用指甲刀从手腕螺旋切到手肘</p></li><li><p>第一期耍赖培训班结束了三十名学员倒地装病拒付学费</p></li><li><p>为了打击犯罪分子，公安将作恶多端的王家三兄弟的父母依法结扎</p></li><li><p>奥运会已经这么多天了为何我喜欢的苏联队还未出场？？？</p></li><li><p>凶案发生后为了证明自己的清白,我亲手杀掉了警方办案人员。</p></li><li><p>面对观众和裁判质疑，运动员堵住了场馆大门拿起加特林，大喊：还有谁！！！</p></li><li><p>高考真难中啊这次复读高考我问监考多要了张机读卡准备多买一注</p></li><li><p>那人占着茅坑不出来已经半个小时却一直喊谁给我点纸真是个2b，在外面憋死我了，现在的人怎么这么没素质。</p></li><li><p>八国联军问这次运动会中国队这次开的什么挂？</p></li><li><p>忠犬智勇双全奋不顾身把主人扔出的手榴弹衔了回来</p></li><li><p>身为一个考古学家他每天钻研鬼吹灯和盗墓笔记。</p></li><li><p>射中靶边得一分射中圆心得十分。射中裁判呢？</p></li><li><p>为了体验鬼子的美人计，王老汉被绑在刑拘上说：太军，我是来玩的</p></li><li><p>为积极参与解决温室效应的问题，我院决定把空调都往外吹，院长说这是给地球降降温</p></li><li><p>每次看完新闻联播我都要去查下银行卡余额恢复智商</p></li><li><p>牛顿被苹果砸中后忽然悟了，第二天他带了个钢盔坐在树下</p></li><li><p>儿子说他又把一百块吃完了。笨，换成钢镚再吃不是可以吃的饱点嘛</p></li><li><p>梦想去北京上学的小明默默的吃下安眠药完成自己的梦想</p></li><li><p>西餐厅的钢琴曲突然变成六级听力</p></li><li><p>爸爸叫儿子上课得时候除了听课什么都别干，后来儿子憋死了</p></li><li><p>20度水两杯50度水一杯混合成了一杯，如何使温度为20度？答案：倒掉50度那杯</p></li><li><p>一辆面包车开过下来一群六扇门的高手将小菜贩制服</p></li><li><p>家里盘着两条龙是长江与黄河啊，一辈子只图个平平安安</p></li><li><p>王老汉与吴老二因争论村子里上坡多还是下坡多的问题大打出手</p></li><li><p>为了自己高考后不复读我在查分前设置了一个存档点，这样我就能反复查分直到满意为止</p></li><li><p>儿子不争气考不上学怎么办 必死牌毒鼠强从根本上解决家长们的烦恼</p></li><li><p>你这样真不对，导弹得用打火机点</p></li><li><p>由于现实中不如意小明自我臆想自我满足最终获得奥斯卡最佳编剧</p></li><li><p>五毒教主祭出油盐酱醋糖，将六大派高手打入铁锅之中</p></li><li><p>中国小将参加跳高竟让众人在底下苦等半小时才落地</p></li><li><p>真可怕伦敦奥运会开幕式竟然在凌晨4点英国人都不用睡觉的吗</p></li><li><p>军演中，某飞行员于起飞时发动机故障进行原地跳伞</p></li><li><p>武警大哥我给你算一卦吧，反正等会才枪毙我，闲着也是闲着</p></li><li><p>特工达文西化身囚犯在敌人监狱秘密潜伏二十年，终于发现他好像是被判了无期，出不去了</p></li><li><p>老中医摸着脉说，已经没气了准备后事吧，然后把手从氧气管上松开</p></li><li><p>今天我问爸妈我怎么来的，我爸说垃圾桶里捡的，我妈说花盆里种的。结果他们吵起来了。</p></li><li><p>白天恶霸二彪说要弄死我，吹牛B，他会想到我晚上来上吊嘛</p></li><li><p>为了防止一只瘟鸡传染我我把它扔进老乡喝水的井里</p></li><li><p>想着试卷和作业都被烧了，躺在坑里的儒生们欣慰的笑了</p></li><li><p>为什么我在电线杆上尿尿还是找不到回家的路</p></li><li><p>我照镜子得时候总会出现 根据相关法律法规您搜索的内容部分未予以显示是什么情况</p></li><li><p>听说明天早上考数学我半夜起来复习掰手指</p></li><li><p>葬礼上尸体竟然坐了起来家属赶忙冲上去打死他继续哭丧</p></li><li><p>在弹尽粮绝之际小明急中生智冲了一个月CF会员踢了所有鬼子</p></li><li><p>小明在跳楼的过程中被饿死</p></li><li><p>老红军讲起当年过草地吃树皮的故事，企图让小红给他打个八折</p></li><li><p>为了迷惑敌军小明向我方阵地扔了一颗手榴弹</p></li><li><p>我把地震仪龙口里的珠子全抠下来这样地震就永远不会来啦</p></li><li><p>人才市场上我当众表演炒鱿鱼厨艺被群殴</p></li><li><p>小明和王老汉站在马路两侧，不停用臭鸡蛋攻击行人，声称炮塔防御 已经第7波了，来个boss叫警车</p></li><li><p>联合国气候峰会今通过决议，禁止发展中国家公民呼吸以降低碳排放</p></li><li><p>王老汉临危不乱机智的启动了高达将蚂蚁踩死</p></li><li><p>买不起棺材的小明一家只得把爷爷的遗体扔进湿水泥里滚几圈</p></li><li><p>为了解决地铁拥挤问题小明拿出手机低声说：快叫拆弹组来</p></li><li><p>为什么我吃了一个显卡眼睛还是看不见</p></li><li><p>王老汉玩过QQ飞车后声称自己已经掌握开车技巧。</p></li><li><p>诸葛亮在空城上弹琴被司马懿帐下顺溜一枪狙下</p></li><li><p>卧底潜伏传销公司十年竟发现这是个精神病院</p></li><li><p>放羊娃给母狼背上绑了个平底锅就把它们赶进了羊圈</p></li><li><p>科技日新月异不孕不育者可以从网络下载孩子不满意可随时卸载</p></li><li><p>方舟子于城下骂战庞士元:尔何德何能也敢与孔明齐名,请自证。</p></li><li><p>超级机器人大战有的被烤熟了显卡有的被揍爆了CPU</p></li><li><p>照镜子的时候发现里面关了一个和自己一摸一样的人</p></li><li><p>官渡之战中曹操火烧鸟巢后又顺手烧了水立方</p></li><li><p>城门久攻不下最终我方主帅决定握手言和大家交个朋友算了</p></li><li><p>虽然邱少云竭力忍住不让身体动弹发出声响但是烤肉的味道还是让他暴露了位置</p></li><li><p>公安局长卧底卖淫组织十八年至今仍未给出可抓捕命令</p></li><li><p>为彻底杜绝人口老龄化问题我国将实行满60岁人口强制报废原则</p></li><li><p>好心男子抢夺奥运火炬自愿被捕只为警告不法分子</p></li><li><p>郭敬明是我最尊重的武师，他的缩骨功练得登峰造极</p></li><li><p>手术台患者情绪稳定，护士们手拿消毒餐盒准备就绪，医生很自信</p></li><li><p>小明立志成为正义伙伴找来蜘蛛蝙蝠以及放射性物质等待基因突变妄图获得超能力</p></li><li><p>女性下体只能出人不能进人科学家或疑有传送异界功能</p></li><li><p>接上级通知 ，我院今日拉闸限电，病友们纷纷放下手中工作 ，点起蜡烛 ，观看新闻联播 。</p></li><li><p>小明觉得WINDOWS图标切得不够好看于是又给屏幕来了两刀</p></li><li><p>今天陈医生给我签名我一纸甩回去说乱码了看不懂</p></li><li><p>他拿着刀问我是不是想欺负少数民族我只好买下他的切糕</p></li><li><p>上课我看武侠小说正起劲老师突然朝我扔粉笔我大喊:有刺客!</p></li><li><p>特大喜讯敢死队顺利完成任务无一人生还不辱使命</p></li><li><p>这下出乱子了刚过奈何桥的时候孟婆忘记把汤锅放在哪了</p></li><li><p>大街上不让抽烟男厕所人满了我只好进女厕所碰碰运气</p></li><li><p>考古学家在玩躲猫猫游戏时发现了千年古墓随即刻下到此一游</p></li><li><p>我刚刚举报了一家网吧，里面玩CF的玩家私藏军火</p></li><li><p>吃完晚饭我很有绅士风度地先送老婆回家</p></li><li><p>关羽温酒斩华雄回来后大骂这保温杯质量也太差了些</p></li><li><p>洗完澡我的防御力又掉了200多</p></li><li><p>我院蹦极设施因违法临时搭建，现需要大量鞋带，捐献鞋带者免费试玩</p></li><li><p>看完龙傲天小说的小明举起菜刀冲进警局大喊战个痛快</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话9]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D9.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>法庭上离婚夫妻反目成仇争夺孩子抚养权最终达成协议孩子一人一半</p></li><li><p>已经快半年了，没被贴过一张停车罚单，可惜这种好日子就快到头了，冬天快到了，车上要是再不装几块玻璃就有点冷了。</p></li><li><p>随着裁判一声枪响,运动员被当场击毙</p></li><li><p>物理老师边做试验边说：这个实验接的是高压电源源源源源源源源源源</p></li><li><p>妈妈逗小明说他垃圾场捡来的，小明不信指着屁股上检疫合格的图章</p></li><li><p>司令一刀砍下自己的手说你们再敢反抗就是这个下场</p></li><li><p>清洁工李阿姨说不好了，男宿舍楼集体感冒，卫生纸都是清鼻涕</p></li><li><p>看着孩子们欢快的跳进游泳池,我娴熟的摸出火锅底料往里撒</p></li><li><p>广东一男在宿舍开空调时未能找到遥控器给冻死暴毙于床底</p></li><li><p>皇上给公公们一人发了一本辟邪剑法欲组成军队讨伐倭寇</p></li><li><p>希腊联军躲在特洛伊木马里憋了一天一夜第二天一出来就满城找厕所</p></li><li><p>钱会计发现买来的冥币是假钱找小贩对质称怎么连毛主席水印都没有</p></li><li><p>惊！男子吐痰太急与嘴唇擦出火星后致使脸部二级烧伤</p></li><li><p>纪晓岚把和珅辩得哑口无言和珅气急之下当场就来了段rap彻底扭转败局</p></li><li><p>百度云储存推出当天是大晴天万里无云李彦宏痛哭流涕称愧对网民</p></li><li><p>见到从韩国整容回来的小红 刘保安直呼毫无PS痕迹</p></li><li><p>我正在家挖洞，什么时候才能到美利坚。</p></li><li><p>我们沿着敌人的血迹追了三天三夜最后发现他失血过多早已死去</p></li><li><p>警方通过民主选票评选出本次案件的凶手赢得嫌疑人们的交口称赞</p></li><li><p>刚才喝了蒙牛航天烈士专用奶，我什么时候能登船</p></li><li><p>从80层高楼跳下去下落到40层的时候我突然不想跳了</p></li><li><p>学校防洪演练为了达到逼真效果小明把水坝炸了</p></li><li><p>真的我挖开坟头的时候他已经没有呼吸了</p></li><li><p>华尔街日报:肾脏或将取代黄金成为国际货币流通的主要交易手段</p></li><li><p>晚上做梦在吃臭豆腐 然后第二天起床发现少了一只袜子</p></li><li><p>小明回家不幸遇到抢劫犯 机智的他拎起国庆作业抡死了歹徒</p></li><li><p>我市的专家在不懈努力下终于研究出高端核弹，光引线就两米长！</p></li><li><p>老板我有精神分裂症你只管我一碗饭不够我们3个人吃啊</p></li><li><p>王老汉刚才回家发现忘记带钥匙，他被锁在外面了,于是他从外面爬上四楼打开窗户取出钥匙又爬下来开了门</p></li><li><p>我已经藏在这里半年了为什么他们还没有找到我。</p></li><li><p>特警考试真简单 送来个定时炸弹我三下五除二就给设置上5分钟起爆</p></li><li><p>蒙牛更改生产日期称其实我们这是酸奶</p></li><li><p>我去基地组织应聘可他们非要我露两手于是我摘下了手套</p></li><li><p>徐特立越讲越怒抄起菜刀砍掉学生手指写下“驱除鞑虏恢复中华”</p></li><li><p>刚才玩刀塔玩的太入迷了，小偷把我电脑偷了都没发现……</p></li><li><p>眼瞅火势就要蔓延开来了，只见小明不慌不忙把红内裤穿在了外面</p></li><li><p>“555，妈，我在意大利，这里火山爆发了”“别急，心静自然凉”</p></li><li><p>历史老师说乔治三世这个人非常好色居然连母苍蝇都不放过</p></li><li><p>看见队友将球向自己踢来，守门员王老汉抱头蹲地瑟瑟发抖</p></li><li><p>今早快到学校时突然不想去上课了我戴上墨镜趁着夜色原路返回</p></li><li><p>日本武士让我站着别动让他发个大招，然后就剖腹自杀了</p></li><li><p>二愣子苦练金钟罩二十年，终于学有所成把自己卖了个好价钱。</p></li><li><p>牛郎头被苹果砸了一下之后一直以为自己是英国人名叫牛顿</p></li><li><p>自从我买了把西瓜刀后我不会再为乘公交没座位烦恼了</p></li><li><p>小战士在菜刀喷酒精后点燃，成功拍出烈火刀法将鬼子砍掉半管血</p></li><li><p>八辈子缺德娃把写有“生意兴隆”的门联贴在王寡妇家门前</p></li><li><p>许仙许仙你老婆把葫芦娃抓来了</p></li><li><p>王老汉自称最危险的地方就是最安全的地方纵身跳进火化炉</p></li><li><p>为了出场能吐出炫酷的雾气，王老汉忍痛喝下王水</p></li><li><p>孔乙己为拯救车轮下那只幼小的生命，将铁轨轻轻的卸下</p></li><li><p>刘备三顾茅庐 最终诸葛亮还是没有把洗手间让出来</p></li><li><p>小明看了杰克逊相片后疯狂用橡皮擦擦自己意图漂白</p></li><li><p>小明身背三斤二踢脚声称要完成人类登月计划</p></li><li><p>耳机缠到一起了，看来今天晚上又不用睡觉了</p></li><li><p>抓到苍蝇后要怎么虐杀它才有快感？</p></li><li><p>一道优美的弧线,王老头360度转体曲体落地,难度系数9.0，一点血都没溅起,血花压得很好。</p></li><li><p>老板娘说这包子是素的她这好几天都没人肉卖了，让我放心吃</p></li><li><p>想当年我也是算命一把好手你是男是女是人是狗一眼就能瞧出来</p></li><li><p>武装部决定接手这包从太空回来的摔炮</p></li><li><p>我的钱包丢了，夹在里面的欠条也丢了，可以不用还钱了，好开心</p></li><li><p>我悄悄的赠送给这名孕妇一把剪刀，然后缝好了她的肚子。</p></li><li><p>一男子梳着清朝的辫子上街狂砍非主流大喊留头不留发 留发不留头。</p></li><li><p>科学家们正在训练一只肥羊说人话，企图感化狼孩儿恢复人性</p></li><li><p>这几天刮台风请大家不要再往报社打电话说有超人在天上飞了好吗</p></li><li><p>篮球的历史可以追溯到石器时代，只不过那时的伤亡率比较高</p></li><li><p>薛定谔跑进地府把自己家的猫从生死簿上一把划掉</p></li><li><p>我要投诉公交公司，都投了三块硬币，那个司机也不让我开一局。</p></li><li><p>八辈子缺德娃用纸片剪了个等腰梯形贴在了男厕标志上</p></li><li><p>每次给病人开刀之前他总是吃一片健胃消食片</p></li><li><p>一乞丐牵着两条乱吠的藏獒向我推销打狗棍，买还是不买？</p></li><li><p>狼牙山五壮士荣获奥运会100米团体蹦极冠军</p></li><li><p>马子叔锯掉了自己的双腿，终于治好了困扰多年的灰指甲</p></li><li><p>我在自动贩卖机旁等了六个小时始终不见老板来</p></li><li><p>我吃火龙果的时候被那些像芝麻的粒粒卡到了，好难受</p></li><li><p>我院著名神偷李老汉，今日在超市把所有顾客篮子里的货都偷到了自己的篮子里</p></li><li><p>每次抢银行前我都要收集好人卡才行动以免失败被捕没法证明自己是良民</p></li><li><p>王老汉提着菜刀追杀我，我顺手用诺基亚挡了下来</p></li><li><p>王老汉在被台风刮向空中的那一刻高呼自己的御剑术终于大成！</p></li><li><p>王二小从小修习韩文，长大后成了著名的训狗师。</p></li><li><p>家里没盐了，小明将佳洁士盐白牙膏加到菜里</p></li><li><p>大臣们分分建议，无码分尸太BT还是打上马赛克好</p></li><li><p>韦小宝收集了七个老婆后，成功召唤出神龙教主</p></li><li><p>小明为了看到太阳每晚22点都准时起床，可是一无所获</p></li><li><p>去非洲大草原旅游时我趁院长没注意在他包里放了一瓶急支糖浆</p></li><li><p>天上的星星一闪一闪好像眼睛一样一眨一眨吓得我睡不着觉</p></li><li><p>由于天气太热院长组织大家在院里跳绳欲把地球踩离太阳</p></li><li><p>在食堂用餐的顾客请注意，谁拾到一幅假牙请归还给主厨吴师傅</p></li><li><p>听说有个考生叫麻花疼校长又派了出五十位老师去此班监考</p></li><li><p>黄医师说我得了白血病我滑破手腕一看原来是虚惊一场</p></li><li><p>王老汉说他横扫敬老院没人敢动他，一大早就扛着扫把去了</p></li><li><p>对于每天都有人打电话来找搜查一课的目暮警官的现象东京警视厅发言人表示十分无奈</p></li><li><p>今天早上用了一个小时时间吃完了夜宵</p></li><li><p>天气预报说今天要下雨，我就拿着香皂毛巾出来了</p></li><li><p>运动会口号：十七十七高三十七去年高二前年高一！</p></li><li><p>在得知暗恋对象喜欢吃虎皮青椒后，武松高兴的上了景阳岗</p></li><li><p>飞机上我拿着头等舱的票把抢我座位的机长打晕了扔在了厕所里</p></li><li><p>终于把女朋友打成了我喜欢的样子</p></li><li><p>昨天随便把激光笔往天上照了照今天美国人就说他们的卫星又被干扰了</p></li><li><p>小明从网吧出来遇见歹徒，淡定地说，等等，我先存个档</p></li><li><p>超市内两购物车相撞驾驶员当场死亡多人受伤</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话8]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D8.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>看着植物人们大块大块的掉头发，我就知道冬天快来了</p></li><li><p>语文老师请假三天之后校长的公文里开始出现大量错别字</p></li><li><p>院长狂吃十吨苹果后终于成为恶魔果实能力者</p></li><li><p>艾滋病患者小明吃掉了整整两勺砒霜声称要以毒攻毒</p></li><li><p>我有位称职的保姆，她每天晚上十点半准时叫醒我父亲吃安眠药</p></li><li><p>王老汉从牙垢里翻出一个大虾仁回忆起八年前食堂吃的那盘口味虾</p></li><li><p>隔壁的老头老太太每天上楼下楼几十趟，声称在和死神赛跑</p></li><li><p>楼上的人真没素质从窗户往外扔垃圾害得我都不敢伸头出去吐痰了</p></li><li><p>救命啊我被查表的按键盘上了啊shjgf43h7uybtfasd</p></li><li><p>地震的时候人们都跑了拆迁队员还在奇怪今天怎么这么顺利</p></li><li><p>节约点！今晚用酒精灯煮火锅吃</p></li><li><p>玩求生之路输了秘籍后我的机关枪变成了一颗豌豆。</p></li><li><p>王老汉把全家放满水孜孜不倦的享受着室内游泳的乐趣</p></li><li><p>我把宿舍的避雷针改装成无线路由器，这样一打雷就可以免费上网了</p></li><li><p>来人呐，都给我退下！——皇上如是说</p></li><li><p>只听黄继光大叫一声“老子是CF会员”掏出黄金AK击退美军一个师</p></li><li><p>陈总在员工大会上慷慨激昂赢得一片掌声突然发现走错了会议室</p></li><li><p>今天我的名字突然变红是否全城人民都要追杀我爆我装备?</p></li><li><p>打死了第5万个美国鬼子之后，志愿军战士小王头上蹦出俩字：升级</p></li><li><p>田忌笑着对齐王说用旋风冲锋就可以打败对手的音速战神了</p></li><li><p>刚刚有个瞎子说看我面相，有帝王气质。</p></li><li><p>我的儿子老是要玩电脑我把家里的220V的电线连在了他的大脑上。</p></li><li><p>下了很大的决心今晚要去小卖部商店里洗劫一空</p></li><li><p>看到此地无银三百两几个字后院长乐呵呵的掉进了坏人挖的粪坑</p></li><li><p>独臂杀人犯因为无法戴上手铐被当场释放。</p></li><li><p>为了让瘫痪老头得到有效锻炼缺德娃轻轻地摘下了氧气罩</p></li><li><p>我们现在演练坠机飞行员已经被我打晕了大家不要紧张</p></li><li><p>美国一位中年男子因欲自杀被警方当场击毙。</p></li><li><p>面对着熟睡的室友我大声唱起好运来为他们梦中助兴</p></li><li><p>孙子早上空腹喝牛奶去上学被注重养生的爷爷打得连胆汁都吐了出来</p></li><li><p>为破除封建迷信我市市长亲自开坛做法超度妖魔鬼怪</p></li><li><p>麻痹我每次打扑克同学一出无懈可击我就要输五百元这怎么回事</p></li><li><p>那天老夫正在渡天劫被电得死去活来，我妈就过来把插头拔掉了</p></li><li><p>正着背圆周率太容易了我打算倒着背</p></li><li><p>剃头仪式完成后方丈吸了口大雪茄笑着说要给我点几个大戒疤</p></li><li><p>凶残的敌人将卸妆液倒向了刘胡兰</p></li><li><p>和表弟玩捉迷藏他输得最惨的要数躲进高压锅的那一次</p></li><li><p>刚才骑车时一只虫子飞进了我嘴里，于是我当机立断喝下敌敌畏</p></li><li><p>佛教讲究轮回我这辈子是个弱智下辈子就是霍金</p></li><li><p>由于好久没参加比赛在发令枪响的那一霎那刘翔吓得拔腿就跑</p></li><li><p>“当有一扇门关上的时候，就会有另一扇门开启”我就有一辆这种破车</p></li><li><p>“师傅，帮我配把这个钥匙！”老师傅接过我的钥匙娴熟的按下了Ctrl+C ，Ctrl+V</p></li><li><p>敬业小偷国庆节还加班加点受到广大市民追捧</p></li><li><p>癞蛤蟆看完”丑小鸭”以后把农场的鸭子全吃掉了</p></li><li><p>我历尽千辛万苦终于抢到传说中的武林秘籍一看竟是《眼保健操》</p></li><li><p>喂？新华社吗？我杀人了 请问我什么时候才能上头条？</p></li><li><p>吃了一个月素的师徒三人仰望着天空叹息：“八戒，我们想你了。”</p></li><li><p>僵尸们正在商店门口排队买铁桶欲酝酿一场大阴谋</p></li><li><p>睡神拿着他的大锤，将每一个不听话的孩子砸进梦乡里</p></li><li><p>自从富士康连环跳发生后，许多宿舍的楼顶多了几瓶农药。</p></li><li><p>中秋节到了广大市民吃粽子看春晚一派喜庆景象</p></li><li><p>据报道，一名人病故的前一天，各地教堂已经为他举行葬礼仪式。</p></li><li><p>刘关张结拜张问刘拜谁？刘说拜关二爷混社会的都拜他</p></li><li><p>霍金趁机将肌肉萎缩成了黑洞把这些民科人士一网打尽</p></li><li><p>近日全国老鼠街头抗议毒鼠强食品公司产品几十年口味不变吃腻到吐</p></li><li><p>晚上回家发现煤气泄漏了，于是我点上一根烟冷静下。</p></li><li><p>屠户在家被碎尸案警方疑为养猪场猪群集体报复行为</p></li><li><p>看着刚正在坐月子的母鸡，公鸡赶紧炒一盘荷包蛋给母鸡补身子</p></li><li><p>小明妈妈难产他的时候死了，小明被判过失杀人罪。</p></li><li><p>出于人道主义的考虑科学家们决定通过注射硫酸烧死这名神棍</p></li><li><p>为什么我吃了三斤粮票还没饱？</p></li><li><p>早上起来背单词发现有个字母还不认识怎么办</p></li><li><p>做了个好可怕的梦！醒来十月八号了！！</p></li><li><p>每次出席晚会奥巴马都要换上一身白色礼服以免聚光灯找不到目标</p></li><li><p>班费时常不知去向老师夸我将来肯定是当官的命</p></li><li><p>奥巴马白宫开会开到一半突然所有的电视都转到了新闻联播</p></li><li><p>明天就要去机关单位上班听说里面很多机关防不胜防我很担心</p></li><li><p>吃完毒蘑菇，校长踩死副校长从三楼一下跳到旗杆上，顺利过关</p></li><li><p>为了唤醒跳楼者童年的记忆，谈判专家播放起俄罗斯方块的配乐</p></li><li><p>看什么看，没见过戒网的啊，老子是来签到的</p></li><li><p>物理课上老师说今天我们就来搭一个核反应堆</p></li><li><p>物理课上老师带我们学习了化学著作钢铁是怎样炼成的</p></li><li><p>戒除虚拟网络生活从我做起每日签到贴求监督</p></li><li><p>开丹炉之前，太上老君虔诚的给自己上了一祝香</p></li><li><p>仙界引进社会主义开始大炼钢铁把数十万没用的飞剑炼成一万好钢</p></li><li><p>有证据表明钓鱼岛就是明教教主张无忌故居冰火岛。</p></li><li><p>那些偷渡死在海上的人是去地府还是地狱？去地狱不会洋文咋办？</p></li><li><p>您好顾客现在持对面超市被砸烂的商品均可在本店兑换精美礼品一份</p></li><li><p>要听故事的孙子听到一半竟然睡着，被王老汉一盆冷水浇醒接着听</p></li><li><p>钓鱼岛成为民众焦点，只因传说岛上藏着屠龙宝刀和九阴真经</p></li><li><p>对不起您拨打的电话已死机请您稍后再拨</p></li><li><p>两国领导会见相谈甚欢翻译官满头大汗直冒 哭道我编不下去了</p></li><li><p>钓鱼岛地图已经设计好就等双方红警赛争夺</p></li><li><p>食堂总督范大彪每天都顺走手术室的内脏防不胜防</p></li><li><p>及时赶到的特警迅速围拢到一起冲着定时炸弹吹气</p></li><li><p>原来想要把佛跳墙这道菜做好的关键因素要有一个上好的骨灰盒</p></li><li><p>喊了半天也不见答应，老师气愤的把自己写上缺席名单</p></li><li><p>死后第一天我就把我欠下的钱全部还清了真是开心</p></li><li><p>医生把我的嘴巴鼻孔耳朵都堵上说是要叫细菌得幽闭症自杀而死</p></li><li><p>可恶！我把魔方前五面都转出来了，可是这最后一面怎么也不行。</p></li><li><p>持枪歹徒冲进了学校最终获得硕士学位</p></li><li><p>奇怪我每次出门他们都种西瓜看来今天要戴铁桶了</p></li><li><p>歹徒不肯杀死人质谈判顿时陷入僵局</p></li><li><p>外来民工小明向银行贷款500万捐给了希望工程</p></li><li><p>法医从毛利小五郎脖子里取出几百根钢针痛哭称凶手太残忍</p></li><li><p>老乡，我们是八路军，我们来查水表了。开门啊老乡，八路军是有纪律的，我们不拿群众一针一线。老乡，开门啊老乡。你不开门我们开枪啦。</p></li><li><p>去装机我说要散装CPU老板从兜里掏出一把碎片叫我回去慢慢拼</p></li><li><p>为了防止学生因压力过大而跳楼，教育局免费为广大学子截肢。</p></li><li><p>乘务员跟我说你不要开手机就算开了也没用飞机飞太快信号追不上</p></li><li><p>清政府将八国联军诱入圆明园然后火烧外国蛮夷</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话7]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D7.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>海平面上出现海市蜃楼被我市城管依法拆除</p></li><li><p>为破除迷信志愿者向村民们捐赠了鬼片</p></li><li><p>为提高小朋友抵抗力我市要求所有幼儿园在饭里下砒霜</p></li><li><p>第一次装win7，感觉挺好挺流畅的就是缺个显示器</p></li><li><p>首先映入新生眼帘的是停尸间墙上四个金灿灿大字：没事儿走两步</p></li><li><p>八路军钻进网吧苦练八年CS终于打败了日本鬼子</p></li><li><p>小战士递给重伤班长一瓶钢笔水：快喝 这是我最后一瓶红了</p></li><li><p>结婚7年了老婆一直不知道我暗恋着她</p></li><li><p>这些天一直没做梦 大夫说我格式不支持</p></li><li><p>小偷四个月后再次上门 称怀念失主家冰镇芒果</p></li><li><p>科学研究表明十个塑料袋就能把一个成年人完全封印住</p></li><li><p>为了防止卧室里有讨厌的蚊子烦人，我一把火把卧室烧了。</p></li><li><p>王老汉囤积大量豪华棺材，准备在世界末日大赚一笔。</p></li><li><p>嘿嘿国庆作业不多 半个小时就可以在作业上写完所有名字</p></li><li><p>据科学研究：建议每天睡觉时间不宜超过24小时</p></li><li><p>自从进入手机厂工作后，我的手机都没有坏过了</p></li><li><p>听到有人大声嘶喊快救火 我义不容辞把水管打了结 火最终得救了</p></li><li><p>课堂上突然冲进刘关张将正在朗读曹操诗的同学斩首</p></li><li><p>诸葛亮草船借箭构成诈骗罪一审被判无期徒刑</p></li><li><p>眼看大火就要控制不住了消防队员立刻运功开始召唤水元素</p></li><li><p>为了证明红领巾是鲜血染成的学校老师已经死了七成了</p></li><li><p>龙王派遣十万虾兵蟹将登上岸攻打我市所有海鲜餐馆</p></li><li><p>不知道满清十大裤型适不适合我</p></li><li><p>终于将法伦宫练到渡劫期巅峰了，现在只差找一块风水宝地，一罐汽油，准备渡劫了</p></li><li><p>已经更新到第一千零伍拾柒章了，御弟劳烦再往西天一趟</p></li><li><p>爱迪生为了发明电灯经过千百次试验终于把供电局给搞破产了</p></li><li><p>我实在是难受就自己拆线把大夫留肚子里面的剪子取了出来好舒服啊</p></li><li><p>唐僧不远万里西天求取真经足以说明唐朝假冒伪劣相当的猖獗</p></li><li><p>历史学家称在剧院食用小小酥是林肯死亡的重要原因</p></li><li><p>校长考察完我班激动的握着语文老师的手说这节体育课上的太出色了</p></li><li><p>表哥的发型太帅了我也忍不住把手伸到了电线上</p></li><li><p>这双鞋是真皮的王老汉品尝完对此深信不疑</p></li><li><p>赢政因为大学4级英语不过关，一怒之下坑杀了全校的英语讲师，烧毁了全部英语教材，史称焚书坑儒</p></li><li><p>我用左手洗完了右手 拿什么洗左手呢 从不洗手的小明这样回答</p></li><li><p>火灾现场，火警冲入大楼，围观人们纷纷喊道七成熟最好！</p></li><li><p>吃了十年的泡面今天突然发现里面的干燥剂和面一块煮过之后很好吃</p></li><li><p>买馒头发现长毛变绿了老板说这是绿色食品我该相信他吗</p></li><li><p>小明愤怒地推开饭碗，厉声道：狗都不吃。</p></li><li><p>天天被侵犯隐私的大肠杆菌一怒之下把生物教授全家告上法庭</p></li><li><p>王老师说谁答不出问题谁今晚请谁喝一瓶502</p></li><li><p>眼看要坠机机长一咬牙支付了五百块信息费拨通了M78星云的电话</p></li><li><p>吃了被门挤过的核桃小明挂科了</p></li><li><p>小明吃红烧牛肉味面吃出牛肉，专家表示解释不出其中原因</p></li><li><p>王老汉收集了满满一大罐浓痰打算感冒时以毒攻毒</p></li><li><p>王老汉收割机刹车失灵造成多起麦田怪圈事件</p></li><li><p>我市遭遇强台风侵袭目前警方已将龙王爷拘留</p></li><li><p>先生，公交车上禁止吸烟，我这有点大麻你先拿去缓缓</p></li><li><p>我市持续低温消防队装备火焰喷射器挨家挨户送温暖</p></li><li><p>犯人们吃了口德芙结果被不知从哪里飘来的丝带勒死了</p></li><li><p>面对残暴的歹徒，删帖哥一怒之下删掉了对方的账号</p></li><li><p>课堂上班长溜出教室不幸踩到老师布置的机关遭万箭穿心</p></li><li><p>我买了瓶矿泉水吃出小石子卖家说这是矿物质我该相信他吗？</p></li><li><p>金融海啸怎么还不来啊我在海边都等了四年</p></li><li><p>黄继光中弹之后才意识到连长送他的护身符原来是块吸铁石</p></li><li><p>少年挥刀自宫，感人肺腑催人泪下，为计划生育迈出实质性的一步。</p></li><li><p>外面风大,老奶奶说着把小孙子扔进汤锅暖暖身子</p></li><li><p>周一早上红旗冉冉升起阴风怒号召来十万红军英魂</p></li><li><p>光棍节在行动：电影院每隔一个座位放一个大地雷</p></li><li><p>一直庆幸自己小学毕业就没上学了，不然看这么多教科书实在太危险</p></li><li><p>看到小朋友正在打雪仗我也开心地朝他们扔了个手雷</p></li><li><p>食人族部落俘虏多名索马里海盗，只因酋长想吃海鲜</p></li><li><p>八辈子缺德娃在我家门前放了一台跑步机害我无家可归</p></li><li><p>幸亏牛顿当时是在苹果树下要是在西瓜树下那不得成脑震荡啊</p></li><li><p>作为一个高智商，王老汉只用java语言和人交流</p></li><li><p>理完发之后走出发廊只见招牌上写着少林寺顿时感到头顶一丝凉意</p></li><li><p>为节省军费司令部下令以后我军将士使用CS1.5进行活靶练习</p></li><li><p>因不满学校食堂饭菜口味全体厨师已绝食罢工一个礼拜</p></li><li><p>特奥会冠军痛苦流涕，只因教练告知金牌里没有巧克力</p></li><li><p>上课了我把老师锁在门外并帮他叫了一份外卖</p></li><li><p>小明在家里最困难的那几年把一块钱撕成两半花</p></li><li><p>草船借箭完毕诸葛亮定睛一看发现稻草人上插满诺基亚</p></li><li><p>今天炸了一家银行成功缓解了人口过多跟通货膨胀的问题</p></li><li><p>愚昧无知的煤气罐受邪教的影响 走到客人面前自焚</p></li><li><p>弱智恐怖分子将计算器连接到定时炸弹上作为剩余时间显示器，结果0秒之后还有负一秒 负二秒 负三秒. …</p></li><li><p>好消息化工厂持续排放污水有毒瘾的朋友不妨过去喝两口</p></li><li><p>院长坚持穿开裆裤四十余年称要保留那份纯真</p></li><li><p>据我多日观察在院门口卖羊杂汤的清真饭店可能进行非法器官交易</p></li><li><p>鲁智深说：先来十斤切糕，全部切成臊子，不要有一点核桃仁在上面</p></li><li><p>为创建全国风湿骨病大县，县长要求洒水车每天三洒</p></li><li><p>护士刚喂完水 植物人小强全身长出树杈</p></li><li><p>运动会上选手小明的标枪绕地球一圈将自己刺死</p></li><li><p>发射卫星、我们不再用火箭、我是卖弹簧的</p></li><li><p>一觉醒来发现自己睡在空地上吗的谁把我家的房子给偷走了</p></li><li><p>值此情人节之际棺材厂推出情侣棺材八折贱卖</p></li><li><p>一位参与生化危机拍摄丧尸接受采访说：要不是导演答应电影拍摄完毕后有全国墓地15日游，早就把里昂吃了。</p></li><li><p>康熙看完香港僵尸电影把满朝文武都杀了</p></li><li><p>火灾现场记者对尸体进行采访 但三缄其口疑收了封口费</p></li><li><p>为了打倒魔王 勇者在被窝里放了7个葫芦打算生几个葫芦娃</p></li><li><p>我市发生山体滑坡现场群众纷纷钻入土中等待记者赶到</p></li><li><p>在连杀八百人后吴老汉终于掌握了借尸还魂技术</p></li><li><p>满汉全席就是一桌子全是大汉座无虚席女人是不能上桌的</p></li><li><p>为了拯救触电的病友我先用万用表和他并联测了一下他的电压</p></li><li><p>被孙悟空弄走了定海神针东海老龙王灵机一动下令逮捕匹诺曹</p></li><li><p>好消息中国科学家陈医生因为发现了SB型血型获得了诺贝尔医学奖</p></li><li><p>自从如来压了孙悟空500年之后他的手就再也没洗干净过</p></li><li><p>看到”鸟巢”上空升起蘑菇云众人纷纷称赞今天的烟火表演好</p></li><li><p>看到火柴盒上写着安全二字，小明心安理得的划了一根扔进了油桶</p></li><li><p>出狱仪式上，犯人们听着优美的《何日君再来》流下了感动的热泪</p></li><li><p>将其推入手术室，细细切做臊子</p></li><li><p>超人因体内长了个瘤子医生无法开刀而死</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话6]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D6.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>每次上课睡觉都觉得对不起我的学生们</p></li><li><p>眼看火势变大了我们高兴地在火海里游起了泳</p></li><li><p>设置好密码我就把键盘扔了看谁还能盗我号</p></li><li><p>死者惨遭碎尸经陈医师尸检称自杀</p></li><li><p>明白物极必反的肇事司机反复碾压伤者</p></li><li><p>从明天起我要以细胞代表大会制度的方式控制自己的身体，同时在神经系统领导下，各系统、各器官、各组织和微生物各界的代表，以全身细胞政治协商会议为组织形式，经常就身体的大治方针进行民主协商</p></li><li><p>经研究，6500万年前恐龙灭绝于降龙十八掌</p></li><li><p>禽流感患者对着记者的摄像机打喷嚏导致疫情蔓延全国</p></li><li><p>洗澡时搓背够不着，王道士使出灵魂出壳成功的给自己搓背</p></li><li><p>救命，我得了睡眠综合症，每晚都要睡觉，快痛苦死我了</p></li><li><p>刚做了根雷管可不知道怎么用，我一怒之下扔到了灶台里</p></li><li><p>我得了口腔结石 上下长了两排白色的小石子 真碍事</p></li><li><p>刘禅打开诸葛死前遗留的锦囊一下摸出两张闪电直呼内奸坑主</p></li><li><p>打气筒里面的气用完了该怎么办</p></li><li><p>第一次来电影院好紧张好久都没找到快进按钮</p></li><li><p>今天看了甄子丹打斗镜头一整天 这得把他累死了吧</p></li><li><p>唐僧一行走错方向大闹欧美 牛头人蜘蛛侠骷髅王均被误杀</p></li><li><p>小明凭借着单手反身扣篮纵横足球界</p></li><li><p>酒鬼化学老师一脚踢翻了我正在稀释的乙醇，骂我兑水。</p></li><li><p>今天比闹钟起得早，身为闹钟一定感到很惭愧吧</p></li><li><p>机智的水表大队在炸掉小明家家门后从窗户翻了进去</p></li><li><p>工厂向河里排放大量化工用盐称要为市民制作免费鱼汤</p></li><li><p>中国人发明的火星文为以后殖民火星做准备</p></li><li><p>温水煮青蛙的典故告诉我们烹饪青蛙不需要盖上锅盖</p></li><li><p>河南老兵回忆：董存瑞牺牲那天依稀记得是在玩游戏：123木头人！</p></li><li><p>王老汉为吃面用叉子还是勺子这一难题琢磨了一晚上</p></li><li><p>市政府砍光我市所有树木以此号召市民踊跃植树</p></li><li><p>朋友中了50W正愁怎么花我二话不说把他暴打至医院</p></li><li><p>为了营造3.15节日气氛我打掉了敬老院所有老人的假牙</p></li><li><p>王警官默默按下冲水马桶，等待凶手浮出水面</p></li><li><p>今天是植树节我带上硬盘在后院种下了150g种子</p></li><li><p>洗澡洗到一半没水了只好把身子重新弄脏当作没洗过</p></li><li><p>我把月饼盒里的料包撒在了月饼上为什么更难吃了</p></li><li><p>着火的公交上小明用安全锤开出一条血路</p></li><li><p>战场上我方处于劣势,众将士拉开手雷扔向各自脚下,称宁愿死也不让敌人获得杀人积分</p></li><li><p>因方向感太差王老汉离家出走三年后发现家就在对面</p></li><li><p>看着越来越多的僵尸小明一拳打碎屏幕保住了自己的脑子</p></li><li><p>其实我是哑巴，我以前说的话都是在伪装</p></li><li><p>狙击手已经在距离小明一米的地方监视许久</p></li><li><p>家人说我已经分不清游戏和现实了我立马跳楼证明身上有复活盾</p></li><li><p>只见诸葛亮从兜里掏出一张万箭齐发曹操便全军覆没</p></li><li><p>一男一女坠入爱河,无人搭救不幸淹死。</p></li><li><p>为什么做眼保健操的时候操场除了我一个人都没有?</p></li><li><p>都高三了 我怎么可以浪费时间上厕所呢</p></li><li><p>我已经带了一把超大斧子准备去菜市场大砍价</p></li><li><p>园长大事不好啦饲养员把熊猫洗褪色啦</p></li><li><p>我发现去献血车可以免费洗胳膊</p></li><li><p>结婚的时候伴郎伴娘的作用是现场示范吗</p></li><li><p>维思向逆有具否是试测来用以可话句这</p></li><li><p>某一小学生因CF技术好被保送至皇家军校。</p></li><li><p>怕洗碗的王尼玛决定以后不吃饭了</p></li><li><p>俺去年在南海扔了一箱瓶子，怎么一个回复也没有？</p></li><li><p>现实生活没有背景音乐导致我真的不知道什么时候应该紧张</p></li><li><p>女娲补天的技术不行，还是经常漏水</p></li><li><p>人大代表建议制定反自杀法对自杀的人进行3-50年或枪毙不等的刑罚</p></li><li><p>为了提高军队战斗力部队给每个战士都配备了红领巾</p></li><li><p>得知非洲很多国家缺水喝院长带头捐助了一亿杯香飘飘奶茶</p></li><li><p>李老太研究国学多年提出掩耳盗铃的后果是手根本不够用</p></li><li><p>最新出台法规抢银行所得收入须缴纳60%个人所得税 劫匪们叫苦不迭</p></li><li><p>自从听说了大型公共场所可以吸到免费的二手烟我终日潜伏在淘宝商城</p></li><li><p>我表弟把手机忘在我家了，我发短信过去让他回来拿，结果他就是不回复我的短信</p></li><li><p>古稀老人半夜溜进女生宿舍只为寻找那当年的感觉</p></li><li><p>世界名人蜡像馆即将开业欢迎全世界名人鬼魂附身</p></li><li><p>儿子为了帮我戒烟在我的香烟里塞了一个火柴头</p></li><li><p>家里被炸了一个大洞但小明坚持用钥匙打开家门</p></li><li><p>今天我吃了一个馒头馅的包子</p></li><li><p>为什么我游泳时喝了那么多的水游泳池水位也没有下降？</p></li><li><p>正在手术台前思考左手刀还是右手叉的问题院长一个巴掌上来说：“你特么还是不是中国人，中国人用筷子！”</p></li><li><p>王老汉在酒吧点了一瓶1896年的营养快线</p></li><li><p>思想是不怕子弹的！看到这里林某激动地抄起水果刀冲向银行</p></li><li><p>一北京人在国外抱着人老外汽车的排气管不让走只因怀念家乡的味道</p></li><li><p>中国兵在塔利班受欢迎主要是自爆后可以大范围喷溅高密度幅射物</p></li><li><p>老师为了防止我们玩到猝死，每天补课23小时</p></li><li><p>美国国旗上到底写的什么 这么多屏蔽脏字的星号</p></li><li><p>最近我在思考一个问题：怎么将一块变成十块。</p></li><li><p>我已经连吃30盒象棋怎么还是没变帅</p></li><li><p>今天我在高速公路上开碰碰车玩，大家你来我往玩的可高兴了</p></li><li><p>马老汉胃寒陈医生让他注意保暖，马老汉回家立即吞了个热水袋</p></li><li><p>城管大队开展上街揍小贩的比赛获胜者能得到“街头霸王”的称号</p></li><li><p>小明听了爷爷讲三年饥荒的故事后很感动一口气喂爷爷吃了97个馒头</p></li><li><p>我心中一直有这样一个问题：你们上完厕所难道不洗脸吗？</p></li><li><p>最近天气转凉穷苦小伙剪下腿毛织衣取暖</p></li><li><p>邻家老太还不懂万有引力 不清楚把孙子扔下飞机的后果</p></li><li><p>专家：普通市民判断变压器是否漏电时触摸是最简便准确的办法</p></li><li><p>狱警称张大葛脱毛衣过快电流穿心爆毙在床</p></li><li><p>我怀疑周围的人全都在演戏我要找出太阳的总开关在哪里</p></li><li><p>暗恋多年的哑巴终于默认了我的求婚请求</p></li><li><p>在听说高温可以杀死细菌之后洁癖小明高兴地跳进了油锅</p></li><li><p>院长尽是坑我们 给我们发的什么火龙果 吐籽吐了一个小时了</p></li><li><p>化工厂废料泄漏中毒的市民已经被送往就近的戒毒所目前情绪稳定</p></li><li><p>乌鸦一口一口将小溪中的水吐进瓶子里终于喝到了瓶子里的水</p></li><li><p>小王玩网络游戏杀人无数被法院判处死刑</p></li><li><p>高位截肢的吴奶奶用仅有的头部向刘老汉问好</p></li><li><p>刘老师表扬小明自己动手抄袭作业</p></li><li><p>我校引进狗头铡确保您的孩子身首异处不再搞小动作</p></li><li><p>小兵扬言跳楼 然后从六楼走到一楼趴在地上 同学们吓坏了</p></li><li><p>下课了小明飞快地跑出厕所冲进教室</p></li><li><p>今年过年真高兴啊我们村不用鞭炮改用C4啦这次一定能把邻村比下去</p></li><li><p>我刚才吃了章鱼足片，现在感觉手脚有长出吸盘的趋势，我很期待效果！</p></li><li><p>都说吃啥补啥，我刚刚就吃了刚取的5万元。</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话5]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D5.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>只见司机摇开车窗伸出右手风驰电掣的扇了交警一个顺风耳光</p></li><li><p>敌军兵临城下我摸出军师的锦囊打开一看竟然是一份保险单</p></li><li><p>姑娘你放心吧我用AK47打耳洞已经是老手了</p></li><li><p>刘老汉浪迹天涯苦苦寻觅五十载终于在淘宝找到了绝世武功秘籍：上上下下左右左右BABA</p></li><li><p>山区女孩每天上学走20里路一个月走坏两双鞋，我惊呆了，太有钱了</p></li><li><p>高考后考生纷纷烧光书本和试卷支援地府乡村义务教育</p></li><li><p>父亲敲碎我的脑壳不用参加高考这能否算作缓兵之计？</p></li><li><p>想参军,做个工兵,所以现在天天在家玩扫雷</p></li><li><p>巨婴卡在下水道内哭泣警探灵机一动将其分割成数小块分批取出</p></li><li><p>夫妻新婚当晚因谁负责生小孩的问题大打出手</p></li><li><p>铁齿铜牙老太太试金币真伪竟发觉很好吃</p></li><li><p>为整治公交站小广告城管出动全部人员拆除所有站牌和候车厅</p></li><li><p>秦皇陵被盗专家称系装死的秦始皇本人所为</p></li><li><p>一公路旁立着限速15公里的路牌，众多晨跑者被罚得倾家荡产</p></li><li><p>上门讨债无果我怒火中烧强行再借给对方数百万誓要他家负债累累！</p></li><li><p>一帮傻逼团灭了老师不拆学校去刷低年级小屁孩被教务组翻盘</p></li><li><p>懂得哀兵必胜的军师每次在开战前都要把主将砍死</p></li><li><p>为加强校风建设学校购进大批造风机，强大的校风吹倒十二米宽的老树</p></li><li><p>反贪局成立“二奶卧底小组”受到广大市民好评</p></li><li><p>齐白石画的虾栩栩如生 连味道都一样</p></li><li><p>老婆把我的零花钱放到冰柜中说要冻结我的资产</p></li><li><p>把蚊子引到蚊帐关住这样我就能安心的睡地板了</p></li><li><p>小明的左手和右手开展象棋比赛大战三天三夜不分胜负令人惊叹</p></li><li><p>我在健身房跑了十公里后发现周围已经不认识了怎么办啊</p></li><li><p>眼看太阳越升越高，我闭上眼念了20多小时咒语才把它拉回地平线</p></li><li><p>为提高学生成绩老师准备用封神榜公布前一百名</p></li><li><p>比赛时我让队友把球传过来他却大声呵我说：你倒是打开蓝牙啊</p></li><li><p>恐怖分子准备夜袭奥巴马结果因无法看见目标导致行动失败</p></li><li><p>全班同学的膝盖骨都让我削掉了，怎么没发现有黄金？</p></li><li><p>长时间对峙之后公安干警强行闯入不想竟顺着歹徒所挖地道回到警局</p></li><li><p>我有严重的健忘症。上次忘记呼吸差点窒息死亡</p></li><li><p>汤姆猫这款暴力游戏深受耗子们的欢迎</p></li><li><p>王老汉吃下几块磁铁后顺着磁悬浮轨道滑行到上海省了车票钱</p></li><li><p>老奶奶平均每天被红领巾挟持过马路100回痛苦不堪</p></li><li><p>某市因为大力发展无座公车解决让座问题而荣获最高效率奖。</p></li><li><p>这位黑人兄弟长期蒙受着不白之冤</p></li><li><p>黄继光用口香糖堵住了敌人的枪口，使得后续部队能占领高地</p></li><li><p>囚犯刚逃出牢房发现手机电没充满，默默的回到牢房充电</p></li><li><p>诸葛亮六出祁山也没有找到厕所。</p></li><li><p>听说农夫山泉里兑水了，是真的吗？</p></li><li><p>喝了一大壶开水终于把肚子里的茶叶泡开了</p></li><li><p>我一个朋友真是吃了雄心豹子胆，现在动物园正联合警察到处找他</p></li><li><p>重走长征路活动进行一半宣告停止，参加的干部死伤过半。群众响应号召纷纷自制地雷手雷头发丝雷挖陷阱撬铁轨，表示要为此次活动还原出一个真实的情景</p></li><li><p>大旱三月中科院多名专家来到此地调查研究并开坛作法求雨</p></li><li><p>为了在集结号响起的三分钟内到达操场同学们争先恐后的从17楼跳下</p></li><li><p>我用身体挡住了校工的水枪使得草坪能够保持干爽。</p></li><li><p>迷路的小明一怒之下锤爆地球仪，只因找不到回家的路</p></li><li><p>美国最新研制的隐形坦克被军队弄丢了</p></li><li><p>飞机失事为了给飞机减重，我赶紧把几包降落伞扔下飞机！</p></li><li><p>苦练12年眼保健操只为用眼神杀死欺负过我的跆拳道黑带九段大汉</p></li><li><p>小明书店倒闭后下海经商不幸溺毙於浅水区</p></li><li><p>对染发向往不已的少女走进了油漆店</p></li><li><p>我把伴奏开到最大，以防止唱歌吵到街坊邻居。</p></li><li><p>正义市民为打入犯罪组织内部贩了十年毒。</p></li><li><p>为了减小地震的感觉我跟着房子一起跳了起来</p></li><li><p>小明疑因使用诺基亚自拍致脑震荡住院</p></li><li><p>你们用一次性餐具太浪费了！我每次用完饭馆的牙签都放回原处！</p></li><li><p>明天要去银行存钱，今天加班加点的再印一亿。</p></li><li><p>王老汉因在路边捡到一张冥币被牛头马面以巨额财产来源不明罪带走</p></li><li><p>王老汉四十年如一日护送小学生放学回家，终以骚扰儿童被捕</p></li><li><p>我的体育老师花了两亿到央视登广告坚决否认我的数学是他教的</p></li><li><p>瓦斯泄漏了，工头不让开灯，我灵机一动掏出了打火机照明。</p></li><li><p>经过八小时的抢救本应双腿瘫痪的老头终于可以在黄泉路上走了</p></li><li><p>连续下了两天的毛毛细雨终于把身上的肥皂沫子冲干净了</p></li><li><p>我总是想不通院长那么高身价的人为何总是亲自来撒尿？</p></li><li><p>小明第一次坐电梯就因为严重高原反应不幸遇难</p></li><li><p>机智的小偷化妆成老师走进教室，没收多台手机后潇洒离开。</p></li><li><p>疑因玩贴吧走火入魔，老李凌晨挨家挨户按响整楼门铃只为签到</p></li><li><p>作为一个资深美食家，我能在品尝食物后立刻判断是热菜凉菜</p></li><li><p>今天是全球停止呼吸一小时日 大批环保人士牺牲</p></li><li><p>如来因涉嫌绑架拘禁 虐待动物被当地警方拘留。</p></li><li><p>为了让同事准时下班买菜我把她的手指剁了下来放指纹机上打了卡</p></li><li><p>想知道俄罗斯方块到底是让摆什么图形才能过关啊？</p></li><li><p>算命先生给王老汉看命，掐指一算后指着他说你能活到死</p></li><li><p>接生护士手机时间快了十分钟导致孕妇早产</p></li><li><p>唯一知道如何做春梦不被打断的科学家已经入睡至今无法唤醒</p></li><li><p>我市工商局检查服装店时与店中塑料模特发生械斗全员光荣牺牲</p></li><li><p>连环杀人案迟迟不告破警察局长心急如焚决定自首</p></li><li><p>科学家计划将全地球灯泡点亮以研究暗物质遭奥巴马暴打</p></li><li><p>中央决心拿出一亿，安排四万名局级干部重走长征路。消息一经披露，引起网民热议，人民群众纷纷表示不要任何报酬，自愿扮演国军、地方军阀进行围追堵截。保证让他们一个都活不到陕北。</p></li><li><p>政治考试的时候老师用一个隐蔽的眼神告诉了我卷子的所有答案</p></li><li><p>算命的说我印堂发黑然后拿出一瓶巴黎欧莱雅</p></li><li><p>人伦惨事：一夜之间输光欢乐豆，妻离子散家破人亡.</p></li><li><p>老黄打游戏走火入魔，天天打媳妇升级</p></li><li><p>愚翁坚定不移感动了玉皇，于是玉皇决定派两名神仙下凡实况转播</p></li><li><p>小明心想既可以洗澡又可以洗衣服可真是一举两得于是钻进洗衣机中</p></li><li><p>我明明是双子座 为什么不能放银河星爆？</p></li><li><p>肇事司机称延迟太高 在他眼里是那人自己撞到车上的</p></li><li><p>路由器上发现蜘蛛它是不是在蹭我网</p></li><li><p>李老汉身藏大量冰毒被捕后声称天气太热需要降温</p></li><li><p>今天喝牛奶发现过了保质期还好我及时把日期改过来了</p></li><li><p>为了使湿漉漉的脚干得更快，我决定用水龙头的水将脚上的水冲干净</p></li><li><p>屏幕上有只死苍蝇怎么也删不掉怎么办？</p></li><li><p>好好的西红柿炒鸡蛋，加那么多番茄糊弄我，直接把他餐馆砸了</p></li><li><p>学校食堂的拼音是shit-ang有什么错吗？</p></li><li><p>隔壁三胖子从小卖部购大量弹弓和水枪准备奇袭整容院</p></li><li><p>环保主义者小明出车祸被撞成植物人后开始进行光合作用净化空气。</p></li><li><p>马里奥从六楼跳下抱住旗杆骄傲地说自己已经通关了</p></li><li><p>在试卷里夹上二百块钱我终于交出了一份让老师满意的答卷</p></li><li><p>专家称预防H7N9的最好方法是自杀</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话4]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D4.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>王老汉勤俭持家，十分可怜，捡了一个月破烂的钱，还是被我偷了</p></li><li><p>完美主义倾向的帮主使出降龙十八掌，击毙十七个敌人后劈死自己</p></li><li><p>小明用祖传的牛皮癣成功治死了二十多个老中医</p></li><li><p>九旬老人因坚持每天在户外晒太阳，满头白发终于晒黑</p></li><li><p>自从买了碎纸机，老爸的私房钱再也没有被老妈发现过</p></li><li><p>妇产科医生操作失误导致孕妇与胎儿死亡并声称完成了一次双杀</p></li><li><p>国家为了弘扬传统文化，决定发射火箭上月球表演天狗吃月亮</p></li><li><p>大喇叭：校长我X你妈，我刷了一天系主任boss也没掉考卷答案</p></li><li><p>后宫发言人容嬷嬷表示：我们在针里添加了多种维生素和矿物质，纠正行为的同时还补充了营养</p></li><li><p>四肢截肢的王老汉自称练成了无影拳和无影腿</p></li><li><p>从小我就在想：大雨为什么能治水？</p></li><li><p>我肚子里有什么东西在动 我记得生吃癞蛤蟆时嚼了阿</p></li><li><p>面对法官的质问，犯人称忘了为什么犯罪，法官令他先回家想起来再说</p></li><li><p>“不要偷偷摸摸看女孩大腿”,我把头从裙子里探出来说</p></li><li><p>恐怖分子被抓获后承认自己是铁道游击队粉丝</p></li><li><p>太阳把柏油路面烤得很粘牙</p></li><li><p>省吃俭用六十年，王老汉终于住进了梦寐以求的太平间</p></li><li><p>范厨师不仅厨艺精湛且牌技高超，斗地主常常打出六个A逆转局势</p></li><li><p>因为小王记性差每次把事写在脸上，可他还是忘记照镜子了。</p></li><li><p>今天我学雷锋做好事，帮军区门口站岗放哨的叔叔解开了穴道</p></li><li><p>王老汉为圆飞天梦想，点燃了绑在屁股上的一筐二踢脚。</p></li><li><p>小英雄赖宁在大火中撒尿灭火数小时终于因脱水倒了下去</p></li><li><p>我钓到一条大鱼正高兴的时候被人打了一棍然后我被赶出超市大门</p></li><li><p>咱们玩捉迷藏吧，你数到圆周率最后一位开始找我</p></li><li><p>敌敌畏工厂的老板总是抱怨有员工偷吃。</p></li><li><p>那个怪老头是远近有名的神经病，下雨的时候他总是打伞出门。</p></li><li><p>消防员对轻生者说：再不跳楼我可要下班了。</p></li><li><p>爸爸给小明找了多家补习学校补习结果小明成绩依然很优秀</p></li><li><p>你们骗我！！我今天穿了一身特别湿的衣服出门！都没人说我潮！！</p></li><li><p>自从张大爷看了孙子的盗墓笔记，我总在他家祖坟附近见到他。</p></li><li><p>奇闻:张家沟子王老汉走出村里挖的地道已是抗战结束后第十年。</p></li><li><p>火葬场煤气炉爆炸造成多名死者重伤，现已悉数送往医院抢救</p></li><li><p>午夜时分王老汉在停尸房看起了午夜凶铃众尸体吓得纷纷躲到了床底下</p></li><li><p>自从学了牛顿的万有引力，我再也不能在天花板上走路了，好伤心。</p></li><li><p>热心反贼杀光同伴献身主公赢得一年蓝钻</p></li><li><p>聪明的小贩全身抹上水泥遇到城管假装雕塑</p></li><li><p>为什么我拿着雨伞不停的转还是从楼上掉下去了？</p></li><li><p>听说自拍很潮留 我顺手捡起了路边的砖头</p></li><li><p>王老汉吃下两粒盖中钙后扬言要一口气从6楼跳下</p></li><li><p>物理学家用生命的最后一刻算出了扑向他的疯狗的加速度和轨迹方程</p></li><li><p>小明回答老师狂字的部首是狂犬旁</p></li><li><p>遇到人贩子了怎么办,得买一个还是两个?</p></li><li><p>王老汉跟我比谁的肺活量大结果到现在还没有浮上来我是不是输了</p></li><li><p>丧心病狂的劫匪一个急转弯使警车撞上墙壁吃到蘑菇变大了。</p></li><li><p>飞机失事无奈的飞行员滞留天上长达半个月最终获救</p></li><li><p>自知大限将至我今日就将这枚定时炸弹托付于你切记妥善保管</p></li><li><p>化缘失败的八戒发现师兄们把他的钉耙改装成了猪排烤叉，心头涌起阵阵寒意</p></li><li><p>为了防止学生冬天下河游泳。教育局在河边埋了大量地雷</p></li><li><p>我养的石头最近不吃东西了，也不叫了，它是不是生病了？</p></li><li><p>每天睡三十多小时的我连棺材盖都不想开</p></li><li><p>走火入魔的数学教授揉着自己的心脏把心电图变成各种函数图像取乐</p></li><li><p>最喜欢去海底世界了 全是我没吃过的海鲜</p></li><li><p>爷爷说爬雪山过草地时他一泡屎舍不得拉消化了半个月终于挺了过来</p></li><li><p>超市一双一口价170的鞋花了我3400才吃光。</p></li><li><p>为了测试空乘人员的素质，我果断的喊了一声：“劫机!”</p></li><li><p>学了牛顿第一定律小明终于知道坐车转弯时他应该往哪歪了</p></li><li><p>痛觉丧失的小明缝衣服时把手指扎得稀烂。妈妈惊慌失措，把衣服扔进水里。还好血渍不难洗。</p></li><li><p>黄四郎剿灭麻匪后竟用其脑袋打起了麻将</p></li><li><p>我军地下党陆续潜伏进敌人内部，导致敌人源源不断消灭不完</p></li><li><p>阿富汗炸弹人自称是董存瑞后裔回中国寻亲</p></li><li><p>小明复读三年没考上，为了放松心情从13楼自由落体</p></li><li><p>小明为了多掌握一门吃饭的手艺，每天坚持练习用脚吃饭</p></li><li><p>带纱窗的蛟龙号今天试水成功 驾驶员表示温度明显降低</p></li><li><p>恐怖分子带着炸弹专家精心制作的炸弹上飞机打开发现竟然是大小鬼</p></li><li><p>十年寒窗，学生冻死家中，经抢救无效，今晨宣布死亡。</p></li><li><p>恳请组织尽快收复台湾不然它老对我们放大招使用“台风”的技能</p></li><li><p>秦王一把夺过荆轲的匕首在墙上凿了个洞对着隔壁的鸡舞了起来</p></li><li><p>黄医生默默的为病危的白血病患者注射了一瓶红墨水</p></li><li><p>男子使用冰爽系列牙膏口腔被冻伤</p></li><li><p>诺基亚运输机运输途中货舱泄漏,荡平喜马拉雅山脉</p></li><li><p>过了这么久还是没想好要用什么姿势做作业</p></li><li><p>捡到死亡笔记后，小明兴奋地写上了自己的姓名班级</p></li><li><p>明天早饭吃的油条，我提前一周就买好了</p></li><li><p>火被扑灭后灭火器还没用完 小明见状又放了一把火</p></li><li><p>我把中五百万大奖的号码深深记在脑海里，然后烧掉彩票。哈哈。你们告诉我，这样还有什么不放心的呢？</p></li><li><p>经我院医师会诊研究表明红脸关公的美容秘诀竟是每天都擦酸辣粉</p></li><li><p>王老汉学会打狗棒法后将自己乱棍打死</p></li><li><p>小明的嗓音极其富有磁性每次说话都会飞来几把菜刀</p></li><li><p>小明在做眼保健操时无意间打通任督二脉将同桌震死引起全校恐慌</p></li><li><p>高考结束了小明心中一颗石头终于落地砸出了胃穿孔</p></li><li><p>老婆勤俭持家十余载从不买名牌香水只佩戴小捆儿香菜依然迷人</p></li><li><p>纯种的小孩已经很少了，大部分都是和没血缘关系的人杂交出来的</p></li><li><p>喜极而泣的犯人准备拿打昏了警察偷来的钥匙挖地道逃出去</p></li><li><p>安眠药上写着请勿盲目服用所以我吞的时候睁着眼睛</p></li><li><p>老不死教授以洗衣机冒充回旋加速器贪污实验经费</p></li><li><p>死去的王老汉在复活赛中胜出成功回到家人身边</p></li><li><p>躲闪不及的老太太把公交车撞的稀巴烂</p></li><li><p>唐先生去派出所改名唐僧后竟遭民警当场分食</p></li><li><p>亲身母亲竟然将自己的孩子监禁在肚子里长达10月之久！</p></li><li><p>看到周围尸横遍野血肉模糊的可怕景象我吓得夺路逃离鲜肉市场</p></li><li><p>班长，这防弹衣真的很结实吗？黄继光堵枪眼以前问道</p></li><li><p>眼看学生溺水老师飞身跳入水中测出了他所受的浮力</p></li><li><p>刘老汉吃自助餐因无人上菜愤然离席！</p></li><li><p>看到有人要跳楼，揣哪个部位好呢</p></li><li><p>为了帮老婆把衣服洗干净，我把搓衣板放进了洗衣机</p></li><li><p>刚刚放学时我拷打了一名党员他始终不肯说出八路军的下落</p></li><li><p>每个深夜……我常常因为打瞌睡而失眠</p></li><li><p>为了锻炼儿子的生存能力王女士在儿子房间里埋了五颗地雷。</p></li><li><p>飞机已起飞，请没有赶上飞机的乘客马上助跑</p></li><li><p>专家表示今年收成不好是因为水土涵养不足，与农民忘放种子无关。</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话3]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D3.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>聪慧的王老师竟然只花了一天时间就记住了所有同学的性别</p></li><li><p>这位刽子手砍头手艺精湛深受广大死囚好评，回头客众多</p></li><li><p>接到一厉鬼投诉电话称火葬场不按要求办事7成熟烤成全熟太没面子</p></li><li><p>李先生操劳了大半辈子终于起了三层洋楼成功的偷看到了王老汉的电视</p></li><li><p>为了配合学校防火演习我临走前一把火把宿舍点了</p></li><li><p>男孩喊了三遍狼来了还是没人上来只好一人把狼杀了吃了</p></li><li><p>“年轻人你有健全的双手为何要在这里讨饭”老者说着递给我一把AK</p></li><li><p>这是一根受到诅咒的绳子，用它上吊的人都难逃一死</p></li><li><p>为净化青少年图书环境,国家决定销毁教科书</p></li><li><p>王老汉一条腿高位截瘫，为了保持平衡医生建议把右腿也切除</p></li><li><p>小王入狱后因不愿在这狭小阴暗的牢房中度过余生，竟然历时三年徒手挖出了一个朝阳天窗。</p></li><li><p>小明拿着全身粉碎性骨折的病假条来向我请假，准了</p></li><li><p>三十出头的王阿姨怒骂女儿十六岁就谈恋爱臭不要脸</p></li><li><p>小卖部的农药号称三碗不过岗</p></li><li><p>面对河中求救的数学老师小明神情慌张地打开了一包香瓜子</p></li><li><p>狡猾老头临终前故意不把话说完逼死强迫症儿子。</p></li><li><p>我骂王老汉是个大屎克郎，王老汉居然开始使劲推我！真是造反了</p></li><li><p>信访局大帐埋伏下三百刀斧手声称时刻准备帮助有困难的老乡劈柴禾</p></li><li><p>少将凭着高超的技术攻入白宫官网只见屏幕显示余额不足请准备下机</p></li><li><p>积极抢救后患者原先监护仪上杂乱的心电图终于变成一条直线了</p></li><li><p>小明从小就立志成为一个色香味俱全的三打白骨精</p></li><li><p>今天搓完澡看着一地的神仙丸我觉得午饭有着落了</p></li><li><p>美国代表辩称《核不扩散条约》中不含有涉及天气控制器的相关条款</p></li><li><p>小知识：刚切下的盲肠有可能有阑尾炎，忌生吃！</p></li><li><p>我市亲子鉴定所已为数名夫妻完成离婚手续。</p></li><li><p>为完成固定资产投资目标县长联系恐怖组织袭击政府大楼</p></li><li><p>看到对面的溺水者小明打开鱼饲料把他们引了过来</p></li><li><p>拿牙签掏耳屎真是舒服 全世界都安静了</p></li><li><p>有一病人需抢救，我们只抢到一个胳膊，赶快急诊</p></li><li><p>经过一番心理搏斗我患上了心绞痛</p></li><li><p>自从把电脑屏幕刷上油漆后电脑就再也不蓝屏了</p></li><li><p>被人污蔑为怪物的小明不堪重负最终用舌头上吊自杀</p></li><li><p>歌咏比赛上小明以超大嗓门吵死了所有人</p></li><li><p>王老汉被重型大卡碾过后 最终忍不住爬起来追上卡车司机评理</p></li><li><p>放学后我招呼小伙伴集体玩跳房子结果7死12伤</p></li><li><p>爸，我给你介绍一下，这是我妈</p></li><li><p>突然我眼前灵光一现 然后就瞎了</p></li><li><p>我刚把蜡烛吹灭还没来及许愿就被赶出了灵堂</p></li><li><p>我要让全世界都知道我是一个非常低调的人</p></li><li><p>听同事说这里电压不稳定，我应该用中指插进插座检查还是用小指？</p></li><li><p>公司再让我加班，我就不去领工资了，急死他们</p></li><li><p>男子因痴迷超级玛丽多次将头部卡在马桶中无法自拔</p></li><li><p>有线电视的普及导致天线宝宝下岗</p></li><li><p>今天数学课学二元一次方程然后我摸了摸口袋只有五角</p></li><li><p>开颅手术前，病人听到黄主刀和助手讨论要滑盖还是翻盖</p></li><li><p>大楼火灾，消防官兵调来大量消防车洒水淹死被困群众</p></li><li><p>拿着多动症的诊断书，我呆呆的坐了五个小时心情才稍微平复了一些！</p></li><li><p>刚学做菜的小明从实验室偷走托盘天平只为量取与食谱上等量的食盐</p></li><li><p>为节约电力资源，安倍晋三出台安倍定则以规范市场</p></li><li><p>我绞尽脑汁,终于喝了个痛快</p></li><li><p>弥留之际王老汉用尽最后的力气咬破手指用血书写下了三百多万字的遗书</p></li><li><p>通过对激光手电筒长达三天的仔细观察后，我发现我失明了</p></li><li><p>非主流少年藏身动物园冒充非洲狮足足一年竟无人发现令人费解</p></li><li><p>小军为了去南极探险励志每天吃一个雪糕适应冰冷的环境</p></li><li><p>记者进入足疗城暗访后要求延长工作时间</p></li><li><p>地震中在操场玩耍的小朋友们在张老师的正确指导下纷纷躲进了教室</p></li><li><p>热血青年刘大壮欲知晓国内外最新动态翻墙上网玩推特不幸摔断腿</p></li><li><p>今天我年幼的儿子走丢了，十分着急。请好心人找到以后立刻揍死他。</p></li><li><p>小明认为1元坐公交车坐的站越多越划算，所以他每次都坐到终点站再走回家</p></li><li><p>我拔下病人的呼吸机问“这玩意真的很好闻吗？”</p></li><li><p>每次刷牙的时候都口吐白沫 是不是中毒了？</p></li><li><p>王老汉钢材厂因口感酥脆受到市民强烈欢迎</p></li><li><p>判决结果出来了法院判决杀人犯王某罚抄小学生守则一百遍</p></li><li><p>男子打开赌场所有水龙头只为洗牌</p></li><li><p>那个999牌子的牙膏味道怪怪的，是不是过期了</p></li><li><p>高考状元因执意到故宫面见圣上而被关进精神病院</p></li><li><p>为了摆脱单身，我把自己劈成了两半</p></li><li><p>国家宣布死刑犯人枪决后捐献眼角膜者可以免除死刑</p></li><li><p>经过了一系列特殊训练，我终于可以分清领导和猪了</p></li><li><p>我军叠被子技术被联合国教科文组织评为非物质文化遗产</p></li><li><p>田大力和田二妞小两口为孩子应该跟谁姓吵的不可开交，导致离婚</p></li><li><p>为彰显人性化执法城管部队决定随车携带花圈纸钱和灵堂</p></li><li><p>李先生笑里藏刀数次现已导致毁容，望广大市民引以为戒</p></li><li><p>不知道昨晚放弟弟裤裆里的那几只龙虾现在怎样了</p></li><li><p>养猪专业户王老汉告诉我要分辨鸭的公母得先看鸡冠</p></li><li><p>闻到煤气后王老汉迅速关了门窗，有效防止煤气泄露，称绝不能便宜了邻居</p></li><li><p>一场流星雨及时得缓解南方的高温干旱。</p></li><li><p>睡不着带耳机听音乐翻个身把自己勒死了</p></li><li><p>为了响应市里清除小广告号召，张科长引燃了电视台广告部。</p></li><li><p>中午做饭切断了手指，因忙于拍照留念错过最佳治疗时间。</p></li><li><p>心情不好，洗澡这件事推迟三个月再议</p></li><li><p>修炼了化骨绵掌的王老汉靠卖无骨鸡爪在北二环付了首款。</p></li><li><p>不要帮我打拍子！正在做电击心脏复苏的医生对围观者吼道</p></li><li><p>小明冲进敬老院吞吃四十余人自称啃老族</p></li><li><p>为了防止财产被盗我将超强保险柜钥匙锁进了保险柜</p></li><li><p>为了防止被闹钟吵醒小明早早起床守候以便在第一时间及时关闭</p></li><li><p>在中国只要98岁就可以生两胎的制度赢得奶奶们的好评。</p></li><li><p>全身被打上石膏后我成为了家里的顶梁柱</p></li><li><p>到了献血室黄医生把我关进一个全是蚊子的房间声称自然抽血法</p></li><li><p>为防止老婆出轨陈医生把老婆绑在铁轨上</p></li><li><p>王局长为防止拿人家手软，竟把双手浇筑进钢筋混凝土</p></li><li><p>王老汉跌落山崖发现九阴真经经过七七四十九天终于饿死了</p></li><li><p>王老汉在清洗焚化炉时被院长悄悄关上门经过49天终于练成火眼金睛</p></li><li><p>据我院专家统计 海洋垃圾99.9%系精卫填海所致</p></li><li><p>法医看了看死者的伤口，说伤口是斗气造成的</p></li><li><p>小明要往北走，发现罗盘只能指南，一气之下摔碎罗盘</p></li><li><p>在两个多小时缜密推算后应收八毛白菜钱的小明在实收1块后找了3毛</p></li><li><p>据报道，一田姓男子上课不断迸溅思想的火花，导致教室大火</p></li><li><p>王老汉大吼一声抢劫了便从裤裆摸出一条丝袜套在头上后被活活熏死</p></li><li><p>隔壁的老大爷居然坚持了六十二年不穿衣服洗澡</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话2]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D2.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>法官面临三个犯罪嫌疑人，艰难的按下了场外求助按钮。</p></li><li><p>寻物启事：鄙人在遛弯的林荫小道上埋了一个地雷忘记埋在哪儿了</p></li><li><p>李小龙拿着东亚病夫的招牌让我批他两天病假</p></li><li><p>老师说你们都是祖国的花朵，说罢朝学生中扔出一个马蜂窝后反锁了门</p></li><li><p>像这样将内力引到掌上。“啊我炼成了！”郭靖兴奋地一拍脑门</p></li><li><p>无头女尸拍大头贴竟被老板收钱惹民愤</p></li><li><p>樟脑丸是我吃过最难吃的硬糖有奇怪的味道怎么还有人买</p></li><li><p>我国游泳代表团派出水鬼将其他选手全部拉下水夺冠</p></li><li><p>奶牛大罢工导致蒙牛股价暴跌，官方承诺今后挤奶时打上马赛克</p></li><li><p>医院送来小明的病危通知书却忘了收快递费全家人为此喜极而泣</p></li><li><p>在一口咬定凶手之后警察从始至终未松开嘴啃住罪犯</p></li><li><p>报告酋长我已搞到武汉鸭脖神秘麻辣配方目前正在草原追击长颈鹿</p></li><li><p>情急之下医护人员在抢救室中和黑白无常打起牌来成功拖延时间</p></li><li><p>老板让我看见客人老实就宰于是我被判刑了</p></li><li><p>人贩子辨自称是向敌国输送卧底被奖励锦旗一面</p></li><li><p>女子忍受丈夫家暴十年，肉质竟变的劲道可口</p></li><li><p>聪明的妖怪录下了唐僧的紧箍咒</p></li><li><p>为了保护这些未成年的学生妹，校长裸身冲向了扫黄的警察</p></li><li><p>在中国每年的清明节都会有大量假币被销毁。</p></li><li><p>我家小狗走丢了，用搜狗搜不到，急死我了</p></li><li><p>每次在大街上洗澡都感觉有人在偷窥我</p></li><li><p>最近我的左手老是跟着我，怎么办</p></li><li><p>听到救人英雄急需输血的消息后，小红主动交出了自己的红领巾</p></li><li><p>一直没宝宝今天和老婆去看医生了请问生殖隔离是什么病还能治吗</p></li><li><p>媒婆介绍女友说它上的厅堂下的厨房所以我用链子拴住小心蹿没了</p></li><li><p>好消息弱智由于脑袋太轻跳楼顶多腿部骨折</p></li><li><p>理发师掏出剪刀威胁我在不交出钱来就要把我剪成非主流</p></li><li><p>无头男尸频繁出入洗头房引起警方高度警觉</p></li><li><p>六级听力突然变成常回家看看引发考生恐慌抱头鼠窜</p></li><li><p>我市一八旬老汉苦练60年假摔讹诈数百亿荣登富豪榜首</p></li><li><p>来自美国的交换生奥利奥同学昨天被残忍分尸身上涂满口水和牛奶</p></li><li><p>搜救官兵赶到矿难现场立即拿出生死簿涂黑了遇难者名单</p></li><li><p>穷凶极恶的歹徒抓起民警的衣领连连朝里塞钱称要让民警乐死</p></li><li><p>年幼遭遇家暴留下阴影导致他七次潜入超市捏碎所有方便面</p></li><li><p>志愿者们修炼乾坤大挪移帮春节买不到票的旅客返乡，受社会各界关注</p></li><li><p>在耍猴艺人耐心劝说下绝望的孤寡老头终于乖乖走出笼子开始翻跟头</p></li><li><p>北约称太阳人在太阳上开发核能将对其实施经济制裁</p></li><li><p>不法分子烧假冥币扰乱地府金融秩序被警方抓获</p></li><li><p>由于产道窄男婴变成三胞胎依次顺利通过</p></li><li><p>小道士上交一叠鬼片给师傅称鬼怪已被他封印在里面</p></li><li><p>游乐场友情提示玩旋转木马时请勿携带鞭子上去乱抽</p></li><li><p>老道士偷偷在僵尸背后贴了一张写着“我是大傻*B”的符</p></li><li><p>一男子在天安门前自燃专家称是地球变暖所致</p></li><li><p>我市持续干旱政府调来献血车请广大市民上车痛饮</p></li><li><p>事实证明只要你用双手蒙住一个瞎子的眼睛他就什么都看不见了</p></li><li><p>只见老师念起了咒语 霎时全班同学一个个被红领巾勒得直翻白眼</p></li><li><p>雨天偷井盖男子被誉为冒着生命危险疏通城市排水系统的先驱</p></li><li><p>怕母亲睡觉摔下床孝顺儿子坚持让母亲睡地板自己躺在危险的床上</p></li><li><p>我在房梁上吊了两个小时了怎么还没断气啊勒的我肚子疼</p></li><li><p>愚公终于把山挖平放出了两条蛇精</p></li><li><p>过年时厨师把一枚图钉包在饺子里，病友们满脸笑容期待好运</p></li><li><p>鲁迅原名李大钊，浙江周树人</p></li><li><p>过年时厨师把一枚图钉包在饺子里，病友们满脸笑容期待好运</p></li><li><p>草船里的诸葛亮被岸上的曹操用冲锋枪扫成了马蜂窝</p></li><li><p>吴老汉杀掉老伴抛尸荒野热心民警捡到尸体后将其送回</p></li><li><p>因患密集恐惧症校领导拒绝开校庆大会</p></li><li><p>荆轲刺了秦王半天才发现手里拿的是把牙刷</p></li><li><p>枪决前这名年轻人绝望地大吼道：“谁他妈告诉我杀人长命的！”</p></li><li><p>眼见炸弹朝己方阵地飞来避无可避小明急中生智立马躺地上装死</p></li><li><p>我把作弊纸条传给了监考老师，他疯狂的抄了起来</p></li><li><p>得知市长要来视察，村民们纷纷开心的开出自家自爆卡车去迎接</p></li><li><p>岳飞之母在岳飞背上刻了精忠报国以后岳飞推行了汉字简化运动</p></li><li><p>火葬场为增收散布谣言说运钞车保安枪里没子弹</p></li><li><p>我院门口有良心的小贩老王谋杀百余老党员只为制作合格红领巾</p></li><li><p>我现在思维很混乱需要一个人静静，把冰箱门关上</p></li><li><p>店里着火了，我急忙冲进去打开了360防火墙</p></li><li><p>王老汉一个月没吃东西却满面红光称自己靠牙垢就够活下半辈子了</p></li><li><p>我军战士机智勇猛不畏险阻终于突破鬼子重重包围偷回了一个大西瓜</p></li><li><p>他抛弃妻儿丢下父母背叛了全世界，只为了看六点钟的大风车</p></li><li><p>孝顺的他将母亲安顿好后就走出了天桥底</p></li><li><p>热心民警将抢来的赃物送到劫匪家，劫匪泪流满面直夸党的政策好</p></li><li><p>小贩撕了100块的一个角给我说是找50</p></li><li><p>每年春分秋分北半球的阳光横贯厕所，困了半年的病人就找到了出口</p></li><li><p>六旬老汉深夜闯入本地小学妄图销毁四十年前成绩单惨遭留校处分</p></li><li><p>生性残暴的小明残忍地掏空了王老汉的耳屎</p></li><li><p>一拳头抡飞自己难度太高了我特意从二楼跳下来借力可还是失败了</p></li><li><p>司马迁在狱中坚持不懈终于创出了第八套广播体操</p></li><li><p>灵车内尸体对路旁心脏病老汉不闻不问冷漠无情惹争议</p></li><li><p>王老头走路太慢，被身后驶来的蜗牛撞伤</p></li><li><p>整整十年我都在哭泣中睡去，到底是哪个王8蛋在我枕头下放洋葱</p></li><li><p>孙悟空一棒打死唐僧并称是帮助唐僧快速上西天</p></li><li><p>为解决市民吃水难拟将大坝炸毁</p></li><li><p>他废寝忘食的工作忘了留出口将自己砌在了大楼内</p></li><li><p>厨房陈老头端来一盆胡萝卜让我把它切成肉丁</p></li><li><p>群众向有关部门反映黄泉路上街灯不亮无人理睬</p></li><li><p>好心男子为节约用电把手术室电闸偷偷关掉</p></li><li><p>某农民因迅雷节省5年时间从此不种庄家每天开迅雷等着返老还童</p></li><li><p>特警队长表示，憋屁是特警考核的一项重要指标</p></li><li><p>我三岁的妹妹居然会开冰箱了，看来要换个地方关她了</p></li><li><p>幼稚园园长批发地沟油炸豆腐至小朋友5死8残被授予计划生育奖章</p></li><li><p>气温骤降八名丐帮弟子围坐一圈互吐口水取暖效果明显</p></li><li><p>在邻里看来，他把裤衩穿反了根本成为不了李大爷发狂杀人的理由。</p></li><li><p>大家天天抱着自己的宠物睡觉，为什么我就抱了一晚我的金鱼就死了呢</p></li><li><p>见老太即将被自行车撞到好心男子忙将老太推到了行进中的大卡车前</p></li><li><p>一男子吃光盘上瘾 被人发现后忙自称电脑</p></li><li><p>我家的电冰箱打开后只能看一个北京台是怎么回事？</p></li><li><p>参加跳楼比赛治好了他的多动症现在他能一整天不动</p></li><li><p>偷偷向缸里的金鱼浇水淹死它</p></li><li><p>我是红领巾大爷你不肯过马路就是对我们政治工作的不配合就是谋反</p></li><li><p>买了个新手机 为什么开启飞行模式之后从17楼扔下去 还是摔坏了</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一句话冷笑话]]></title>
      <url>/2015-12-03-%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%86%B7%E7%AC%91%E8%AF%9D.html</url>
      <content type="html"><![CDATA[<p>本笑话系列转自百度贴吧<a href="http://tieba.baidu.com/f?kw=%C8%F5%D6%C7" target="_blank" rel="external">弱智吧</a></p><a id="more"></a><ol><li><p>一男童惨遭食人魔毒手，丧尽天良的凶手竟忘记放葱。</p></li><li><p>小明在野外遭遇凶猛野人，现已加入肯德基豪华午餐.</p></li><li><p>孩子睡觉老是踢被子,幸好被我及时发现打断了腿，否则肯定感冒.</p></li><li><p>我怕我女朋友出轨，就把她气给放了.</p></li><li><p>天空惊现一烧柴油的UFO，我军派出一核动力拖拉机将其击落</p></li><li><p>老大让我埋好地雷后用脚猛踩几下说是为了土地平整不易发现 老大就是老大、真细心</p></li><li><p>经过5个小时的审讯，传销组织的骨干成功将7名户籍警发展成下线</p></li><li><p>邱少云趴在火堆一动不动最终被消防大队批评开除</p></li><li><p>对于发烧的病人要趁热吃</p></li><li><p>公交车电视的广告太多，我与司机对峙五小时，逼他交出了遥控器。以后可以随意换台了</p></li><li><p>陈阿姨激动的握住我的手说，谢谢你及时送来的炭，孩子们终于都煮熟了.</p></li><li><p>观音为让悟空保护唐僧取经，给他带上了南孚巨能环</p></li><li><p>饥寒交迫下的张大爷点了根爆竹放皮衣里取暖</p></li><li><p>机智的小明深夜炸毁八路军粮仓，迫使鬼子第二天的偷袭行动无功而返</p></li><li><p>小明等到马桶满了才冲，获得了节能小标兵称号</p></li><li><p>男子悬崖坠亡工作人员称买100米蹦极绳送100米</p></li><li><p>房子起火了我抱着燃烧的儿子冲了出去身后的煤气罐竟然哭了起来</p></li><li><p>踩中地雷后小明灵机一动，在原地过了一辈子</p></li><li><p>老王检查煤气管道时用打火机照明事后获一级烈士称号</p></li><li><p>手术进行中…医生发现病人漏油了…于是找来了修车师傅 修车师傅称自己只会修车，不会修洗衣机</p></li><li><p>老汉整整六天不吃饭不喝水奄奄一息之际在纸上写下最长待机125小时</p></li><li><p>班长握着垂危的重伤员的手说道：谢谢你同志，战友们又有肉吃了</p></li><li><p>我今天捡了5块钱，老李头非说是他的，拉着我去医院做亲子鉴定</p></li><li><p>近日有不少中年男性半夜在路边伪装成女厕所诱骗不少女性，请大家注意防范</p></li><li><p>其实那个女的还是挺漂亮的就是长得丑了点</p></li><li><p>法医解释说受害者自己把自己吃了，没尸体不好破案</p></li><li><p>我侄子今年才12岁上少年宫学习火球术会不会早了点</p></li><li><p>饥渴难耐的小明路过公厕花了五毛钱进去大吃大喝了一顿</p></li><li><p>弱弱的问一句，你们喝咖啡难道不放香菜吗？</p></li><li><p>谁能想象，这名年仅16岁的少女四年前只是一名年仅12岁的少女</p></li><li><p>今晚天气很热，没有风，我只好不停奔跑加速空气流动来乘凉。</p></li><li><p>头好晕，地球能不能不转了。</p></li><li><p>我咬了一只蜘蛛，请问它会变成人侠么？</p></li><li><p>我都把电脑砸烂了，为什么还是没见脑浆</p></li><li><p>做好事从不留名的雷锋机智地把认出他的老奶奶灭口了</p></li><li><p>严重的恐高症害得我终身无法低头捡到钱</p></li><li><p>中国好声音的评委一按下按钮歌手瞬间就被炸成碎块</p></li><li><p>八旬老太一步蹿上公交抢到座位，司机默默按动了弹射装置</p></li><li><p>便秘后陈医生给我开了一个疗程的电钻。</p></li><li><p>为防眼镜蛇的毒向脑部扩散我立刻带上防毒面具</p></li><li><p>男子见义勇为跳下河中与溺水女子玩起了鸳鸯戏水</p></li><li><p>驾驶员心脏病发坚持把乘客全部送上天堂才安心闭上眼睛</p></li><li><p>朋友的棺材铺开业大吉我送去了3000响的雷管</p></li><li><p>王大爷企图饿死肚里的蛔虫被判死刑</p></li><li><p>司马光在缸下点了一堆火笑着说将水煮干后小朋友就不会淹死了</p></li><li><p>现在的孩子越来越早熟才炖了5分钟就烂了</p></li><li><p>废除电椅有效防止了囚犯在行刑过程中变成超级赛亚人</p></li><li><p>今天是你生日快吹气呀要不然这些炸弹就爆了</p></li><li><p>练成铁头功的大师兄刚下山，就被一个有电磁吸盘的大吊车吸走了</p></li><li><p>精神病院眼保健操第一节，搓晶状体，第二节，抠眼角膜轮刮眼窝 第三节，破开颅骨搓揉视神经中枢 第四节，双手按太阳穴轮刮耳光</p></li><li><p>在打黑行动中包大人壮烈牺牲</p></li><li><p>“啊啊啊你为什么杀我的狗？”“没办法，有人出大价钱买你狗命”</p></li><li><p>算命先生说我有大富大贵的命，直到我死后我才知道几十亿都小钱</p></li><li><p>双手骨折痊愈了，陈医生说我不签字就不给我拆石膏，怎么办啊？</p></li><li><p>儿子说要玩穿越火线，我只好把他送到了马戏团让他天天穿火线</p></li><li><p>火葬场宣布今后火化使用自助烧烤式火化，家属玩的不亦乐乎。</p></li><li><p>我怀孕了，孩子的妈不知道是谁，我该怎么办</p></li><li><p>突然冲出一个人骂我是猪！我当时就气得哼唧哼唧说不出话.</p></li><li><p>最近发现对女朋友的性欲开始减退，我想跟她的尸体开始腐烂有关系</p></li><li><p>算命的说我会遭到偷袭，我没给钱转头就走他一砖头拍上来</p></li><li><p>眼看色狼就要得手我急中生智掏出一瓶浓硫酸泼到姑娘脸上解救了她</p></li><li><p>50岁大妈短裙丝袜乘地铁遭猥琐男摸臀，热心乘客见义勇为被大妈怒斥坏了好事</p></li><li><p>沙漠中口渴难耐的队伍一齐望向脑积水的小明</p></li><li><p>女孩为晕倒老人做人工呼吸，围观老大爷竟集体假摔</p></li><li><p>色狼抱住女路人欲施爆,机智女孩十秒完成卸妆,将流氓成功吓跑</p></li><li><p>男子嫌女友太胖将其残忍碎尸竟分了30袋才勉强装完</p></li><li><p>慢着！这屎里有毒. . . .</p></li><li><p>文学界最新研究成果，捕蛇者说原作者并非柳宗元而是法海</p></li><li><p>体操冠军转体1080度成功把自己拧出水</p></li><li><p>主人遭遇车祸倒在马路旁，爱心宠物犬不离不弃守在旁边保护主人不允许外人接近，最终延误救治时间不治身亡。</p></li><li><p>17名学生约校外青年放学后操场殴斗，被班主任知道，班主任立刻打电话给校长并拿出五十元赌校外青年赢</p></li><li><p>店家WIFI密码竟是meiyoumima，青年小王三番五次输入失败后将老板打伤</p></li><li><p>道长见势一口浓痰吐下去尸体顿时恶心地将探出棺外的手缩了回去</p></li><li><p>死者抓住了凶手身上衣服的一根线头 警方顺着线头找到了凶手</p></li><li><p>长期吃汉堡幼儿园女童最大的梦想就是和同学们玩一次跷跷板</p></li><li><p>妻子为小王诞下三胞胎喜笑颜开，谁知护士将小朋友排成一起后竟Biu的一声消失掉了</p></li><li><p>老师说孤掌难鸣我当即给了她一巴掌“啪！”</p></li><li><p>青年作家儿童浴场离奇溺亡成惊天迷案，浴场负责人辩称水深明明只有一米四</p></li><li><p>面对河神举起的金斧头和银斧头诚实的小王坚称自己掉下去的是一只64G的iPhone5</p></li><li><p>少女因酷似王宝强机场被围观，一怒之下将手中仙人球丢向路人，并喝光了整桶牛奶后踏上了飞往曼谷的飞机</p></li><li><p>90岁高龄老妪爱上30岁大叔痛苦不已，写信求助知心姐姐询问自己究竟算是大叔控还是正太控</p></li><li><p>经过努力的练习，驾校学员成功的将汽车驶离教练的身体</p></li><li><p>无良商家用鼠肉加明胶冒充羊肉销售，据执法人员称舒克和贝塔均已遇难</p></li><li><p>远方的游客围着篝火转圈跳起欢快的舞蹈，老乡们开始偷偷撒孜然</p></li><li><p>大学生坚持8年背着残疾同学上学，但最后残疾同学还是知道了</p></li><li><p>盲人夫妻婚后同时进行复明手术，获得光明后，对视一笑在病房当即签订离婚协议</p></li><li><p>孕妇公交车上突然晕倒，最美售票员联合数十名爱心乘客奋力施救，终唤醒孕妇令其补票</p></li><li><p>男子餐厅花费15元点了份清炒有机白菜，上菜后发现菜中并没有鸡，大闹餐厅已被治安拘留</p></li><li><p>为了庆祝自己死亡，死者的火化炉内传出一首“今天是个好日子”</p></li><li><p>实验课小明突发酒瘾喝干所有酒精灯</p></li><li><p>爱国僧侣盘腿发功成功击落美国卫星</p></li><li><p>跟女友吵架威胁称走着瞧现已互相看着对方走了十余里</p></li><li><p>僵尸兴奋的打开了我的脑壳，然后失望的走了</p></li><li><p>公交车离奇撞墙仅剩五人幸存。专家：司机还没有发挥出应有的水平</p></li><li><p>明天就要上手术台，我演个什么节目</p></li><li><p>王老汉将60多对双胞胎绑树上玩起了连连看，理智路人辱骂老汉技术垃圾</p></li><li><p>他的演讲击中了所有人心中最柔软的地方，后来他被判处死刑</p></li><li><p>这位难民伸出干瘦的手颤抖着拉着我的衣角说他已经半个小时没吃东西</p></li><li><p>武警战士组织模拟演练将扮演匪徒的同志悉数击毙，演练逼真得到领导褒奖</p></li><li><p>把植物人推进太平间植物大战僵尸</p></li></ol>]]></content>
      
        <categories>
            
            <category> 生活娱乐 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MathJax Syntax Tutorial]]></title>
      <url>/2015-12-03-MathJax-Syntax-Tutorial.html</url>
      <content type="html"><![CDATA[<p>本文翻译自这篇官网的<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">教程性质文章</a>。</p><a id="more"></a><p>要想知道一个问题或回复里的公式，以及本文的数学公式是怎么写成的，右键单击选择 “Show Math As &gt; TeX Commands”. (你看到公式的 Tex 语法时，’$'是不会显示在其中的，记得添上它，用法见下)</p><h2 id="公式">公式</h2><p>对于行内公式，将其用<code>$...$</code>括起来。对于行间公式，使用<code>$$...$$</code>. 它们渲染出来的效果是不同的：$\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}$ (行内) 或者</p><p>$$ \begin{aligned} \sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6} \end{aligned} $$(行间)</p><h2 id="希腊字母">希腊字母</h2><p>使用 <code>\alpha</code>, <code>\beta</code>, …, <code>\omega</code>: $ \alpha, \beta, …, \omega $. 对于大写字母，使用 <code>\Gamma</code>, <code>\Delta</code>, …, <code>\Omega</code>: $ \Gamma, \Delta, …, \Omega $.</p><h2 id="上标和下标">上标和下标</h2><p>使用<code>^</code>和<code>_</code>. 比如，<code>x_i^2</code>: $ x_i^2 $.</p><h2 id="组合">组合</h2><p>上标、下标及其他操作符只对下一个“组合”生效。一个“组合”可以是一个单独的符号或任何由花括号<code>{</code>…<code>}</code>括起来的公式。如果你写<code>10^10</code>你就会被亮瞎：$10^10$. 不过<code>10^{10}</code>就会给你你想要的：$10^{10}$. 使用花括号来将含上下标的公式的各部分区分开：<code>x^5^6</code>会报错；<code>{x^y}^z</code>是$ {x^y}^z $, <code>x^{y^z}</code>是$ x^{y^z} $. 好好看，好好学：<code>x_i^2</code>是$x_i^2$而 <code>x_{i^2}</code>是$x_{i^2}$.</p><h2 id="括号">括号</h2><p>()[]分别表示括号和方括号：$ (2+3)[4+4] $. 使用<code>\{</code>和<code>\}</code>来表示花括号$ {} $.</p><p>上面那些括号，它们的大小不会自动适配其中的公式，所以你写<code>(\frac{\sqrt x}{y^3})</code>的话那公式就会显得特别小：$ (\frac{\sqrt x}{y^3}) $. 使用<code>\left(</code>…<code>\right)</code>就能自动适配大小： <code>\left(\frac{\sqrt x}{y^3}\right)</code>效果是$ \left(\frac{\sqrt x}{y^3}\right) $.</p><p><code>\left</code>和<code>\right</code>对以下各种形式的括号有效：<code>(</code>和<code>)</code> $ (x) $, <code>[</code>和<code>]</code> $ [x] $, <code>\{</code>和<code>\}</code> $ {x} $, <code>|</code> $ |x| $, <code>\langle</code>和<code>\rangle</code>$ \langle x \rangle $, <code>\lceil</code>和<code>\rceil</code> $ \lceil x \rceil $, 以及<code>\lfloor</code>和<code>\rfloor</code> $ \lfloor x \rfloor $. 还有不可见的括号，以<code>.</code>表示：<code>\left.\frac12\right\rbrace</code>是$ \left.\frac12\right\rbrace $.</p><h2 id="求和和积分">求和和积分</h2><p>求和号和积分号分别是<code>\sum</code>和<code>\int</code>; 下标表示下界，上标表示上界，比如<code>\sum_1^n</code> $\sum_1^n$. 如果上下标不止一个符号的话，别忘了<code>{</code>…<code>}</code>. 比如<code>\sum_{i=0}^\infty i^2</code>是$\sum_{i=0}^\infty i^2$. 其他符号：<code>\prod</code> $\prod$, <code>\int</code> $\int$, <code>\bigcup</code> $\bigcup$, <code>\bigcap</code> $\bigcap$, <code>\iint</code> $\iint$.</p><h2 id="分式">分式</h2><p>有两种方法表示分式。<code>\frac</code>作用到接下来的两个组合上，所以<code>\frac ab</code>就是$ \frac ab $. 复杂的分子和分母用<code>{</code>…<code>}</code>括起来：<code>\frac{a+1}{b+1}</code>就是$ \frac{a+1}{b+1} $. 如果分子分母再复杂点的话，你可能更喜欢<code>\over</code>, 它作用到前后两个组合上：<code>{a+1\over b+1}</code>就是${a+1\over b+1}$.</p><h2 id="字体">字体</h2><ul><li>使用<code>\mathbb</code>或<code>\Bbb</code>以表示&quot;blackboard bold&quot;: $ \mathbb{CHNQRZ} $.</li><li>使用<code>\mathbf</code>以表示黑体(boldface)：$ \mathbf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ $\mathbf{abcdefghijklmnopqrstuvwxyz} $.</li><li>使用<code>\mathtt</code>以表示打印体(typewritter)：$ \mathtt{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ $\mathtt{abcdefghijklmnopqrstuvwxyz} $.</li><li>使用<code>\mathrm</code>以表示roman font: $ \mathrm{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ $\mathrm{abcdefghijklmnopqrstuvwxyz} $.</li><li>使用<code>\mathsf</code>以表示无衬线字体(sans-serif)：$ \mathsf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ $\mathsf{abcdefghijklmnopqrstuvwxyz} $.</li><li>使用<code>\mathcal</code>以表示书法字体(calligraphic)：$ \mathcal{ABCDEFGHIJKLMNOPQRSTUVWXYZ} $.</li><li>使用<code>\mathscr</code>以表示手写体(script)：$ \mathscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ} $.</li><li>使用<code>\mathfrak</code>以表示德文黑体(Fraktur)：$ \mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$ $\mathfrak{abcdefghijklmnopqrstuvwxyz} $.</li></ul><h2 id="根号">根号</h2><p>根号使用<code>sqrt</code>, 根号的大小会随内容而变化：<code>\sqrt{x^3}</code> $ \sqrt{x^3} $; <code>\sqrt[3]{\frac xy}</code> $\sqrt[3]{\frac xy}$. 对于更复杂的表达式，请换用 <code>{...}^{1/2}</code>.</p><h2 id="特殊函数">特殊函数</h2><p>有些特殊函数，例如 “lim”, “sin”, “max”, “ln”, 以及其他，通常使用的是正常字体而不是斜体。其符号使用 <code>\lim</code>, <code>\sin</code>, 等等。要注意，是<code>\sin x</code> $\sin x$, 而不是<code>sin x</code> $sin x$. <code>\lim</code>的表示涉及到下标：<code>\lim_{x\to 0}</code></p><p>$$\lim_{x\to 0}$$.</p><h2 id="特殊符号和特殊表示法">特殊符号和特殊表示法</h2><p>特殊符号和特殊表示法非常多，多到这里列不完；参见<a href="http://pic.plover.com/MISC/symbols.pdf" target="_blank" rel="external">简明列表</a>或是<a href="http://mirror.math.ku.edu/tex-archive/info/symbols/comprehensive/symbols-a4.pdf" target="_blank" rel="external">详尽列表</a>。最常用的一部分如下：</p><ul><li><code>\lt \gt \le \ge \neq</code> $ \lt, \gt, \le, \ge, \neq $. 你可以用<code>\not</code>来给大部分符号加个斜杠：<code>\not\lt</code> $\not\lt$. 这种表示一般都不好看。</li><li><code>\times \div \pm \mp</code> $\times, \div, \pm, \mp$. <code>\cdot</code>是一个点：$ x\cdot y $.</li><li><code>\cup \cap \setminus \subset \subseteq \subsetneq \supset \in \notin \emptyset \varnothing</code> $ \cup, \cap, \setminus, \subset, \subseteq ,\subsetneq ,\supset, \in, \notin, \emptyset, \varnothing $</li><li><code>{n+1 \choose 2k}</code>或<code>\binom{n+1}{2k}</code> $ {n+1 \choose 2k} $</li><li><code>\to \rightarrow \leftarrow \Rightarrow \Leftarrow \mapsto</code> $ \to, \rightarrow, \leftarrow, \Rightarrow, \Leftarrow, \mapsto $</li><li><code>\land \lor \lnot \forall \exists \top \bot \vdash \vDash</code> $ \land, \lor, \lnot, \forall, \exists, \top, \bot, \vdash, \vDash $</li><li><code>\star \ast \oplus \circ \bullet</code> $ \star, \ast, \oplus, \circ, \bullet $</li><li><code>\approx \sim \simeq \cong \equiv \prec</code> $ \approx, \sim , \simeq, \cong, \equiv, \prec $</li><li><code>\infty \aleph_0</code> $ \infty , \aleph_0 $ <code>\nabla \partial</code> $ \nabla , \partial $ <code>\Im \Re</code> $ \Im , \Re $</li><li>带余除法，使用<code>\pmod</code>: <code>a\equiv b\pmod n</code> $ a\equiv b\pmod n $</li><li><code>\ldots</code>是$a_1, a_2, \ldots ,a_n$中的点，<code>\cdots</code>是$ a_1+a_2+\cdots+a_n $中的点。</li><li>某些希腊字母存在变体：<code>\epsilon \varepsilon</code> $ \epsilon \varepsilon $, <code>\phi \varphi</code> $ \phi \varphi $, 以及其他。手写体的小写l是<code>\ell</code> $\ell$.</li></ul><p><a href="http://detexify.kirelabs.org/classify.html" target="_blank" rel="external">Detexify</a> 能让你在网页上画个符号然后用 $\TeX$ 符号来拼凑它。我们并不保证它在 MathJax 里能用，但尝试一下也是不错的。要检测某个符号是否支持，参见 <a href="http://MathJax.org" target="_blank" rel="external">MathJax.org</a> 维护的一个<a href="http://docs.mathjax.org/en/latest/tex.html#supported-latex-commands" target="_blank" rel="external">目前支持的$\LaTeX$符号列表</a>，也可以去看看 Dr. Carol JVF Burns 的 <a href="http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm" target="_blank" rel="external">$\TeX$ Commands Available in MathJax</a> 页面。</p><h2 id="空格">空格</h2><p>MathJax 会使用一套复杂的规则来自动处理公式内的空格。除此之外，多打几个空格也不会有什么奇效：<code>a␣b</code>和<code>a␣␣␣␣b</code>都表示$a b$(<code>␣</code>表示一个空格). 要强制添加空格的话，使用<code>\,</code>表示窄空格$a, b$， 使用<code>\;</code>表示宽空格$a;b$. <code>\quad</code>和<code>\qquad</code>是更宽的空格：$a\quad b$ $a \qquad b$.</p><p>要添加纯文本，使用<code>\text{…}</code>: ${x\in s\mid x\text{ is extra large}}$. <code>$…$</code>可嵌套于<code>\text{…}</code>内。</p><h2 id="重音符和变音符">重音符和变音符</h2><p>使用<code>\hat</code>用于单个符号上 $\hat x$, <code>\widehat</code>用在更复杂的公式上$\widehat{xy}$. 如果你把它拉得太长的话，那么看上去就很傻X. 类似地，还有<code>\bar</code> $\bar x$、<code>\overline</code> $\overline{xyz}$、<code>\vec</code> $\vec x$、<code>\overrightarrow</code> $\overrightarrow{xy}$和<code>\overleftrightarrow</code> $\overleftrightarrow{xy}$. 点类符号，比如$\frac d{dx}x\dot x = \dot x^2 + x\ddot x$里的，使用<code>\dot</code>和<code>\ddot</code>.</p><h2 id="转义">转义</h2><p>MathJax 格式用到的符号也可以使用<code>\</code>来转义：<code>\$</code> $$$, <code>\{</code> ${$, <code>\_</code> $_$, 等等。如果你需要<code>\</code>它本身的话，你应该用<code>\backslash</code> $\backslash$, 因为<code>\\</code>被拿来表示另起一行。</p>]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MathJax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 172 Factorial Trailing Zeroes]]></title>
      <url>/2015-12-03-Leetcode-172-Factorial-Trailing-Zeroes.html</url>
      <content type="html"><![CDATA[<p>Leetcode 172 的题解，非脑筋急转弯式的算法优化</p><a id="more"></a><p>题目如下：</p><blockquote><p>Given an integer n, return the number of trailing zeroes in n!.</p><p><strong>Note</strong>: Your solution should be in logarithmic time complexity.</p></blockquote><hr><p>1. 简单粗暴的解法：求出$ n! $, 然后不断除以10去掉末尾的0, 并统计个数。对于C\C++ 这种静态类型语言来说，数字稍大就会溢出，因此这种方法不可取。</p><p>2. 从数学角度分析</p><p>将我们要求的结果记为$x$.</p><p>阶乘$ n! $末尾0的个数由其中因数2和因数5的个数决定。因此，我们只需求出因数2的个数和因数5的个数，取其中最小值就是我们所要的$x$.</p><p>而$ n! $又可以写成$ A\cdot 2^x \cdot 5^y $, 显然因数2的个数大于因数5的个数，因此我们只需要求出因数5的个数就可以了。</p><p>$ n! $是从1到$n$这$n$个数的乘积，其中从1开始每5个数中一定会有一个是5的倍数，这个数目是$ x_1 = \lfloor {n \over 5} \rfloor $. 而$x_1$不一定是我们要求的$x$, 因为这些数中不一定只含有一个因数5，比如多了一个因数5的25及其倍数，其数目是$ x_2 = \lfloor {n \over 5^2} \rfloor $; 而同理$x_1 + x_2$不一定是我们要求的$x$, 因为还有125及其倍数，其数目是$ x_3 = \lfloor {n \over 5^3} \rfloor $. 而……</p><p>因此我们要求的$x = x_1 + x_2 + x_3 + … = \lfloor {n \over 5} \rfloor + \lfloor {n \over 5^2} \rfloor + \lfloor {n \over 5^3} \rfloor + …$ ($ \lfloor a \rfloor $代表不大于$a$的最大整数)</p><p>写成代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">trailingZeroes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> five=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</div><div class="line">        five+=n/<span class="number">5</span>;</div><div class="line">        n/=<span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> five;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度为$ O(\log n) $.</p>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 204 Count Primes]]></title>
      <url>/2015-12-03-Leetcode-204-Count-Primes.html</url>
      <content type="html"><![CDATA[<p>Leetcode 204 的题解</p><p>本题解法<s>抄袭</s>参考自 Leetcode 给出的提示</p><a id="more"></a><p>题目如下：</p><blockquote><p>Count the number of prime numbers less than a non-negative number, n.</p></blockquote><hr><p>1. 最简单粗暴的解法就是从$ 1 $到$ n-1 $对每一个数都判断一次是否是质数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(isPrime(i))</div><div class="line">            count++;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个解法中，<code>isPrime(n)</code>是$ O(n) $级别的时间复杂度，那么<code>countPrimes(n)</code>就是$ O(n^2) $级别。还有没有优化的余地呢？</p><p>2. 我们来看看12因数分解的结果：</p><p>$ 2 \times 6 = 12 $ $ 3 \times 4 = 12 $ $ 4 \times 3 = 12 $ $ 6 \times 2 = 12 $</p><p>其中$ 4 \times 3 $和$ 6 \times 2 $都是多余的。一般地，对一个正整数$ n $来说，按照上面<code>isPrime</code>的思路判断，循环条件只需$ i \le \sqrt{n} $. 这是因为，如果$ n $能被$ p $整除，那么$ n = p \times q $且$ p \le q $ ($ p \ge q $的话对调$ p $, $ q $即可)，所以$ p \le \sqrt{n} $.</p><p>那么<code>isPrime</code>改成：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="comment">/*使用i*i&lt;=n而不是i&lt;=sqrt(n)是为了避免反复调用靡费时间的sqrt*/</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=n;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(n%i==<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在<code>countPrimes</code>的时间复杂度已经优化到了$ O(n\sqrt{n}) $, 还有更好的方法吗？</p><p>3. <a href="https://zh.wikipedia.org/zh-cn/%E5%9F%83%E6%8B%89%E6%89%98%E6%96%AF%E7%89%B9%E5%B0%BC%E7%AD%9B%E6%B3%95" target="_blank" rel="external">埃拉托斯特尼筛法</a></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="维基百科偷来的图"></p><p>其算法是，给出要筛数值的范围$ n $, 找出$ \sqrt{n} $以内的素数$ p_1, p_2,…,p_k $. 先用2去筛，即把2留下，把2的倍数剔除掉；再用下一个素数，也就是3筛，把3留下，把3的倍数剔除掉；接下去用下一个素数5筛，把5留下，把5的倍数剔除掉；不断重复下去。</p><p>于是我们可以抛弃第一步和第二步的思路，打一张从2到$ n $的表，使用筛法来统计质数的个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">   <span class="keyword">bool</span> isPrime[n];</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++)&#123;</div><div class="line">      isPrime[i] = <span class="literal">true</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i*i &lt; n; i++)&#123;</div><div class="line">      <span class="keyword">if</span> (!isPrime[i])</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i * i; j &lt; n; j += i)&#123;</div><div class="line">         isPrime[j] = <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (isPrime[i]) count++;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>现在<code>countPrimes</code>的时间复杂度是$ O(n\log{\log{n}}) $, 并使用了$ O(n) $的额外空间.</p>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Leetcode 292 Nim Game]]></title>
      <url>/2015-12-03-Leetcode-292-Nim-Game.html</url>
      <content type="html"><![CDATA[<p>Leetcode 292 的题解，想当年我还是too young too simple连这样的题都要看讨论区才做得出来</p><a id="more"></a><p>题目如下：</p><blockquote><p>You are playing the following Nim Game with your friend: There is a heap of stones on the table, each time one of you take turns to remove 1 to 3 stones. The one who removes the last stone will be the winner. You will take the first turn to remove the stones.</p><p>Both of you are very clever and have optimal strategies for the game. Write a function to determine whether you can win the game given the number of stones in the heap.</p><p>For example, if there are 4 stones in the heap, then you will never win the game: no matter 1, 2, or 3 stones you remove, the last stone will always be removed by your friend.</p></blockquote><hr><p>题目的条件是我是先手。那么，当石头堆只有四颗石头的时候我必输，因为无论我怎么拿石头总有剩下的，且剩余数目小于三，被对方一次性取完，输掉游戏。</p><p>现在假设石头的数目是$ 4k + i, k \in \mathbb N, 1 \le i \le 3 $，在刚开始的时候我拿走$ i $个，此后无论对方怎么取，轮到我的时候保证我取走的数目满足我们两个人在这一轮取走的石头数为4. 这样，在最后还剩下4个石头的时候能够保证我取完剩下的全部，赢得游戏。</p><p>那么当有$ 4k $个石头的时候，对方可以采取上面的策略，保证两个人一轮取走4个石头，最后剩下的石头可被他取完，从而他获胜。</p><p>因此，给定石头数目n, 判断是否胜利的程序如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canWinNim</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> n%<span class="number">4</span>!=<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 编程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[字体配置文件]]></title>
      <url>/2015-12-03-%E5%AD%97%E4%BD%93%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.html</url>
      <content type="html"><![CDATA[<p>这是我现在在用的字体配置文件，将其放入<code>/etc/fonts/local.conf</code>即可生效</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE fontconfig SYSTEM "fonts.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"font"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"autohint"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"hintstyle"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">const</span>&gt;</span>hintslight<span class="tag">&lt;/<span class="name">const</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"antialias"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"pattern"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"dpi"</span> <span class="attr">mode</span>=<span class="string">"assign"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">double</span>&gt;</span>96<span class="tag">&lt;/<span class="name">double</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">family</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>Ubuntu<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>WenQuanYi Micro Hei<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL UMing CN<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL ShanHeiSun Uni<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>Bitstream Vera Serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>DejaVu Serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL UKai CN<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL ZenKai Uni<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">family</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>Ubuntu<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>WenQuanYi Micro Hei<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>Bitstream Vera Sans<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>DejaVu Sans<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>WenQuanYi Zen Hei<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL UMing CN<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL ShanHeiSun Uni<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL UKai CN<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL ZenKai Uni<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">family</span>&gt;</span>monospace<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">prefer</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>WenQuanYi Micro Hei Mono<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>Bitstream Vera Sans Mono<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>DejaVu Sans Mono<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>WenQuanYi Zen Hei<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL UMing CN<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL ShanHeiSun Uni<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL UKai CN<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">family</span>&gt;</span>AR PL ZenKai Uni<span class="tag">&lt;/<span class="name">family</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">prefer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">alias</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"pattern"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>SimSun<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Ubuntu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>WenQuanYi Micro Hei<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>SimSun-18030<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Ubuntu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>WenQuanYi Micro Hei<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>AR PL ShanHeiSun Uni<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Ubuntu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>WenQuanYi Micro Hei<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>AR PL New Sung<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Ubuntu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>WenQuanYi Micro Hei<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>MingLiU<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Ubuntu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>WenQuanYi Micro Hei<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>PMingLiU<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Ubuntu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>WenQuanYi Micro Hei<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">        &lt;edit name="family" mode="prepend" binding="strong"&gt;</div><div class="line">            &lt;string&gt;Ubuntu&lt;/string&gt;</div><div class="line">            &lt;string&gt;WenQuanYi Micro Hei&lt;/string&gt;</div><div class="line">            &lt;string&gt;AR PL UMing CN&lt;/string&gt;</div><div class="line">            &lt;string&gt;AR PL ShanHeiSun Uni&lt;/string&gt;</div><div class="line">            &lt;string&gt;Bitstream Vera Serif&lt;/string&gt;</div><div class="line">            &lt;string&gt;DejaVu Serif&lt;/string&gt;</div><div class="line">            &lt;string&gt;AR PL UKai CN&lt;/string&gt;</div><div class="line">            &lt;string&gt;AR PL ZenKai Uni&lt;/string&gt;</div><div class="line">        &lt;/edit&gt;</div><div class="line">--&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>sans<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Ubuntu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>WenQuanYi Micro Hei<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">"any"</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Ubuntu<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>WenQuanYi Micro Hei<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"font"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">target</span>=<span class="string">"pattern"</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">compare</span>=<span class="string">"contains"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">string</span>&gt;</span>zh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">target</span>=<span class="string">"pattern"</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">compare</span>=<span class="string">"contains"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">string</span>&gt;</span>ja<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">target</span>=<span class="string">"pattern"</span> <span class="attr">name</span>=<span class="string">"lang"</span> <span class="attr">compare</span>=<span class="string">"contains"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">string</span>&gt;</span>ko<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"spacing"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">const</span>&gt;</span>proportional<span class="tag">&lt;/<span class="name">const</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"globaladvance"</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">bool</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">Synthetic emboldening for fonts that do not have bold face available</div><div class="line">--&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">"font"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- check to see if the font is just regular --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"weight"</span> <span class="attr">compare</span>=<span class="string">"less_eq"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">const</span>&gt;</span>medium<span class="tag">&lt;/<span class="name">const</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- check to see if the pattern requests bold --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">target</span>=<span class="string">"pattern"</span> <span class="attr">name</span>=<span class="string">"weight"</span> <span class="attr">compare</span>=<span class="string">"more"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">const</span>&gt;</span>medium<span class="tag">&lt;/<span class="name">const</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">set the embolden flag</div><div class="line">needed for applications using cairo, e.g. gucharmap, gedit, ...</div><div class="line">--&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"embolden"</span> <span class="attr">mode</span>=<span class="string">"assign"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">set weight to bold</div><div class="line">needed for applications using Xft directly, e.g. Firefox, ...</div><div class="line">--&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"weight"</span> <span class="attr">mode</span>=<span class="string">"assign"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">const</span>&gt;</span>bold<span class="tag">&lt;/<span class="name">const</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo MathJax插件]]></title>
      <url>/2015-12-02-Hexo-MathJax%E6%8F%92%E4%BB%B6.html</url>
      <content type="html"><![CDATA[<p>本文翻译自<a href="https://github.com/akfish/hexo-math" target="_blank" rel="external">这篇</a>文章。</p><p>UPDATE 2016/06/22: 增加“配置”部分</p><a id="more"></a><h2 id="介绍">介绍</h2><p>一个使用 MathJax 来渲染数学公式的 Hexo 插件，具有以下特点：</p><ul><li>自动配置并添加到 MathJax 的引用</li><li>支持 MathJax 的行内公式语法和数学标签</li></ul><h2 id="安装">安装</h2><pre><code>npm install hexo-math --save
</code></pre><p>如果你是从旧版升级上来的，请参阅<a href="#Migration">迁移注意事项</a>。</p><h2 id="配置">配置</h2><p>在你的<code>_config.yml</code>里加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">plugins:</div><div class="line">- hexo-math</div></pre></td></tr></table></figure><h2 id="使用">使用</h2><p>你可以直接使用 MathJax 的行内公式语法，但要记得在每个特殊符号前加一个<code>\</code>来将其转义。LaTeX包含大量的像<code>\</code>这样的特殊字符，这就给手动转义带来了极大的不便。这种情况下，你可以使用 hexo-math 的标签来让你解脱。</p><h3 id="mathjax-inline">MathJax Inline:</h3><pre><code>Simple inline $a = b + c$.
</code></pre><h3 id="mathjax-block">MathJax Block:</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$$\frac&#123;\partial u&#125;&#123;\partial t&#125;</div><div class="line">= h^2 \left( \frac&#123;\partial^2 u&#125;&#123;\partial x^2&#125; +</div><div class="line">\frac&#123;\partial^2 u&#125;&#123;\partial y^2&#125; +</div><div class="line">\frac&#123;\partial^2 u&#125;&#123;\partial z^2&#125;\right)$$</div></pre></td></tr></table></figure><h3 id="tag">Tag:</h3><p>单行内容会被解析成行内公式（如同使用<code>$...$</code>）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This equation &#123;% math %&#125;\cos 2\theta = \cos^2 \theta - \sin^2 \theta =  2 \cos^2 \theta - 1 &#123;% endmath %&#125; is inline.</div></pre></td></tr></table></figure><p>多行内容会被解析成数学语句块（如同使用<code>$$...$$</code>）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;% math %&#125;</div><div class="line">\begin&#123;aligned&#125;</div><div class="line">\dot&#123;x&#125; &amp; = \sigma(y-x) \\</div><div class="line">\dot&#123;y&#125; &amp; = \rho x - y - xz \\</div><div class="line">\dot&#123;z&#125; &amp; = -\beta z + xy</div><div class="line">\end&#123;aligned&#125;</div><div class="line">&#123;% endmath %&#125;</div></pre></td></tr></table></figure><blockquote><p><strong>自 2.0.0 被弃用的方式</strong> <strong>Tag Block:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;% math_block %&#125;</div><div class="line">\begin&#123;aligned&#125;</div><div class="line">\dot&#123;x&#125; &amp; = \sigma(y-x) \\</div><div class="line">\dot&#123;y&#125; &amp; = \rho x - y - xz \\</div><div class="line">\dot&#123;z&#125; &amp; = -\beta z + xy</div><div class="line">\end&#123;aligned&#125;</div><div class="line">&#123;% endmath_block %&#125;</div></pre></td></tr></table></figure></blockquote><p></p><h2 id="Migration">迁移注意事项</h2><p></p><h3 id="迁移至-2-0-0">迁移至 2.0.0</h3><ul><li><code>math-block</code>已被弃用（但它仍然是稳定的，不会弄乱你的网站）</li><li>由于自 Hexo 3.x 以来的大量更新，<code>math</code>块用于处理行内公式和公式语句块（如果你使用<code>math</code>, 可能会弄乱你的网站）</li></ul><p>自 Hexo 3.x 以来，标签引擎由 swig 换成了 nunjucks. 如下语法已经失效：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% math \frac&#123;|ax + by + c|&#125;&#123;\sqrt&#123;a^&#123;2&#125;+b^&#123;2&#125;&#125;&#125; %&#125;</div></pre></td></tr></table></figure><p>你应该使用开放标签和闭合标签来替换：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% math %&#125;\frac&#123;|ax + by + c|&#125;&#123;\sqrt&#123;a^&#123;2&#125;+b^&#123;2&#125;&#125;&#125; &#123;% endmath %&#125;</div></pre></td></tr></table></figure><p>请参照以上内容修改你的<code>math</code>标签。</p><h3 id="迁移至-1-0-6">迁移至 1.0.6</h3><p><strong>！！注意！！</strong></p><p>自 1.0.6, hexo-math 更改了把 MathJax 插入网站的方式，有即时和按需两种，这意味着：</p><ul><li><strong>你不必运行<code>hexo math install</code></strong></li><li>MathJax 不会在没有 math 标签的页面上加载，以提高加载速度。</li></ul><p>如果你以前运行过<code>hexo math install</code>, <strong>请务必</strong>：</p><pre><code>$ hexo math
</code></pre><p>这会清理掉以前的安装。如果这没有生效的话，尝试重新安装你的主题。</p><h3 id="从-1-0-4-升级到-1-0-5-支持-hexo-3-0">从 1.0.4 升级到 1.0.5 (支持 Hexo 3.0)</h3><p>Hexo 3.0 引入了许多重大更新，hexo-math 1.0.5之前的版本与之不兼容。 我们做了如下更改以适配 3.0 的新 API:</p><ul><li>公式块标签<code>math-block</code>更名为<code>math_block</code></li></ul><h3 id="从-1-0-3-或更早的版本">从 1.0.3 或更早的版本</h3><p>自 1.0.4, MathJax 脚本会插入到<code>&lt;body&gt;</code>而不是<code>&lt;head&gt;</code>. 升级到新版本之前，你应该：</p><pre><code>$ hexo math uninstall
</code></pre><p><code>hexo-math</code>更新之后，再运行：</p><pre><code>$ hexo math install
</code></pre><h2 id="开发">开发</h2><h3 id="测试">测试</h3><p>要运行测试套件，首先应该安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> .test-site</div><div class="line">$ npm install</div></pre></td></tr></table></figure><p>然后在<code>hexo-math</code>的根目录执行<code>npm test</code>.</p><h4 id="加入发贴规格">加入发贴规格</h4><p>在<code>test-site/source/_post</code>文件夹里对每一个测试情况加上如下两个文件：</p><ul><li>[test-case-name].md</li><li>[test-case-name].md.expected</li></ul><p><code>.md</code>文件包含了贴文的 Markdown 源文档，<code>.expected</code>文件包含了理论上渲染后的HTML文档。</p><p>如果添加了一个测试来强调某个问题的话，问题的id应该添加到<code>.md</code>文档的 front-matter 区域</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">title: "Tag Escpae"</div><div class="line">date: 2015-04-21 02:47:19</div><div class="line">tags:</div><div class="line">issues:</div><div class="line"><span class="section">- 10</span></div><div class="line">---</div><div class="line">&#123;% math %&#125; |a|&lt;1 &#123;% endmath %&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> MathJax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GitHub 风格的 Markdown 语法]]></title>
      <url>/2015-12-02-GitHub-%E9%A3%8E%E6%A0%BC%E7%9A%84-Markdown-%E8%AF%AD%E6%B3%95.html</url>
      <content type="html"><![CDATA[<p>本文转载自<a href="https://github.com/baixing/FE-Blog/issues/6" target="_blank" rel="external">此</a>。</p><a id="more"></a><blockquote><ul><li>Original: <a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">GitHub Flavored Markdown - GitHub Help</a></li><li>Translated by: <a href="https://github.com/cssmagic" target="_blank" rel="external">@cssmagic</a> 声明：原文版权属于 GitHub。中文翻译部分并非官方文档，仅供参考。</li></ul></blockquote><p>GitHub 全站支持 “GitHub 风格的 Markdown 语法”（简称 GFM），你可以用它来书写 issue、pull request（以下简称 “PR”）和各种评论。它和标准 Markdown 语法（SM）相比，存在一些值得注意的差异，并且增加了一些额外功能。</p><p>如果你对 Markdown 还不是很熟悉，可以先看一眼 <a href="https://help.github.com/articles/markdown-basics" target="_blank" rel="external">Markdown 语法基础</a>。如果你想了解在书写 issue、评论和 PR 描述时有哪些技巧（比如任务清单这样的高级功能），你应该读一下 <a href="https://github.com/baixing/FE-Blog/issues/5" target="_blank" rel="external">GitHub 上的书写方式</a>。</p><h2 id="与传统-markdown-的差异">与传统 Markdown 的差异</h2><h3 id="单词中的多个下划线">单词中的多个下划线</h3><p>Markdown 会把所有成对的下划线（<code>_</code>）转换为斜体，但 GFM 不会处理单词内的那些下划线，比如这些：</p><ul><li>wow_great_stuff</li><li>do_this_and_do_that_and_another_thing.</li></ul><p>这样一来，那些采用下划线作为分隔符的代码或名字就可以正确渲染了。如果你确实要把单词中的某一部分设置为斜体，可以使用星号（<code>*</code>）。</p><h3 id="链接自动识别">链接自动识别</h3><p>GFM 会自动为标准的 URL 加上链接，因此，如果你只想链接到一个 URL（而不想设置链接文字），那你直接输入这个 URL 就可以了，它将被自动转换为一个链接。（译注：Email 地址也适用于此特性。）</p><pre><code>http://example.com
</code></pre><p>将被渲染为：</p><p><a href="http://example.com" target="_blank" rel="external">http://example.com</a></p><h3 id="删除线">删除线</h3><p>GFM 增加了删除线语法，补上了标准 Markdown 在这方面的不足。</p><pre><code>~~Mistaken text.~~
</code></pre><p>将被渲染为：</p><p><s>Mistaken text.</s></p><h3 id="围栏式代码块">围栏式代码块</h3><p>标准 Markdown 会把每行前面空四格的文本块转换为代码块；GFM 同时还支持围栏式代码块。只要把你的代码块包裹在三个<code>`</code>之间就行了（如下所示），你再也不需要通过无休止的缩进来标记代码块了。请注意，虽然围栏式代码块语法并不需要在头部插入空行（缩进式代码块语法是需要的），但我们仍然建议你留出空行，因为这样可以令 Markdown 源码的可读性更好。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Here's an example:</div><div class="line"></div><div class="line"><span class="code">```</span></div><div class="line">function test() &#123;</div><div class="line">    console.log("notice the blank line before this function?");</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure><p>请留意，列表中的代码块需要缩进 8 个空格，才会被正确地渲染。</p><h3 id="语法高亮">语法高亮</h3><p>关于代码块的技巧还不止于此，你还可以为代码块指定语法着色效果。在围栏式代码块中，你可以指定一个可选的语言标识符，然后我们就可以为它启用语法着色了。比如说，这样可以为一段 Ruby 代码着色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="code">```ruby</span></div><div class="line">require 'redcarpet'</div><div class="line">markdown = Redcarpet.new("Hello World!")</div><div class="line">puts markdown.to_html</div><div class="line">```</div></pre></td></tr></table></figure><p>我们使用 <a href="https://github.com/github/linguist" target="_blank" rel="external">Linguist</a> 来进行语言识别和语法着色。你可以在 <a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml" target="_blank" rel="external">语言 YAML 文件</a> 中查证哪些语言标识符是有效的。</p><h3 id="表格">表格</h3><p>把一系列文本精心组织起来，我们甚至可以得到一个表格。我们需要把表头的那一行用一串横杠（<code>-</code>）隔出来，然后把每一列用竖杠（<code>|</code>）隔开：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">First Header  | Second Header</div><div class="line">------------- | -------------</div><div class="line">Content Cell  | Content Cell</div><div class="line">Content Cell  | Content Cell</div></pre></td></tr></table></figure><p>出于美观的考虑，你也可以在表格的两端都加上竖杠：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">| First Header  | Second Header |</div><div class="line">| ------------- | ------------- |</div><div class="line">| Content Cell  | Content Cell  |</div><div class="line">| Content Cell  | Content Cell  |</div></pre></td></tr></table></figure><p>请注意，用于分隔列的竖杠并不需要跟表头严格对齐：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">| Name | Description          |</div><div class="line">| ------------- | ----------- |</div><div class="line">| Help      | Display the help window.|</div><div class="line">| Close     | Closes a window     |</div></pre></td></tr></table></figure><p>同时，你也可以在单元格内使用那些行内 Markdown 语法，比如加链接、加粗、加斜体或加删除线等等：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">| Name | Description          |</div><div class="line">| ------------- | ----------- |</div><div class="line">| Help      | ~~Display the~~ help window.|</div><div class="line">| Close     | <span class="emphasis">_Closes_</span> a window     |</div></pre></td></tr></table></figure><p>最后别忘了，给表头下的各段横线加上冒号（<code>:</code>），还可以指定各列文本的对齐方式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| Left-Aligned  | Center Aligned  | Right Aligned |</div><div class="line">| :------------ |:---------------:| -----:|</div><div class="line">| col 3 is      | some wordy text | $1600 |</div><div class="line">| col 2 is      | centered        |   $12 |</div><div class="line">| zebra stripes | are neat        |    $1 |</div></pre></td></tr></table></figure><p>在横线<strong>最左侧</strong>加冒号表示该列一律左对齐；在横线<strong>最右侧</strong>加冒号表示该列一律右对齐；在横线<strong>两端</strong>加冒号表示该列一律居中对齐。</p><h3 id="html">HTML</h3><p>在 README、issue 和 PR 中，你还可以使用有限的一些 HTML 语法。</p><p>关于可用的标签和属性有哪些，你可以在 <a href="https://github.com/github/markup" target="_blank" rel="external">github/markup</a> 这个项目中找到一份完整的清单。</p><h2 id="相关阅读">相关阅读</h2><ul><li><a href="https://help.github.com/articles/markdown-basics" target="_blank" rel="external">Markdown 语法基础</a></li></ul>]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> GitHub </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown的正确使用方式]]></title>
      <url>/2015-12-02-Markdown%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.html</url>
      <content type="html"><![CDATA[<p>本文系转载而来。</p><a id="more"></a><blockquote><p>此文由英文版翻译而来，原文请点<a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="external">这里</a></p></blockquote><p>提示：本文自身也是用Markdown书写的，你可以<a href="https://raw.githubusercontent.com/unnamed42/site/master/source/_posts/2015-12-02-Markdown%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.md" target="_blank" rel="external">查看源码</a>。</p><hr><h2 id="概述">概述</h2><h3 id="哲学">哲学</h3><p>Markdown设计上尽可能易读易写。</p><p>无论如何，可读性总是被放在第一位的。一篇Markdown格式的文档应该可以以纯文本形式发布， 而没有满篇的标签和各种格式化指令。事实上，Markdown的语法受到了很多文本转HTML工具语言的影响， 像<a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external">Setext</a>, <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external">atx</a>, <a href="http://textism.com/tools/textile/" target="_blank" rel="external">Textile</a>, <a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="external">reStructuredText</a>, <a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="external">Grutatext</a>, <a href="http://ettext.taint.org/doc/" target="_blank" rel="external">EtText</a>等， 但最大的灵感来自文本邮件的格式。</p><p>为了这个目的，Markdown的语法都是有标点字符组成，这些字符都经过精心挑选，以至于他们看起来就是他们本身的意思。 例如：单词两旁的星号看起来就像*强调*，Markdown的列表看起来也就是列表。甚至假如你用过email的话， 区块引用看起来也就像是一段文字的引用。</p><p></p><h2 id="html">内联HTML</h2><p></p><p>Markdown语法有一个目的：被用作一种网络<strong>书写</strong>格式</p><p>Markdown不是HTML的替代品，甚至长得也不像HTML。他的语法很很精悍，只是HTML标签的一个很小的子集。 它<strong>不是</strong>想创建一种语法以更简单的方法来插入HTML标签，在我看来，HTML标签已经很容易插入了。 Markdown的目的是文档易读，易写，更优美（译注：to edit prose，肿么翻译。。。）。 HTML是一种适用于“发布”的格式，而Markdown适用于“书写”。所以，Markdown格式语法只注重那些能在纯文本里表达的功能。</p><p>对于那些Markdown语法没有覆盖到的标签，你直接用HTML就行。没必要起个引子或定个界限来表示你从Markdown换成了HTML， 你只需要用那些标签就行了。</p><p>唯一的约束就是块级元素，像<code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>等，必须用空行与前后文隔开，并且块不能以制表符（<code>tab</code>） 或空格开头或结尾。Markdown够智能，不会在块级元素两旁插入多余的<code>&lt;p&gt;</code>标签。</p><p>举个例子，在一篇Markdown文档里插入一个HTML表格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">这是普通的一行。</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Foo<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"></div><div class="line">这是普通的另一行。</div></pre></td></tr></table></figure><p>注意块级HTML标签内部的Markdown格式语法是不会被处理的。例如，你不能在一个HTML块里面使用Markdown格式的<code>*强调*</code>。</p><p>行级HTML标签，像<code>&lt;span&gt;</code>，<code>&lt;cite&gt;</code>，<code>&lt;del&gt;</code>等，可以在任意的Markdown段落、列表、标题里使用。如果你想， 你甚至可以用HTML标签代替Markdown的格式，比如：如果比起Markdown的链接和图片语法，你更喜欢<code>&lt;a&gt;</code>或<code>&lt;img&gt;</code>， 那你就用吧。</p><p>不像块级HTML标签，行级HTML便签内部<strong>可以</strong>使用Markdown语法。</p><h3 id="特殊字符的自动转义">特殊字符的自动转义</h3><p>在HTML里面有两个需要特殊对待的字符：<code>&lt;</code>和<code>&amp;</code>。左尖括号用于开始标签，‘&amp;’符号用来指示HTML特殊字符编码。 如果你想使用他们的原始意义，你必须把他们转义成特殊字符，比如：<code>&amp;lt;</code>和<code>&amp;amp;</code>。</p><p>‘&amp;’尤其让网络写手们恶心。如果你想写“AT&amp;T”，你必须写“<code>AT&amp;amp;T</code>”。你甚至要转义URL里面的“&amp;”。 因此，当你想链接到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird
</code></pre><p>你必须在链接标签的<code>href</code>属性里转码成:</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird
</code></pre><p>不用说，这很容易忘掉，并且可能成为一个编码良好的网站里面唯一的HTML格式错误。</p><p>Markdown允许正常使用字符，它会自动转义。如果你在一个HTML特殊字符编码里面用了“&amp;”，它会保持不变， 否则它会被自动转换成<code>&amp;amp;</code>。</p><p>所以，如果你想在你的文章里面加一个版权标识，你可以这么写：</p><pre><code>&amp;copy;
</code></pre><p>Markdown不会转换。但是如果你这么写：</p><pre><code>AT&amp;T
</code></pre><p>Markdown会将它转换成：</p><pre><code>AT&amp;amp;T
</code></pre><p>类似的，由于Markdown至此<a href="#html">内联HTML</a>，如果你在HTML标签开头使用了左尖括号， Markdown会把它们仍然当做左尖括号。当如果你这么用：</p><pre><code>4 &lt; 5
</code></pre><p>Markdown会翻译成：</p><pre><code>4 &amp;lt; 5
</code></pre><p>然而，在Markdown的代码和引用里面，尖括号和“&amp;”<strong>肯定</strong>会被自动转义。这让用Markdown写HTML代码变得很简单。 （相对于原始HTML而言，原始HTML里面插入HTML格式的代码很恶心，因为每一个<code>&lt;</code>和<code>&amp;</code>都要先转义。）</p><hr><h2 id="块元素">块元素</h2><h3 id="段落和换行">段落和换行</h3><p>段落其实就是由一个以上空行隔开的一行或连续多行的文本（空行指看起来是空的行， 也就是说一个只包含空格或制表符的行）。普通段落不应该用空格或制表符缩进。</p><p>“一行或连续多行的文本”这条规则暗示着Markdown支持“硬换行”的段落。这与其他大部分包含转换换行选项的 文本转HTML工具有很大不同，这些工具会把段落里的每一个换行符转换为一个<code>&lt;br /&gt;</code>标签。</p><p>当你<strong>确实</strong>需要在Markdown里面插入一个<code>&lt;br /&gt;</code>换行标签时，只需要在行尾插入两个以上的空格， 然后回车就可以了。</p><p>当然，这让插入<code>&lt;br /&gt;</code>稍微麻烦了一点，但简单的“每个换行符就是一个<code>&lt;br /&gt;</code>”的规则不适用Markdown。 因为使用硬换行时，Markdown的email风格的<a href="#blockquote">区块引用</a>和多段落<a href="#list">列表</a>才能更好地工作，也更美观。</p><h3 id="标题">标题</h3><p>Markdown支持两种风格的标题：<a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external">Setext</a>风格的和<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external">atx</a>风格的。</p><p>Setext风格的标题是“下划线形式”的，一级标题使用等号<code>=</code>，二级标题使用破折号<code>-</code> （译注：原文这里是dash，和连字符hyphen有区别，区别可以参考 <a href="http://www.zhihu.com/question/20332423" target="_blank" rel="external">知乎上这个问题</a>。在键盘上没有对应的键，一般就用连字符代替了， 不过我看好几个Markdown实现这里反而不能使用dash，只能使用连字符）。 例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section">This is an H1</span></div><div class="line">=============</div><div class="line"></div><div class="line"><span class="section">This is an H2</span></div><div class="line">-------------</div></pre></td></tr></table></figure><p><code>=</code>或<code>-</code>个数没有限制。</p><p>Atx风格的标题使用行首的1-6个井号<code>#</code>标识1-6级的标题，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 我是一级标题</span></div><div class="line"></div><div class="line"><span class="section">## 我是二级标题</span></div><div class="line"></div><div class="line"><span class="section">###### 我是六级标题</span></div></pre></td></tr></table></figure><p>事实上，你还可以“关闭”atx风格的标题，不过这只是个装饰的功能，如果你觉得那样好看点的话。 闭合标题的井号没必要和开启标题的井号个数相同。（开启标题的井号个数决定了标题的等级）：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="section"># This is an H1 #</span></div><div class="line"></div><div class="line"><span class="section">## This is an H2 ##</span></div><div class="line"></div><div class="line"><span class="section">### This is an H3 ######</span></div></pre></td></tr></table></figure><h3 id="区块引用">区块引用</h3><p>Markdown使用email风格的<code>&gt;</code>符号来表示区块引用。如果你对邮件里的引用很熟悉，你肯定知道Markdown 里面的区块引用怎么用。如果你使用硬换行，并在每一行前加上<code>&gt;</code>，区块引用会更加美观：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 这是一个包含两个段落的区块引用。（下面的一堆google翻译说是拉丁文-_-||）</span></div><div class="line"><span class="quote">&gt; 今天元旦节啊，去哪里玩呢？2013啊，不能吃个盖饭就了事啊，晚上出去吃大餐才行啊。</span></div><div class="line"><span class="quote">&gt; 好吧，这是我扯的。。。原文作者应该不认识盖饭的说。</span></div><div class="line"><span class="quote">&gt; </span></div><div class="line">&gt; 接着扯呢？这篇文档有英文原文翻译过来，基于XXX许可证发布，转载的时候贴上链接就行了啦~</div><div class="line"><span class="quote">&gt; 觉得我翻译太龊了的话，那就。。。恩，凑活着看吧。</span></div></pre></td></tr></table></figure><p>Markdown允许你偷个懒，你可以只在硬换行的第一行行首加一个<code>&gt;</code>：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 这是一个包含两个段落的区块引用。（译注：下面的一堆google翻译说是拉丁文-_-||）</span></div><div class="line">今天元旦节啊，去哪里玩呢？2013啊，不能吃个盖饭就了事啊，晚上出去吃大餐才行啊。</div><div class="line">好吧，这是我扯的。。。原文作者应该不认识盖饭的说。</div><div class="line"></div><div class="line"><span class="quote">&gt; 接着扯呢？这篇文档有英文原文翻译过来，基于XXX许可证发布，转载的时候贴上链接就行了啦~</span></div><div class="line">觉得我翻译太龊了的话，那就。。。恩，凑活着看吧。</div></pre></td></tr></table></figure><p>区块引用还可以嵌套（就是区块引用里面再用区块引用），只要再加一个<code>&gt;</code>级别就可以了：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 我是第一层的引用。</span></div><div class="line"><span class="quote">&gt;</span></div><div class="line">&gt;&gt; 我是嵌套的区块引用。</div><div class="line"><span class="quote">&gt;</span></div><div class="line">&gt; 又回到第一层了。</div></pre></td></tr></table></figure><p>区块引用里面也可以包含其他的Markdown元素，包括标题，列表和代码块：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; ## 我是标题</span></div><div class="line"><span class="quote">&gt; </span></div><div class="line">&gt; 1. 我是列表第一项</div><div class="line"><span class="quote">&gt; 2. 我是列表第二项</span></div><div class="line"><span class="quote">&gt;</span></div><div class="line">&gt; 来个代码块的例子：</div><div class="line"><span class="quote">&gt;</span></div><div class="line">&gt;       return shell_exec("echo $input | $markdown_script");</div></pre></td></tr></table></figure><p>任何一个主流编辑器应该都可以很方便的做一个email风格的引用。比如BBEdit里面，你可以选择 一些文本然后在Text菜单里面选择Increase Quote Level。</p><h3 id="列表">列表</h3><p>Markdown支持有序和无序列表。</p><p>无序列表可以用星号<code>*</code>、加号<code>+</code>或者连字符<code>-</code>（译注：这里是hyphen）做列表标记，可互换：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span>红</div><div class="line"><span class="bullet">* </span>绿</div><div class="line"><span class="bullet">* </span>蓝</div></pre></td></tr></table></figure><p>这种方式与</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">+ </span>红</div><div class="line"><span class="bullet">+ </span>绿</div><div class="line"><span class="bullet">+ </span>蓝</div></pre></td></tr></table></figure><p>和</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">- </span>红</div><div class="line"><span class="bullet">- </span>绿</div><div class="line"><span class="bullet">- </span>蓝</div></pre></td></tr></table></figure><p>是等价的。</p><p>有序列表使用数字紧接一个句点（<code>.</code>）来标记：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>Bird</div><div class="line"><span class="bullet">2. </span>McHale</div><div class="line"><span class="bullet">3. </span>Parish</div></pre></td></tr></table></figure><p>记住一点，使用的数字对最终的HTML输出没有任何影响。上面的列表会产生下面的HTML输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>McHale<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Parish<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div></pre></td></tr></table></figure><p>如果你在Markdown里面这么写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>Bird</div><div class="line"><span class="bullet">1. </span>McHale</div><div class="line"><span class="bullet">1. </span>Parish</div></pre></td></tr></table></figure><p>或者甚至这么写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">3. </span>Bird</div><div class="line"><span class="bullet">1. </span>McHale</div><div class="line"><span class="bullet">8. </span>Parish</div></pre></td></tr></table></figure><p>得到的HTML输出时一模一样的。重点是，如果在Markdown列表里使用有序的数字，那么在发布的HTML 里面可以得到一致的列表。但是，如果你有点懒，你也大可不必这么做。</p><p>不过，就算你使用偷懒的方式，你还是应该让列表从1开始。因为在将来，Markdown可能会支持从任意数字 开始有序列表。（译注：上面第三个可能就成了3,4,5）</p><p>列表标记通常从左边界开始，但是也可以缩进最多三个空格。并且列表标记后面必须是一个以上的空格或制表符。</p><p>为了让列表好看点，你也可以缩进一下：（译注：好眼熟…）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>今天元旦节啊，去哪里玩呢？2013啊，不能吃个盖饭就了事啊，晚上出去吃大餐才行啊。</div><div class="line"><span class="code">    好吧，这是我扯的。。。原文作者应该不认识盖饭的说。</span></div><div class="line"></div><div class="line"><span class="bullet">*   </span>接着扯呢？这篇文档有英文原文翻译过来，基于XXX许可证发布，转载的时候贴上链接就行了啦~</div><div class="line"><span class="code">    觉得我翻译太龊了的话，那就。。。恩，凑活着看吧。</span></div></pre></td></tr></table></figure><p>如果你想偷懒，那就没必要了:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>今天元旦节啊，去哪里玩呢？2013啊，不能吃个盖饭就了事啊，晚上出去吃大餐才行啊。</div><div class="line">好吧，这是我扯的。。。原文作者应该不认识盖饭的说。</div><div class="line"></div><div class="line"><span class="bullet">*   </span>接着扯呢？这篇文档有英文原文翻译过来，基于XXX许可证发布，转载的时候贴上链接就行了啦~</div><div class="line">觉得我翻译太龊了的话，那就。。。恩，凑活着看吧。</div></pre></td></tr></table></figure><p>如果列表项两旁有空行，Markdown会在HTML输出里用<code>&lt;p&gt;</code>标签把列表项包裹起来。例如，输入：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>Bird</div><div class="line"><span class="bullet">*   </span>Magic</div></pre></td></tr></table></figure><p>会变成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Magic<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><p>但如果这么写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>Bird</div><div class="line"></div><div class="line"><span class="bullet">*   </span>Magic</div></pre></td></tr></table></figure><p>会变成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Magic<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure><p>列表项里面可能包含多个段落，后面的段落必须用4个空格或1个制表符缩进。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1.  </span>这是一个包含两个段落的区块引用。（译注：复制粘贴）</div><div class="line"><span class="code">    今天元旦节啊，去哪里玩呢？2013啊，不能吃个盖饭就了事啊，晚上出去吃大餐才行啊。</span></div><div class="line"><span class="code">    好吧，这是我扯的。。。原文作者应该不认识盖饭的说。</span></div><div class="line"></div><div class="line"><span class="code">    接着扯呢？这篇文档有英文原文翻译过来，基于XXX许可证发布，转载的时候贴上链接就行了啦~</span></div><div class="line"><span class="code">    觉得我翻译太龊了的话，那就。。。恩，凑活着看吧。</span></div><div class="line"></div><div class="line"><span class="bullet">2.  </span>再来一段。</div></pre></td></tr></table></figure><p>后面的段落每一行都缩进的话，看起来会舒服点，但这里Markdown同样允许你偷懒：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>我是一个有两段的列表项</div><div class="line"></div><div class="line"><span class="code">    我是列表项的第二段。你只需要缩进第一行就可以了。今天元旦节啊，去哪里玩呢？</span></div><div class="line">2013啊，不能吃个盖饭就了事啊，晚上出去吃大餐才行啊。好吧，这是我扯的。。。</div><div class="line">原文作者应该不认识盖饭的说。</div><div class="line"></div><div class="line"><span class="bullet">*   </span>我是另外一个列表项。</div></pre></td></tr></table></figure><p>想在列表项里面使用区块引用，定界符<code>&gt;</code>必须得缩进：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>我是一个有区块引用的列表项。</div><div class="line"></div><div class="line"><span class="code">    &gt; 我是一个藏在列表项</span></div><div class="line"><span class="code">    &gt; 里面的区块引用。</span></div></pre></td></tr></table></figure><p>想在列表项里面使用代码块，代码块必须缩进<strong>两次</strong>，也就是8个空格或2个制表符：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*   </span>我是一个有代码块的列表项。</div><div class="line"></div><div class="line"><span class="code">        &lt;code goes here&gt;</span></div></pre></td></tr></table></figure><p>虽然毫无意义，但是有序列表可能被意外地触发，比如这么写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1986. </span>What a great season.</div></pre></td></tr></table></figure><p>也就是说，行首有一个<strong>数字-句点-空格</strong>序列。为了避免这种情况，你可以用反斜线转义这个句点：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1986\. What a great season.</div></pre></td></tr></table></figure><h3 id="代码块">代码块</h3><p>预格式化的代码块一般被用来写程序相关的东西或者标记源代码。不像前面几段，代码块的每一行 都会原模原样被解析出来。Markdown会同时用<code>&lt;pre&gt;</code>和<code>&lt;code&gt;</code>把代码块包裹起来。</p><p>在Markdown插入代码块很简单，只需要为每一行缩进至少4个空格或一个制表符。例如，这个输入：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">我是一个平常的段落。</div><div class="line"></div><div class="line"><span class="code">    This is a code block.</span></div></pre></td></tr></table></figure><p>Markdown会产生：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个平常的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>This is a code block.</div><div class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div></pre></td></tr></table></figure><p>代码块的每一行都会被移除一个级别的缩进（4个空格或1个制表符）。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">来一段AppleScript的例子：</div><div class="line"></div><div class="line">tell application "Foo"</div><div class="line"><span class="code">    beep</span></div><div class="line">end tell</div></pre></td></tr></table></figure><p>会输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>来一段AppleScript的例子：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>tell application "Foo"</div><div class="line">    beep</div><div class="line">end tell</div><div class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div></pre></td></tr></table></figure><p>代码块会一直持续到某一行没有缩进（或文章结尾）为止。</p><p>在代码块里面，“&amp;”符号（<code>&amp;</code>）和尖括号（<code>&lt;</code>和<code>&gt;</code>）会被自动装换为HTML特殊字符编码。 这让在Markdown里面插入范例HTML代码变得很简单，只需要粘贴过来，缩进一下就可以了。 Markdown会自动转义“&amp;”符号和尖括号。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">    &amp;copy; 2004 Foo Corporation</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>&amp;lt;div class="footer"&amp;gt;</div><div class="line">    &amp;amp;copy; 2004 Foo Corporation</div><div class="line">&amp;lt;/div&amp;gt;</div><div class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div></pre></td></tr></table></figure><p>代码块里面的正常Markdown语法是不被解析的，比如，代码块里面的星号仍然表示星号。 这意味着用Markdown来写自己的语法也很简单。</p><h3 id="水平线">水平线</h3><p>你可以在一行里输入三个以上的连字符，星号或下划线来插入一个水平线标签（<code>&lt;hr /&gt;</code>）。 如果你喜欢，你也可以在连字符或星号之间插入空格。下面几行都可以产生一条水平线。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">* </span><span class="bullet">* *</span></div><div class="line"></div><div class="line"><span class="emphasis">***</span></div><div class="line"></div><div class="line"><span class="strong">*****</span></div><div class="line"></div><div class="line"><span class="bullet">- </span>- -</div><div class="line"></div><div class="line"><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="strong">_____</span><span class="emphasis">___</span></div></pre></td></tr></table></figure><hr><h2 id="内联元素">内联元素</h2><h3 id="链接">链接</h3><p>Markdown支持两种风格的链接：<strong>内联</strong>风格和<strong>引用</strong>风格。</p><p>两种风格的文本都是放在[方括号]里面的.</p><p>内联风格链接是在链接文本的方括号后面紧接着用一对圆括号，在圆括号里面放置链接的URL和一个<strong>可选</strong>的 引号包含起来的链接标题。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">这是一个内联风格的链接的[<span class="string">例子</span>](<span class="link">http://example.com/ "标题"</span>)</div><div class="line"></div><div class="line">没有标题的内联风格的链接的[<span class="string">例子</span>](<span class="link">http://example.com/</span>)</div></pre></td></tr></table></figure><p>会产生如下输出：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>这是一个内联风格的链接的<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/"</span> <span class="attr">title</span>=<span class="string">"标题"</span>&gt;</span></span>例子<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>没有标题的内联风格的链接的<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/"</span>&gt;</span></span>例子<span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div></pre></td></tr></table></figure><p>如果你引用的是同一个服务器上的本地资源，你可以使用相对路径：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">更多细节请查看[<span class="string">关于我</span>](<span class="link">/about/</span>)页面。</div></pre></td></tr></table></figure><p>引用风格的链接使用另一对方括号，里面放一个标识链接的标签：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个引用风格的链接的[<span class="string">例子</span>][<span class="symbol">id</span>]。</div></pre></td></tr></table></figure><p>你也可以用1个空格隔开这两对方括号：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是一个引用风格的链接的[例子] [id]。</div></pre></td></tr></table></figure><p>然后，在文档里任意一个地方，你要定义一个独占一行的链接标签：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/ "可选标题"</span></div></pre></td></tr></table></figure><p>格式：</p><ul><li>包含链接的标识的方括号（顶格或者至多3个空格的缩进）；</li><li>紧接着一个冒号（英文的）；</li><li>紧接着至少一个空格（或制表符）；</li><li>紧接着链接的URL；</li><li>后面接着可选的链接的title属性，可被双引号，单引号或圆括号包括。</li></ul><p>下面三个定义是等价的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">foo</span>]: <span class="link">http://example.com/ "可选的标题"</span></div><div class="line">[<span class="symbol">foo</span>]: <span class="link">http://example.com/ '可选的标题'</span></div><div class="line">[<span class="symbol">foo</span>]: <span class="link">http://example.com/ (可选的标题)</span></div></pre></td></tr></table></figure><p>**注意：**<a href="http://xn--Markdown-q86n.pl" target="_blank" rel="external">在Markdown.pl</a> 1.0.1里面有一个已知bug，单引号不能用来界定一个链接标题。</p><p>链接的URL也可以用尖括号括起来</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">id</span>]: <span class="link">&lt;http://example.com/&gt; "可选的标题"</span></div></pre></td></tr></table></figure><p>title属性也可以放在下一行，并且用多余的空格或制表符排下版，URL很长的时候，这样会美观多了。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">id</span>]: <span class="link">http://example.com/longish/path/to/resource/here</span></div><div class="line">"可选标题"</div></pre></td></tr></table></figure><p>链接定义在Markdown里用做创建链接，并且在HTML输出里面不会出现。</p><p>链接定义的名字可以包含字母、数字、空格和符号，但它<strong>不是</strong>大小写敏感的。 比如这两个链接是等价的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">link text</span>][<span class="symbol">a</span>]</div><div class="line">[<span class="string">link test</span>][<span class="symbol">A</span>]</div></pre></td></tr></table></figure><p>可以通过<strong>隐式链接名字</strong>忽略连接名，这时，链接文本的名字会被用作连接名， 用一对空方括号就可以了。比如：<a href="http://xn--Googlegoogle-r65t586qey2j.com" target="_blank" rel="external">链接Google到google.com</a>，只需要这样写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">Google</span>][<span class="symbol"></span>]</div></pre></td></tr></table></figure><p>然后定义链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">Google</span>]: <span class="link">http://google.com/</span></div></pre></td></tr></table></figure><p>因为链接名字可能含有空格，所以链接文本是多个单词的情况Markdown也能正常处理：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Visit [<span class="string">Daring Fireball</span>][<span class="symbol"></span>] for more information.</div></pre></td></tr></table></figure><p>然后定义链接：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">Daring Fireball</span>]: <span class="link">http://daringfireball.net/</span></div></pre></td></tr></table></figure><p>链接定义能够放在Markdown文章中任意的地方。我倾向把他们放在被引用的段落的后面， 但如果你喜欢，你也可以全放在文档结尾，就像脚注一样。</p><p>这里有个引用风格的链接的例子：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I get 10 times more traffic from [Google] [1] than for [Yahoo] [2] or [MSN] [3].</div><div class="line"></div><div class="line">[<span class="symbol">1</span>]: <span class="link">http://google.com/         "Google"</span></div><div class="line">[<span class="symbol">2</span>]: <span class="link">http://search.yahoo.com/   "Yahoo Search"</span></div><div class="line">[<span class="symbol">3</span>]: <span class="link">http://search.msn.com/     "MSN Search"</span></div></pre></td></tr></table></figure><p>使用隐式连接名，也可以这么写：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">I get 10 times more traffic from [<span class="string">Google</span>][<span class="symbol"></span>] than for [<span class="string">Yahoo</span>][<span class="symbol"></span>] or [<span class="string">MSN</span>][<span class="symbol"></span>].</div><div class="line"></div><div class="line">[<span class="symbol">google</span>]:   <span class="link">http://google.com/          "Google"</span></div><div class="line">[<span class="symbol">yahoo</span>]:    <span class="link">http://search.yahoo.com/    "Yahoo Search"</span></div><div class="line">[<span class="symbol">msn</span>]:      <span class="link">http://search.msn.com/      "MSN Search"</span></div></pre></td></tr></table></figure><p>上面两个例子都会产生以下HTML输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>I get 10 times more traffic from <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://google.com/"</span> <span class="attr">title</span>=<span class="string">"Google"</span>&gt;</span></div><div class="line">Google<span class="tag">&lt;/<span class="name">a</span>&gt;</span> than from <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://search.yahoo.com/"</span> <span class="attr">title</span>=<span class="string">"Yahoo Search"</span>&gt;</span>Yahoo</div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span> or <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://search.msn.com/"</span> <span class="attr">title</span>=<span class="string">"MSN Search"</span>&gt;</span>MSN<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>为了比较，以下是使用内联风格的链接风格书写的的相同的段落：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I get 10 times more traffic from [<span class="string">Google</span>](<span class="link">http://google.com/ "Google"</span>)</div><div class="line">than from [<span class="string">Yahoo Search</span>](<span class="link">http://search.yahoo.com/ "Yahoo Search"</span>) or </div><div class="line">[MSN&#125;(http://search.msn.com/ "MSN Search").</div></pre></td></tr></table></figure><p>引用风格的链接的目的不是为了更好书写，而是让你的文档更易读。比较上面的例子， 使用引用风格的链接，段落本身才81个字符长；而使用内联风格的有176个字符；原始HTML 是234个字符。在原始HTML里面，标记比文本都多。</p><p>使用Markdown的引用风格的链接，源文档长得更像浏览器渲染出来的结果。把标记相关的元数据都放到 段落外面，你就可以在不打断文章叙述脉络的情况下添加链接了。</p><h3 id="强调">强调</h3><p>Markdown把星号（<code>*</code>）和下划线（<code>_</code>）当做强调的指示符。处于一对<code>*</code>或<code>_</code>里面的文本在最终HTML里 会被<code>&lt;em&gt;</code>标签包裹。处于一对双星号（<code>**</code>）或双下划线（<code>__</code>）里面的文本在最终HTML里 会被<code>&lt;strong&gt;</code>标签包裹。例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">*single asterisks*</span></div><div class="line"></div><div class="line"><span class="emphasis">_single underscores_</span></div><div class="line"></div><div class="line"><span class="strong">**double asterisks**</span></div><div class="line"></div><div class="line"><span class="strong">__doubel underscores__</span></div></pre></td></tr></table></figure><p>会产生：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>single asterisks<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>single underscores<span class="xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span>double asterisks<span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span>double underscores<span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></div></pre></td></tr></table></figure><p>你可以选一种你喜欢的方式，唯一的约束就是要用同一种字符开启闭合。</p><p>强调可以在单词中间使用：</p><pre><code>un*frigging*believable
</code></pre><p>但是如果在<code>*</code>或<code>_</code>两旁加空格，<code>*</code>或<code>_</code>会被当做普通字符。</p><p>如果想在一个可能误会为指示符的地方使用普通的<code>*</code>和<code>_</code>，可以用反斜线转义：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\<span class="emphasis">*this text is surrounded by literal asterisks\*</span></div></pre></td></tr></table></figure><h3 id="代码">代码</h3><p>插入内联代码，要是用反引号（<code>`</code>）包裹。不像预格式化的代码块，一个内联代码 表示在一个普通段落里面的代码段，比如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Use the <span class="code">`printf()`</span> function.</div></pre></td></tr></table></figure><p>会生成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Use the <span class="tag">&lt;<span class="name">code</span>&gt;</span>printf()<span class="tag">&lt;/<span class="name">code</span>&gt;</span> function.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>如果要包含的代码段里有反引号，应该使用多个反引号包裹来标识代码段：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="code">``There is a literal backtick (`</span>) here.``</div></pre></td></tr></table></figure><p>这会产生以下输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>There is a literal backtick (`) here.<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>两旁的标识符可以包含空格（紧接着开启代码段的反引号一个，闭合代码段的反引号前一个）， 这让在代码段开头结尾插入反引号成为可能：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A single backtick in a code span: <span class="code">`` `</span> ``</div><div class="line"></div><div class="line">A backtick-delimited string in a code span: <span class="code">`` `</span>foo<span class="code">` `</span>`</div></pre></td></tr></table></figure><p>会生成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A single backtick in a code span: <span class="tag">&lt;<span class="name">code</span>&gt;</span>`<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A backtick-delimited string in a code span: <span class="tag">&lt;<span class="name">code</span>&gt;</span>`foo`<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>在内联代码段里，“&amp;”符号和尖括号会自动转换为HTML特殊符号编码，这让包含范例HTML标签变得很容易。 Markdown会把</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Please don't use any <span class="code">`&lt;blink&gt;`</span> tags.</div></pre></td></tr></table></figure><p>转换为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Please don't use any `&amp;lt;blink&amp;gt;<span class="tag">&lt;/<span class="name">code</span>&gt;</span> tags.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>你可以这么写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="code">`&amp;#8212;`</span> is the decimal-encoded equivalent of <span class="code">`&amp;mdash;`</span>.</div></pre></td></tr></table></figure><p>来生成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>&amp;amp;#8212;<span class="tag">&lt;/<span class="name">code</span>&gt;</span> is the decimal-encoded </div><div class="line">equivalent of <span class="tag">&lt;<span class="name">code</span>&gt;</span>&amp;amp;mdash;<span class="tag">&lt;/<span class="name">code</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><h3 id="图片">图片</h3><p>发明一种“自然的”语法在纯文本格式的文档里面插入图片是相当困难的，这是公认的。</p><p>Markdown使用一种类似链接的的图片语法，它同样允许两种风格：<strong>内联</strong>风格和<strong>引用</strong>风格。</p><p>内联风格的图片语法看起来像这样：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg</span>)</div><div class="line"></div><div class="line">|[<span class="string">Alt text</span>](<span class="link">/path/to/img.jpg "Optional title"</span>)</div></pre></td></tr></table></figure><p>格式：</p><ul><li>一个感叹号（译注：英文的）：<code>!</code>；</li><li>紧接一对方括号，里面是img标签的alt属性文本；</li><li>紧接着一对圆括号，里面是URL或者图片的路径，同样有一个可选的<code>title</code>属性， 它包含在双引号或单引号中。</li></ul><p>引用风格的图片语法看起来是这样子：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![<span class="string">Alt text</span>][<span class="symbol">id</span>]</div></pre></td></tr></table></figure><p>id是定义图片引用的名字。图片引用定义语法和引用风格的链接是一样的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="symbol">id</span>]: <span class="link">url/to/image "Optional title attribute"</span></div></pre></td></tr></table></figure><p>这样写，Markdown没有语法指定图片尺寸，如果确实需要值定尺寸，那就使用HTML的<code>&lt;img&gt;</code>标签吧。</p><hr><h2 id="杂项">杂项</h2><h3 id="自动链接">自动链接</h3><p>Markdown为URL和email地址提供一种简洁的方创建自动链接：用尖括号把URL和email地址括起来就可以了。 这意味着，如果你想让链接显示本身的URL或email地址的原始文本，并让它可以点击，你可以这么做：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">example.com</span>/&gt;</span></span></div></pre></td></tr></table></figure><p>Markdown会把他转换为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com/"</span>&gt;</span>http://example.com/<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure><p>email地址的自动链接差不多，只不过Markdown会把地址字符随机替换为十进制或十六进制编码，这样可以 避免你的email地址被一些地址爬虫爬到。比如说Markdown会把</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">address@example.com</span>&gt;</span></span></div></pre></td></tr></table></figure><p>转换为大致这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&amp;#x6d;&amp;#97;&amp;#x69;&amp;#x6c;&amp;#x74;&amp;#111;&amp;#58;&amp;#x61;&amp;#x64;&amp;#100;</span></span></div><div class="line">&amp;#114;&amp;#101;&amp;#x73;&amp;#x73;&amp;#64;&amp;#x65;&amp;#120;&amp;#97;&amp;#x6d;&amp;#x70;&amp;#108;&amp;#x65;</div><div class="line">&amp;#46;&amp;#x63;&amp;#111;&amp;#109;"&gt;&amp;#97;&amp;#x64;&amp;#100;&amp;#114;&amp;#x65;&amp;#x73;&amp;#115;&amp;#x40;</div><div class="line">&amp;#x65;&amp;#x78;&amp;#x61;&amp;#x6d;&amp;#112;&amp;#108;&amp;#101;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#109;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure><p>他在浏览器里面被渲染出来就是一个到address@example.com的可点击链接。</p><p>（这种实体编码的技巧确实会躲过大部分地址爬虫，但当然不是所有的。但有总比没有好，这样发布的地址 最后很可能会开始收垃圾邮件。）</p><h3 id="转义符">转义符</h3><p>Markdown允许你对Markdown格式语法里面有特殊意义的字符做转义来输出他们本身。例如，如果你想在单词 两旁加上星号（而不是<code>&lt;em&gt;</code>标签），你可以用在星号前加反斜线，就像这样：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\<span class="emphasis">*literal asterisks\*</span></div></pre></td></tr></table></figure><p>Markdown为以下字符提供转义：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">\   反斜线</div><div class="line">`   反引号</div><div class="line"><span class="bullet">*   </span>星号</div><div class="line">_   下划线</div><div class="line">&#123;&#125;  花括号</div><div class="line">[]  方括号</div><div class="line">()  圆括号</div><div class="line"><span class="section">#   井号</span></div><div class="line"><span class="bullet">+   </span>加号</div><div class="line"><span class="bullet">-   </span>减号（连字符）</div><div class="line">.   句点</div><div class="line">!   感叹号</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown语法测试]]></title>
      <url>/2015-12-02-Markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95.html</url>
      <content type="html"><![CDATA[<p>看看 Markdown 的效果</p><a id="more"></a><h2 id="标题">标题</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">This is an H1</span></div><div class="line">=============</div></pre></td></tr></table></figure><h1 id="this-is-an-h1">This is an H1</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="section">This is an H2</span></div><div class="line">-------------</div></pre></td></tr></table></figure><h2 id="this-is-an-h2">This is an H2</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section"># 这是 H1</span></div></pre></td></tr></table></figure><h1 id="这是-h1">这是 H1</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">## 这是 H2</span></div></pre></td></tr></table></figure><h2 id="这是-h2">这是 H2</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="section">###### 这是 H6</span></div></pre></td></tr></table></figure><h6 id="这是-h6">这是 H6</h6><hr><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="quote">&gt; 这是引用</span></div><div class="line"><span class="quote">&gt; &gt; 这是引用中的引用</span></div></pre></td></tr></table></figure><blockquote><p>这是引用</p><blockquote><p>这是引用中的引用</p></blockquote></blockquote><h2 id="列表">列表</h2><h3 id="这是无序列表">这是无序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">*  </span>Red</div><div class="line"><span class="bullet">*  </span>Green</div><div class="line"><span class="bullet">*  </span>Blue</div></pre></td></tr></table></figure><ul><li>Red</li><li>Green</li><li>Blue</li></ul><h3 id="这是有序列表">这是有序列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1. </span>C</div><div class="line"><span class="bullet">2. </span>C++</div><div class="line"><span class="bullet">3. </span>C#</div></pre></td></tr></table></figure><ol><li>C</li><li>C++</li><li>C#</li></ol><h3 id="包含段落的项目列表">包含段落的项目列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="bullet">1.  </span>This is a list item with two paragraphs. Lorem ipsum dolor</div><div class="line"><span class="code">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span></div><div class="line"><span class="code">    mi posuere lectus.</span></div><div class="line"></div><div class="line"><span class="code">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span></div><div class="line"><span class="code">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span></div><div class="line"><span class="code">    sit amet velit.</span></div><div class="line"></div><div class="line"><span class="bullet">2.  </span>Suspendisse id sem consectetuer libero luctus adipiscing.</div></pre></td></tr></table></figure><ol><li><p>This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</p><p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</p></li><li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p></li></ol><h2 id="网址链接">网址链接</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">指向[<span class="string">百度</span>](<span class="link">https://www.baidu.com</span>)的链接</div><div class="line"></div><div class="line">这是一个参考式的[<span class="string">链接</span>][<span class="symbol">1</span>]</div><div class="line"></div><div class="line">[<span class="symbol">1</span>]: <span class="link">https://www.google.com</span></div><div class="line"></div><div class="line">或者使用链接名称的方式 [<span class="string">Yahoo</span>][<span class="symbol"></span>]</div><div class="line"></div><div class="line">[<span class="symbol">yahoo</span>]: <span class="link">http://search.yahoo.com  "Yahoo Search"</span></div></pre></td></tr></table></figure><p>指向<a href="https://www.baidu.com" target="_blank" rel="external">百度</a>的链接</p><p>这是一个参考式的<a href="https://www.google.com" target="_blank" rel="external">链接</a></p><p>或者使用链接名称的方式 <a href="http://search.yahoo.com" title="Yahoo Search" target="_blank" rel="external">Yahoo</a></p><h2 id="强调">强调</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="emphasis">*斜体*</span></div><div class="line"><span class="strong">**加粗**</span></div></pre></td></tr></table></figure><p><em>斜体</em> <strong>加粗</strong></p><h2 id="代码">代码</h2><p>在一段文字当中插入代码要<code>printf();</code>这样 直接写要</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scanf();</div></pre></td></tr></table></figure><pre><code>scanf();
</code></pre><p>这样</p><p>代码块的测试</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="code">```C</span></div><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">int main(void)&#123;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">```</div><div class="line"></div><div class="line"><span class="code">```</span></div><div class="line">#include &lt;iostream&gt;</div><div class="line">    </div><div class="line">using std::cout;</div><div class="line">using std::endl;</div><div class="line">    </div><div class="line">int main()&#123;</div><div class="line">    cout&lt;&lt;"Hello, world!"&lt;&lt;endl;</div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line">```</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line">    </div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</div><div class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello, world!"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="表格">表格</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">| Name | Description          |</div><div class="line">| ------------- | ----------- |</div><div class="line">| Help      | ~~Display the~~ help window.|</div><div class="line">| Close     | <span class="emphasis">_Closes_</span> a window     |</div><div class="line"></div><div class="line">| First Header  | Second Header |</div><div class="line">| ------------- | ------------- |</div><div class="line">| Content Cell  | Content Cell  |</div><div class="line">| Content Cell  | Content Cell  |</div></pre></td></tr></table></figure><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>Help</td><td><s>Display the</s> help window.</td></tr><tr><td>Close</td><td><em>Closes</em> a window</td></tr></tbody></table><table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table><h2 id="mathjax的测试">MathJax的测试</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$a = b + c$</div></pre></td></tr></table></figure><p>$a = b + c$</p><h2 id="footnote">Footnote</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Some long sentence.[^1]</div><div class="line"></div><div class="line">Another long sentence.[^2]</div><div class="line"></div><div class="line">[<span class="string">^1</span>]: Test, [<span class="string">Link</span>](<span class="link">https://google.com</span>).</div><div class="line">[<span class="string">^2</span>]: Another test, [<span class="string">Link</span>](<span class="link">https://www.baidu.com</span>) This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</div></pre></td></tr></table></figure><p>Some long sentence.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><p>Another long sentence.<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Test, <a href="https://google.com" target="_blank" rel="external">Link</a>. <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>Another test, <a href="https://www.baidu.com" target="_blank" rel="external">Link</a> This is a list item with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. <a href="#fnref2" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello world]]></title>
      <url>/2015-12-02-Hello-world.html</url>
      <content type="html"><![CDATA[<h1 id="hello-world">Hello, world!</h1>]]></content>
      
        <categories>
            
            <category> 杂项 </category>
            
        </categories>
        
        
    </entry>
    
  
  
</search>
